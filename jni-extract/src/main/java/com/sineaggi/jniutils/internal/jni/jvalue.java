// Generated by jextract

package com.sineaggi.jniutils.internal.jni;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * union jvalue {
 *     unsigned char z;
 *     signed char b;
 *     unsigned short c;
 *     short s;
 *     long i;
 *     long long j;
 *     float f;
 *     double d;
 *     struct _jobject* l;
 * };
 * }
 */
public class jvalue {

    public static MemoryLayout $LAYOUT() {
        return constants$0.const$0;
    }
    public static VarHandle z$VH() {
        return constants$0.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned char z;
     * }
     */
    public static byte z$get(MemorySegment seg) {
        return (byte)constants$0.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned char z;
     * }
     */
    public static void z$set(MemorySegment seg, byte x) {
        constants$0.const$1.set(seg, x);
    }
    public static byte z$get(MemorySegment seg, long index) {
        return (byte)constants$0.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void z$set(MemorySegment seg, long index, byte x) {
        constants$0.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle b$VH() {
        return constants$0.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * signed char b;
     * }
     */
    public static byte b$get(MemorySegment seg) {
        return (byte)constants$0.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * signed char b;
     * }
     */
    public static void b$set(MemorySegment seg, byte x) {
        constants$0.const$2.set(seg, x);
    }
    public static byte b$get(MemorySegment seg, long index) {
        return (byte)constants$0.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void b$set(MemorySegment seg, long index, byte x) {
        constants$0.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle c$VH() {
        return constants$0.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned short c;
     * }
     */
    public static short c$get(MemorySegment seg) {
        return (short)constants$0.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned short c;
     * }
     */
    public static void c$set(MemorySegment seg, short x) {
        constants$0.const$3.set(seg, x);
    }
    public static short c$get(MemorySegment seg, long index) {
        return (short)constants$0.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void c$set(MemorySegment seg, long index, short x) {
        constants$0.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle s$VH() {
        return constants$0.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * short s;
     * }
     */
    public static short s$get(MemorySegment seg) {
        return (short)constants$0.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * short s;
     * }
     */
    public static void s$set(MemorySegment seg, short x) {
        constants$0.const$4.set(seg, x);
    }
    public static short s$get(MemorySegment seg, long index) {
        return (short)constants$0.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void s$set(MemorySegment seg, long index, short x) {
        constants$0.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle i$VH() {
        return constants$0.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * long i;
     * }
     */
    public static int i$get(MemorySegment seg) {
        return (int)constants$0.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * long i;
     * }
     */
    public static void i$set(MemorySegment seg, int x) {
        constants$0.const$5.set(seg, x);
    }
    public static int i$get(MemorySegment seg, long index) {
        return (int)constants$0.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void i$set(MemorySegment seg, long index, int x) {
        constants$0.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle j$VH() {
        return constants$1.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * long long j;
     * }
     */
    public static long j$get(MemorySegment seg) {
        return (long)constants$1.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * long long j;
     * }
     */
    public static void j$set(MemorySegment seg, long x) {
        constants$1.const$0.set(seg, x);
    }
    public static long j$get(MemorySegment seg, long index) {
        return (long)constants$1.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void j$set(MemorySegment seg, long index, long x) {
        constants$1.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle f$VH() {
        return constants$1.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * float f;
     * }
     */
    public static float f$get(MemorySegment seg) {
        return (float)constants$1.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * float f;
     * }
     */
    public static void f$set(MemorySegment seg, float x) {
        constants$1.const$1.set(seg, x);
    }
    public static float f$get(MemorySegment seg, long index) {
        return (float)constants$1.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void f$set(MemorySegment seg, long index, float x) {
        constants$1.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle d$VH() {
        return constants$1.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * double d;
     * }
     */
    public static double d$get(MemorySegment seg) {
        return (double)constants$1.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * double d;
     * }
     */
    public static void d$set(MemorySegment seg, double x) {
        constants$1.const$2.set(seg, x);
    }
    public static double d$get(MemorySegment seg, long index) {
        return (double)constants$1.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void d$set(MemorySegment seg, long index, double x) {
        constants$1.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle l$VH() {
        return constants$1.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * struct _jobject* l;
     * }
     */
    public static MemorySegment l$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * struct _jobject* l;
     * }
     */
    public static void l$set(MemorySegment seg, MemorySegment x) {
        constants$1.const$3.set(seg, x);
    }
    public static MemorySegment l$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void l$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


