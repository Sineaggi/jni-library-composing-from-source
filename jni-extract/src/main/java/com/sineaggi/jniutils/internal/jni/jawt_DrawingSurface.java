// Generated by jextract

package com.sineaggi.jniutils.internal.jni;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct jawt_DrawingSurface {
 *     struct JNINativeInterface_** env;
 *     struct _jobject* target;
 *     long (*Lock)(struct jawt_DrawingSurface*);
 *     struct jawt_DrawingSurfaceInfo* (*GetDrawingSurfaceInfo)(struct jawt_DrawingSurface*);
 *     void (*FreeDrawingSurfaceInfo)(struct jawt_DrawingSurfaceInfo*);
 *     void (*Unlock)(struct jawt_DrawingSurface*);
 * };
 * }
 */
public class jawt_DrawingSurface {

    public static MemoryLayout $LAYOUT() {
        return constants$99.const$2;
    }
    public static VarHandle env$VH() {
        return constants$99.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * struct JNINativeInterface_** env;
     * }
     */
    public static MemorySegment env$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$99.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * struct JNINativeInterface_** env;
     * }
     */
    public static void env$set(MemorySegment seg, MemorySegment x) {
        constants$99.const$3.set(seg, x);
    }
    public static MemorySegment env$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$99.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void env$set(MemorySegment seg, long index, MemorySegment x) {
        constants$99.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle target$VH() {
        return constants$99.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * struct _jobject* target;
     * }
     */
    public static MemorySegment target$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$99.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * struct _jobject* target;
     * }
     */
    public static void target$set(MemorySegment seg, MemorySegment x) {
        constants$99.const$4.set(seg, x);
    }
    public static MemorySegment target$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$99.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void target$set(MemorySegment seg, long index, MemorySegment x) {
        constants$99.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    /**
     * {@snippet :
 * long (*Lock)(struct jawt_DrawingSurface*);
     * }
     */
    public interface Lock {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(Lock fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(constants$99.const$5, fi, constants$3.const$1, scope);
        }
        static Lock ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)constants$3.const$3.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle Lock$VH() {
        return constants$100.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * long (*Lock)(struct jawt_DrawingSurface*);
     * }
     */
    public static MemorySegment Lock$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$100.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * long (*Lock)(struct jawt_DrawingSurface*);
     * }
     */
    public static void Lock$set(MemorySegment seg, MemorySegment x) {
        constants$100.const$0.set(seg, x);
    }
    public static MemorySegment Lock$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$100.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void Lock$set(MemorySegment seg, long index, MemorySegment x) {
        constants$100.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static Lock Lock(MemorySegment segment, SegmentScope scope) {
        return Lock.ofAddress(Lock$get(segment), scope);
    }
    /**
     * {@snippet :
 * struct jawt_DrawingSurfaceInfo* (*GetDrawingSurfaceInfo)(struct jawt_DrawingSurface*);
     * }
     */
    public interface GetDrawingSurfaceInfo {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(GetDrawingSurfaceInfo fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(constants$100.const$1, fi, constants$9.const$1, scope);
        }
        static GetDrawingSurfaceInfo ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$9.const$3.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle GetDrawingSurfaceInfo$VH() {
        return constants$100.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * struct jawt_DrawingSurfaceInfo* (*GetDrawingSurfaceInfo)(struct jawt_DrawingSurface*);
     * }
     */
    public static MemorySegment GetDrawingSurfaceInfo$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$100.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * struct jawt_DrawingSurfaceInfo* (*GetDrawingSurfaceInfo)(struct jawt_DrawingSurface*);
     * }
     */
    public static void GetDrawingSurfaceInfo$set(MemorySegment seg, MemorySegment x) {
        constants$100.const$2.set(seg, x);
    }
    public static MemorySegment GetDrawingSurfaceInfo$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$100.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void GetDrawingSurfaceInfo$set(MemorySegment seg, long index, MemorySegment x) {
        constants$100.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetDrawingSurfaceInfo GetDrawingSurfaceInfo(MemorySegment segment, SegmentScope scope) {
        return GetDrawingSurfaceInfo.ofAddress(GetDrawingSurfaceInfo$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*FreeDrawingSurfaceInfo)(struct jawt_DrawingSurfaceInfo*);
     * }
     */
    public interface FreeDrawingSurfaceInfo {

        void apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(FreeDrawingSurfaceInfo fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(constants$100.const$3, fi, constants$9.const$5, scope);
        }
        static FreeDrawingSurfaceInfo ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    constants$10.const$1.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle FreeDrawingSurfaceInfo$VH() {
        return constants$100.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*FreeDrawingSurfaceInfo)(struct jawt_DrawingSurfaceInfo*);
     * }
     */
    public static MemorySegment FreeDrawingSurfaceInfo$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$100.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*FreeDrawingSurfaceInfo)(struct jawt_DrawingSurfaceInfo*);
     * }
     */
    public static void FreeDrawingSurfaceInfo$set(MemorySegment seg, MemorySegment x) {
        constants$100.const$4.set(seg, x);
    }
    public static MemorySegment FreeDrawingSurfaceInfo$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$100.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void FreeDrawingSurfaceInfo$set(MemorySegment seg, long index, MemorySegment x) {
        constants$100.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static FreeDrawingSurfaceInfo FreeDrawingSurfaceInfo(MemorySegment segment, SegmentScope scope) {
        return FreeDrawingSurfaceInfo.ofAddress(FreeDrawingSurfaceInfo$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*Unlock)(struct jawt_DrawingSurface*);
     * }
     */
    public interface Unlock {

        void apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(Unlock fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(constants$100.const$5, fi, constants$9.const$5, scope);
        }
        static Unlock ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    constants$10.const$1.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle Unlock$VH() {
        return constants$101.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*Unlock)(struct jawt_DrawingSurface*);
     * }
     */
    public static MemorySegment Unlock$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$101.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*Unlock)(struct jawt_DrawingSurface*);
     * }
     */
    public static void Unlock$set(MemorySegment seg, MemorySegment x) {
        constants$101.const$0.set(seg, x);
    }
    public static MemorySegment Unlock$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$101.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void Unlock$set(MemorySegment seg, long index, MemorySegment x) {
        constants$101.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static Unlock Unlock(MemorySegment segment, SegmentScope scope) {
        return Unlock.ofAddress(Unlock$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


