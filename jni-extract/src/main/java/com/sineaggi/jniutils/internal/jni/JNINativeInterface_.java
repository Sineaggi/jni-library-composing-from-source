// Generated by jextract

package com.sineaggi.jniutils.internal.jni;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct JNINativeInterface_ {
 *     void* reserved0;
 *     void* reserved1;
 *     void* reserved2;
 *     void* reserved3;
 *     long (*GetVersion)(struct JNINativeInterface_**);
 *     struct _jobject* (*DefineClass)(struct JNINativeInterface_**,char*,struct _jobject*,signed char*,long);
 *     struct _jobject* (*FindClass)(struct JNINativeInterface_**,char*);
 *     struct _jmethodID* (*FromReflectedMethod)(struct JNINativeInterface_**,struct _jobject*);
 *     struct _jfieldID* (*FromReflectedField)(struct JNINativeInterface_**,struct _jobject*);
 *     struct _jobject* (*ToReflectedMethod)(struct JNINativeInterface_**,struct _jobject*,struct _jmethodID*,unsigned char);
 *     struct _jobject* (*GetSuperclass)(struct JNINativeInterface_**,struct _jobject*);
 *     unsigned char (*IsAssignableFrom)(struct JNINativeInterface_**,struct _jobject*,struct _jobject*);
 *     struct _jobject* (*ToReflectedField)(struct JNINativeInterface_**,struct _jobject*,struct _jfieldID*,unsigned char);
 *     long (*Throw)(struct JNINativeInterface_**,struct _jobject*);
 *     long (*ThrowNew)(struct JNINativeInterface_**,struct _jobject*,char*);
 *     struct _jobject* (*ExceptionOccurred)(struct JNINativeInterface_**);
 *     void (*ExceptionDescribe)(struct JNINativeInterface_**);
 *     void (*ExceptionClear)(struct JNINativeInterface_**);
 *     void (*FatalError)(struct JNINativeInterface_**,char*);
 *     long (*PushLocalFrame)(struct JNINativeInterface_**,long);
 *     struct _jobject* (*PopLocalFrame)(struct JNINativeInterface_**,struct _jobject*);
 *     struct _jobject* (*NewGlobalRef)(struct JNINativeInterface_**,struct _jobject*);
 *     void (*DeleteGlobalRef)(struct JNINativeInterface_**,struct _jobject*);
 *     void (*DeleteLocalRef)(struct JNINativeInterface_**,struct _jobject*);
 *     unsigned char (*IsSameObject)(struct JNINativeInterface_**,struct _jobject*,struct _jobject*);
 *     struct _jobject* (*NewLocalRef)(struct JNINativeInterface_**,struct _jobject*);
 *     long (*EnsureLocalCapacity)(struct JNINativeInterface_**,long);
 *     struct _jobject* (*AllocObject)(struct JNINativeInterface_**,struct _jobject*);
 *     struct _jobject* (*NewObject)(struct JNINativeInterface_**,struct _jobject*,struct _jmethodID*);
 *     struct _jobject* (*NewObjectV)(struct JNINativeInterface_**,struct _jobject*,struct _jmethodID*,char*);
 *     struct _jobject* (*NewObjectA)(struct JNINativeInterface_**,struct _jobject*,struct _jmethodID*,union jvalue*);
 *     struct _jobject* (*GetObjectClass)(struct JNINativeInterface_**,struct _jobject*);
 *     unsigned char (*IsInstanceOf)(struct JNINativeInterface_**,struct _jobject*,struct _jobject*);
 *     struct _jmethodID* (*GetMethodID)(struct JNINativeInterface_**,struct _jobject*,char*,char*);
 *     struct _jobject* (*CallObjectMethod)(struct JNINativeInterface_**,struct _jobject*,struct _jmethodID*);
 *     struct _jobject* (*CallObjectMethodV)(struct JNINativeInterface_**,struct _jobject*,struct _jmethodID*,char*);
 *     struct _jobject* (*CallObjectMethodA)(struct JNINativeInterface_**,struct _jobject*,struct _jmethodID*,union jvalue*);
 *     unsigned char (*CallBooleanMethod)(struct JNINativeInterface_**,struct _jobject*,struct _jmethodID*);
 *     unsigned char (*CallBooleanMethodV)(struct JNINativeInterface_**,struct _jobject*,struct _jmethodID*,char*);
 *     unsigned char (*CallBooleanMethodA)(struct JNINativeInterface_**,struct _jobject*,struct _jmethodID*,union jvalue*);
 *     signed char (*CallByteMethod)(struct JNINativeInterface_**,struct _jobject*,struct _jmethodID*);
 *     signed char (*CallByteMethodV)(struct JNINativeInterface_**,struct _jobject*,struct _jmethodID*,char*);
 *     signed char (*CallByteMethodA)(struct JNINativeInterface_**,struct _jobject*,struct _jmethodID*,union jvalue*);
 *     unsigned short (*CallCharMethod)(struct JNINativeInterface_**,struct _jobject*,struct _jmethodID*);
 *     unsigned short (*CallCharMethodV)(struct JNINativeInterface_**,struct _jobject*,struct _jmethodID*,char*);
 *     unsigned short (*CallCharMethodA)(struct JNINativeInterface_**,struct _jobject*,struct _jmethodID*,union jvalue*);
 *     short (*CallShortMethod)(struct JNINativeInterface_**,struct _jobject*,struct _jmethodID*);
 *     short (*CallShortMethodV)(struct JNINativeInterface_**,struct _jobject*,struct _jmethodID*,char*);
 *     short (*CallShortMethodA)(struct JNINativeInterface_**,struct _jobject*,struct _jmethodID*,union jvalue*);
 *     long (*CallIntMethod)(struct JNINativeInterface_**,struct _jobject*,struct _jmethodID*);
 *     long (*CallIntMethodV)(struct JNINativeInterface_**,struct _jobject*,struct _jmethodID*,char*);
 *     long (*CallIntMethodA)(struct JNINativeInterface_**,struct _jobject*,struct _jmethodID*,union jvalue*);
 *     long long (*CallLongMethod)(struct JNINativeInterface_**,struct _jobject*,struct _jmethodID*);
 *     long long (*CallLongMethodV)(struct JNINativeInterface_**,struct _jobject*,struct _jmethodID*,char*);
 *     long long (*CallLongMethodA)(struct JNINativeInterface_**,struct _jobject*,struct _jmethodID*,union jvalue*);
 *     float (*CallFloatMethod)(struct JNINativeInterface_**,struct _jobject*,struct _jmethodID*);
 *     float (*CallFloatMethodV)(struct JNINativeInterface_**,struct _jobject*,struct _jmethodID*,char*);
 *     float (*CallFloatMethodA)(struct JNINativeInterface_**,struct _jobject*,struct _jmethodID*,union jvalue*);
 *     double (*CallDoubleMethod)(struct JNINativeInterface_**,struct _jobject*,struct _jmethodID*);
 *     double (*CallDoubleMethodV)(struct JNINativeInterface_**,struct _jobject*,struct _jmethodID*,char*);
 *     double (*CallDoubleMethodA)(struct JNINativeInterface_**,struct _jobject*,struct _jmethodID*,union jvalue*);
 *     void (*CallVoidMethod)(struct JNINativeInterface_**,struct _jobject*,struct _jmethodID*);
 *     void (*CallVoidMethodV)(struct JNINativeInterface_**,struct _jobject*,struct _jmethodID*,char*);
 *     void (*CallVoidMethodA)(struct JNINativeInterface_**,struct _jobject*,struct _jmethodID*,union jvalue*);
 *     struct _jobject* (*CallNonvirtualObjectMethod)(struct JNINativeInterface_**,struct _jobject*,struct _jobject*,struct _jmethodID*);
 *     struct _jobject* (*CallNonvirtualObjectMethodV)(struct JNINativeInterface_**,struct _jobject*,struct _jobject*,struct _jmethodID*,char*);
 *     struct _jobject* (*CallNonvirtualObjectMethodA)(struct JNINativeInterface_**,struct _jobject*,struct _jobject*,struct _jmethodID*,union jvalue*);
 *     unsigned char (*CallNonvirtualBooleanMethod)(struct JNINativeInterface_**,struct _jobject*,struct _jobject*,struct _jmethodID*);
 *     unsigned char (*CallNonvirtualBooleanMethodV)(struct JNINativeInterface_**,struct _jobject*,struct _jobject*,struct _jmethodID*,char*);
 *     unsigned char (*CallNonvirtualBooleanMethodA)(struct JNINativeInterface_**,struct _jobject*,struct _jobject*,struct _jmethodID*,union jvalue*);
 *     signed char (*CallNonvirtualByteMethod)(struct JNINativeInterface_**,struct _jobject*,struct _jobject*,struct _jmethodID*);
 *     signed char (*CallNonvirtualByteMethodV)(struct JNINativeInterface_**,struct _jobject*,struct _jobject*,struct _jmethodID*,char*);
 *     signed char (*CallNonvirtualByteMethodA)(struct JNINativeInterface_**,struct _jobject*,struct _jobject*,struct _jmethodID*,union jvalue*);
 *     unsigned short (*CallNonvirtualCharMethod)(struct JNINativeInterface_**,struct _jobject*,struct _jobject*,struct _jmethodID*);
 *     unsigned short (*CallNonvirtualCharMethodV)(struct JNINativeInterface_**,struct _jobject*,struct _jobject*,struct _jmethodID*,char*);
 *     unsigned short (*CallNonvirtualCharMethodA)(struct JNINativeInterface_**,struct _jobject*,struct _jobject*,struct _jmethodID*,union jvalue*);
 *     short (*CallNonvirtualShortMethod)(struct JNINativeInterface_**,struct _jobject*,struct _jobject*,struct _jmethodID*);
 *     short (*CallNonvirtualShortMethodV)(struct JNINativeInterface_**,struct _jobject*,struct _jobject*,struct _jmethodID*,char*);
 *     short (*CallNonvirtualShortMethodA)(struct JNINativeInterface_**,struct _jobject*,struct _jobject*,struct _jmethodID*,union jvalue*);
 *     long (*CallNonvirtualIntMethod)(struct JNINativeInterface_**,struct _jobject*,struct _jobject*,struct _jmethodID*);
 *     long (*CallNonvirtualIntMethodV)(struct JNINativeInterface_**,struct _jobject*,struct _jobject*,struct _jmethodID*,char*);
 *     long (*CallNonvirtualIntMethodA)(struct JNINativeInterface_**,struct _jobject*,struct _jobject*,struct _jmethodID*,union jvalue*);
 *     long long (*CallNonvirtualLongMethod)(struct JNINativeInterface_**,struct _jobject*,struct _jobject*,struct _jmethodID*);
 *     long long (*CallNonvirtualLongMethodV)(struct JNINativeInterface_**,struct _jobject*,struct _jobject*,struct _jmethodID*,char*);
 *     long long (*CallNonvirtualLongMethodA)(struct JNINativeInterface_**,struct _jobject*,struct _jobject*,struct _jmethodID*,union jvalue*);
 *     float (*CallNonvirtualFloatMethod)(struct JNINativeInterface_**,struct _jobject*,struct _jobject*,struct _jmethodID*);
 *     float (*CallNonvirtualFloatMethodV)(struct JNINativeInterface_**,struct _jobject*,struct _jobject*,struct _jmethodID*,char*);
 *     float (*CallNonvirtualFloatMethodA)(struct JNINativeInterface_**,struct _jobject*,struct _jobject*,struct _jmethodID*,union jvalue*);
 *     double (*CallNonvirtualDoubleMethod)(struct JNINativeInterface_**,struct _jobject*,struct _jobject*,struct _jmethodID*);
 *     double (*CallNonvirtualDoubleMethodV)(struct JNINativeInterface_**,struct _jobject*,struct _jobject*,struct _jmethodID*,char*);
 *     double (*CallNonvirtualDoubleMethodA)(struct JNINativeInterface_**,struct _jobject*,struct _jobject*,struct _jmethodID*,union jvalue*);
 *     void (*CallNonvirtualVoidMethod)(struct JNINativeInterface_**,struct _jobject*,struct _jobject*,struct _jmethodID*);
 *     void (*CallNonvirtualVoidMethodV)(struct JNINativeInterface_**,struct _jobject*,struct _jobject*,struct _jmethodID*,char*);
 *     void (*CallNonvirtualVoidMethodA)(struct JNINativeInterface_**,struct _jobject*,struct _jobject*,struct _jmethodID*,union jvalue*);
 *     struct _jfieldID* (*GetFieldID)(struct JNINativeInterface_**,struct _jobject*,char*,char*);
 *     struct _jobject* (*GetObjectField)(struct JNINativeInterface_**,struct _jobject*,struct _jfieldID*);
 *     unsigned char (*GetBooleanField)(struct JNINativeInterface_**,struct _jobject*,struct _jfieldID*);
 *     signed char (*GetByteField)(struct JNINativeInterface_**,struct _jobject*,struct _jfieldID*);
 *     unsigned short (*GetCharField)(struct JNINativeInterface_**,struct _jobject*,struct _jfieldID*);
 *     short (*GetShortField)(struct JNINativeInterface_**,struct _jobject*,struct _jfieldID*);
 *     long (*GetIntField)(struct JNINativeInterface_**,struct _jobject*,struct _jfieldID*);
 *     long long (*GetLongField)(struct JNINativeInterface_**,struct _jobject*,struct _jfieldID*);
 *     float (*GetFloatField)(struct JNINativeInterface_**,struct _jobject*,struct _jfieldID*);
 *     double (*GetDoubleField)(struct JNINativeInterface_**,struct _jobject*,struct _jfieldID*);
 *     void (*SetObjectField)(struct JNINativeInterface_**,struct _jobject*,struct _jfieldID*,struct _jobject*);
 *     void (*SetBooleanField)(struct JNINativeInterface_**,struct _jobject*,struct _jfieldID*,unsigned char);
 *     void (*SetByteField)(struct JNINativeInterface_**,struct _jobject*,struct _jfieldID*,signed char);
 *     void (*SetCharField)(struct JNINativeInterface_**,struct _jobject*,struct _jfieldID*,unsigned short);
 *     void (*SetShortField)(struct JNINativeInterface_**,struct _jobject*,struct _jfieldID*,short);
 *     void (*SetIntField)(struct JNINativeInterface_**,struct _jobject*,struct _jfieldID*,long);
 *     void (*SetLongField)(struct JNINativeInterface_**,struct _jobject*,struct _jfieldID*,long long);
 *     void (*SetFloatField)(struct JNINativeInterface_**,struct _jobject*,struct _jfieldID*,float);
 *     void (*SetDoubleField)(struct JNINativeInterface_**,struct _jobject*,struct _jfieldID*,double);
 *     struct _jmethodID* (*GetStaticMethodID)(struct JNINativeInterface_**,struct _jobject*,char*,char*);
 *     struct _jobject* (*CallStaticObjectMethod)(struct JNINativeInterface_**,struct _jobject*,struct _jmethodID*);
 *     struct _jobject* (*CallStaticObjectMethodV)(struct JNINativeInterface_**,struct _jobject*,struct _jmethodID*,char*);
 *     struct _jobject* (*CallStaticObjectMethodA)(struct JNINativeInterface_**,struct _jobject*,struct _jmethodID*,union jvalue*);
 *     unsigned char (*CallStaticBooleanMethod)(struct JNINativeInterface_**,struct _jobject*,struct _jmethodID*);
 *     unsigned char (*CallStaticBooleanMethodV)(struct JNINativeInterface_**,struct _jobject*,struct _jmethodID*,char*);
 *     unsigned char (*CallStaticBooleanMethodA)(struct JNINativeInterface_**,struct _jobject*,struct _jmethodID*,union jvalue*);
 *     signed char (*CallStaticByteMethod)(struct JNINativeInterface_**,struct _jobject*,struct _jmethodID*);
 *     signed char (*CallStaticByteMethodV)(struct JNINativeInterface_**,struct _jobject*,struct _jmethodID*,char*);
 *     signed char (*CallStaticByteMethodA)(struct JNINativeInterface_**,struct _jobject*,struct _jmethodID*,union jvalue*);
 *     unsigned short (*CallStaticCharMethod)(struct JNINativeInterface_**,struct _jobject*,struct _jmethodID*);
 *     unsigned short (*CallStaticCharMethodV)(struct JNINativeInterface_**,struct _jobject*,struct _jmethodID*,char*);
 *     unsigned short (*CallStaticCharMethodA)(struct JNINativeInterface_**,struct _jobject*,struct _jmethodID*,union jvalue*);
 *     short (*CallStaticShortMethod)(struct JNINativeInterface_**,struct _jobject*,struct _jmethodID*);
 *     short (*CallStaticShortMethodV)(struct JNINativeInterface_**,struct _jobject*,struct _jmethodID*,char*);
 *     short (*CallStaticShortMethodA)(struct JNINativeInterface_**,struct _jobject*,struct _jmethodID*,union jvalue*);
 *     long (*CallStaticIntMethod)(struct JNINativeInterface_**,struct _jobject*,struct _jmethodID*);
 *     long (*CallStaticIntMethodV)(struct JNINativeInterface_**,struct _jobject*,struct _jmethodID*,char*);
 *     long (*CallStaticIntMethodA)(struct JNINativeInterface_**,struct _jobject*,struct _jmethodID*,union jvalue*);
 *     long long (*CallStaticLongMethod)(struct JNINativeInterface_**,struct _jobject*,struct _jmethodID*);
 *     long long (*CallStaticLongMethodV)(struct JNINativeInterface_**,struct _jobject*,struct _jmethodID*,char*);
 *     long long (*CallStaticLongMethodA)(struct JNINativeInterface_**,struct _jobject*,struct _jmethodID*,union jvalue*);
 *     float (*CallStaticFloatMethod)(struct JNINativeInterface_**,struct _jobject*,struct _jmethodID*);
 *     float (*CallStaticFloatMethodV)(struct JNINativeInterface_**,struct _jobject*,struct _jmethodID*,char*);
 *     float (*CallStaticFloatMethodA)(struct JNINativeInterface_**,struct _jobject*,struct _jmethodID*,union jvalue*);
 *     double (*CallStaticDoubleMethod)(struct JNINativeInterface_**,struct _jobject*,struct _jmethodID*);
 *     double (*CallStaticDoubleMethodV)(struct JNINativeInterface_**,struct _jobject*,struct _jmethodID*,char*);
 *     double (*CallStaticDoubleMethodA)(struct JNINativeInterface_**,struct _jobject*,struct _jmethodID*,union jvalue*);
 *     void (*CallStaticVoidMethod)(struct JNINativeInterface_**,struct _jobject*,struct _jmethodID*);
 *     void (*CallStaticVoidMethodV)(struct JNINativeInterface_**,struct _jobject*,struct _jmethodID*,char*);
 *     void (*CallStaticVoidMethodA)(struct JNINativeInterface_**,struct _jobject*,struct _jmethodID*,union jvalue*);
 *     struct _jfieldID* (*GetStaticFieldID)(struct JNINativeInterface_**,struct _jobject*,char*,char*);
 *     struct _jobject* (*GetStaticObjectField)(struct JNINativeInterface_**,struct _jobject*,struct _jfieldID*);
 *     unsigned char (*GetStaticBooleanField)(struct JNINativeInterface_**,struct _jobject*,struct _jfieldID*);
 *     signed char (*GetStaticByteField)(struct JNINativeInterface_**,struct _jobject*,struct _jfieldID*);
 *     unsigned short (*GetStaticCharField)(struct JNINativeInterface_**,struct _jobject*,struct _jfieldID*);
 *     short (*GetStaticShortField)(struct JNINativeInterface_**,struct _jobject*,struct _jfieldID*);
 *     long (*GetStaticIntField)(struct JNINativeInterface_**,struct _jobject*,struct _jfieldID*);
 *     long long (*GetStaticLongField)(struct JNINativeInterface_**,struct _jobject*,struct _jfieldID*);
 *     float (*GetStaticFloatField)(struct JNINativeInterface_**,struct _jobject*,struct _jfieldID*);
 *     double (*GetStaticDoubleField)(struct JNINativeInterface_**,struct _jobject*,struct _jfieldID*);
 *     void (*SetStaticObjectField)(struct JNINativeInterface_**,struct _jobject*,struct _jfieldID*,struct _jobject*);
 *     void (*SetStaticBooleanField)(struct JNINativeInterface_**,struct _jobject*,struct _jfieldID*,unsigned char);
 *     void (*SetStaticByteField)(struct JNINativeInterface_**,struct _jobject*,struct _jfieldID*,signed char);
 *     void (*SetStaticCharField)(struct JNINativeInterface_**,struct _jobject*,struct _jfieldID*,unsigned short);
 *     void (*SetStaticShortField)(struct JNINativeInterface_**,struct _jobject*,struct _jfieldID*,short);
 *     void (*SetStaticIntField)(struct JNINativeInterface_**,struct _jobject*,struct _jfieldID*,long);
 *     void (*SetStaticLongField)(struct JNINativeInterface_**,struct _jobject*,struct _jfieldID*,long long);
 *     void (*SetStaticFloatField)(struct JNINativeInterface_**,struct _jobject*,struct _jfieldID*,float);
 *     void (*SetStaticDoubleField)(struct JNINativeInterface_**,struct _jobject*,struct _jfieldID*,double);
 *     struct _jobject* (*NewString)(struct JNINativeInterface_**,unsigned short*,long);
 *     long (*GetStringLength)(struct JNINativeInterface_**,struct _jobject*);
 *     unsigned short* (*GetStringChars)(struct JNINativeInterface_**,struct _jobject*,unsigned char*);
 *     void (*ReleaseStringChars)(struct JNINativeInterface_**,struct _jobject*,unsigned short*);
 *     struct _jobject* (*NewStringUTF)(struct JNINativeInterface_**,char*);
 *     long (*GetStringUTFLength)(struct JNINativeInterface_**,struct _jobject*);
 *     char* (*GetStringUTFChars)(struct JNINativeInterface_**,struct _jobject*,unsigned char*);
 *     void (*ReleaseStringUTFChars)(struct JNINativeInterface_**,struct _jobject*,char*);
 *     long (*GetArrayLength)(struct JNINativeInterface_**,struct _jobject*);
 *     struct _jobject* (*NewObjectArray)(struct JNINativeInterface_**,long,struct _jobject*,struct _jobject*);
 *     struct _jobject* (*GetObjectArrayElement)(struct JNINativeInterface_**,struct _jobject*,long);
 *     void (*SetObjectArrayElement)(struct JNINativeInterface_**,struct _jobject*,long,struct _jobject*);
 *     struct _jobject* (*NewBooleanArray)(struct JNINativeInterface_**,long);
 *     struct _jobject* (*NewByteArray)(struct JNINativeInterface_**,long);
 *     struct _jobject* (*NewCharArray)(struct JNINativeInterface_**,long);
 *     struct _jobject* (*NewShortArray)(struct JNINativeInterface_**,long);
 *     struct _jobject* (*NewIntArray)(struct JNINativeInterface_**,long);
 *     struct _jobject* (*NewLongArray)(struct JNINativeInterface_**,long);
 *     struct _jobject* (*NewFloatArray)(struct JNINativeInterface_**,long);
 *     struct _jobject* (*NewDoubleArray)(struct JNINativeInterface_**,long);
 *     unsigned char* (*GetBooleanArrayElements)(struct JNINativeInterface_**,struct _jobject*,unsigned char*);
 *     signed char* (*GetByteArrayElements)(struct JNINativeInterface_**,struct _jobject*,unsigned char*);
 *     unsigned short* (*GetCharArrayElements)(struct JNINativeInterface_**,struct _jobject*,unsigned char*);
 *     short* (*GetShortArrayElements)(struct JNINativeInterface_**,struct _jobject*,unsigned char*);
 *     long* (*GetIntArrayElements)(struct JNINativeInterface_**,struct _jobject*,unsigned char*);
 *     long long* (*GetLongArrayElements)(struct JNINativeInterface_**,struct _jobject*,unsigned char*);
 *     float* (*GetFloatArrayElements)(struct JNINativeInterface_**,struct _jobject*,unsigned char*);
 *     double* (*GetDoubleArrayElements)(struct JNINativeInterface_**,struct _jobject*,unsigned char*);
 *     void (*ReleaseBooleanArrayElements)(struct JNINativeInterface_**,struct _jobject*,unsigned char*,long);
 *     void (*ReleaseByteArrayElements)(struct JNINativeInterface_**,struct _jobject*,signed char*,long);
 *     void (*ReleaseCharArrayElements)(struct JNINativeInterface_**,struct _jobject*,unsigned short*,long);
 *     void (*ReleaseShortArrayElements)(struct JNINativeInterface_**,struct _jobject*,short*,long);
 *     void (*ReleaseIntArrayElements)(struct JNINativeInterface_**,struct _jobject*,long*,long);
 *     void (*ReleaseLongArrayElements)(struct JNINativeInterface_**,struct _jobject*,long long*,long);
 *     void (*ReleaseFloatArrayElements)(struct JNINativeInterface_**,struct _jobject*,float*,long);
 *     void (*ReleaseDoubleArrayElements)(struct JNINativeInterface_**,struct _jobject*,double*,long);
 *     void (*GetBooleanArrayRegion)(struct JNINativeInterface_**,struct _jobject*,long,long,unsigned char*);
 *     void (*GetByteArrayRegion)(struct JNINativeInterface_**,struct _jobject*,long,long,signed char*);
 *     void (*GetCharArrayRegion)(struct JNINativeInterface_**,struct _jobject*,long,long,unsigned short*);
 *     void (*GetShortArrayRegion)(struct JNINativeInterface_**,struct _jobject*,long,long,short*);
 *     void (*GetIntArrayRegion)(struct JNINativeInterface_**,struct _jobject*,long,long,long*);
 *     void (*GetLongArrayRegion)(struct JNINativeInterface_**,struct _jobject*,long,long,long long*);
 *     void (*GetFloatArrayRegion)(struct JNINativeInterface_**,struct _jobject*,long,long,float*);
 *     void (*GetDoubleArrayRegion)(struct JNINativeInterface_**,struct _jobject*,long,long,double*);
 *     void (*SetBooleanArrayRegion)(struct JNINativeInterface_**,struct _jobject*,long,long,unsigned char*);
 *     void (*SetByteArrayRegion)(struct JNINativeInterface_**,struct _jobject*,long,long,signed char*);
 *     void (*SetCharArrayRegion)(struct JNINativeInterface_**,struct _jobject*,long,long,unsigned short*);
 *     void (*SetShortArrayRegion)(struct JNINativeInterface_**,struct _jobject*,long,long,short*);
 *     void (*SetIntArrayRegion)(struct JNINativeInterface_**,struct _jobject*,long,long,long*);
 *     void (*SetLongArrayRegion)(struct JNINativeInterface_**,struct _jobject*,long,long,long long*);
 *     void (*SetFloatArrayRegion)(struct JNINativeInterface_**,struct _jobject*,long,long,float*);
 *     void (*SetDoubleArrayRegion)(struct JNINativeInterface_**,struct _jobject*,long,long,double*);
 *     long (*RegisterNatives)(struct JNINativeInterface_**,struct _jobject*,struct JNINativeMethod*,long);
 *     long (*UnregisterNatives)(struct JNINativeInterface_**,struct _jobject*);
 *     long (*MonitorEnter)(struct JNINativeInterface_**,struct _jobject*);
 *     long (*MonitorExit)(struct JNINativeInterface_**,struct _jobject*);
 *     long (*GetJavaVM)(struct JNINativeInterface_**,struct JNIInvokeInterface_***);
 *     void (*GetStringRegion)(struct JNINativeInterface_**,struct _jobject*,long,long,unsigned short*);
 *     void (*GetStringUTFRegion)(struct JNINativeInterface_**,struct _jobject*,long,long,char*);
 *     void* (*GetPrimitiveArrayCritical)(struct JNINativeInterface_**,struct _jobject*,unsigned char*);
 *     void (*ReleasePrimitiveArrayCritical)(struct JNINativeInterface_**,struct _jobject*,void*,long);
 *     unsigned short* (*GetStringCritical)(struct JNINativeInterface_**,struct _jobject*,unsigned char*);
 *     void (*ReleaseStringCritical)(struct JNINativeInterface_**,struct _jobject*,unsigned short*);
 *     struct _jobject* (*NewWeakGlobalRef)(struct JNINativeInterface_**,struct _jobject*);
 *     void (*DeleteWeakGlobalRef)(struct JNINativeInterface_**,struct _jobject*);
 *     unsigned char (*ExceptionCheck)(struct JNINativeInterface_**);
 *     struct _jobject* (*NewDirectByteBuffer)(struct JNINativeInterface_**,void*,long long);
 *     void* (*GetDirectBufferAddress)(struct JNINativeInterface_**,struct _jobject*);
 *     long long (*GetDirectBufferCapacity)(struct JNINativeInterface_**,struct _jobject*);
 *     enum _jobjectType (*GetObjectRefType)(struct JNINativeInterface_**,struct _jobject*);
 *     struct _jobject* (*GetModule)(struct JNINativeInterface_**,struct _jobject*);
 *     unsigned char (*IsVirtualThread)(struct JNINativeInterface_**,struct _jobject*);
 * };
 * }
 */
public class JNINativeInterface_ {

    public static MemoryLayout $LAYOUT() {
        return constants$2.const$2;
    }
    public static VarHandle reserved0$VH() {
        return constants$2.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void* reserved0;
     * }
     */
    public static MemorySegment reserved0$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void* reserved0;
     * }
     */
    public static void reserved0$set(MemorySegment seg, MemorySegment x) {
        constants$2.const$3.set(seg, x);
    }
    public static MemorySegment reserved0$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void reserved0$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle reserved1$VH() {
        return constants$2.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void* reserved1;
     * }
     */
    public static MemorySegment reserved1$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void* reserved1;
     * }
     */
    public static void reserved1$set(MemorySegment seg, MemorySegment x) {
        constants$2.const$4.set(seg, x);
    }
    public static MemorySegment reserved1$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void reserved1$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle reserved2$VH() {
        return constants$2.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void* reserved2;
     * }
     */
    public static MemorySegment reserved2$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void* reserved2;
     * }
     */
    public static void reserved2$set(MemorySegment seg, MemorySegment x) {
        constants$2.const$5.set(seg, x);
    }
    public static MemorySegment reserved2$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void reserved2$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle reserved3$VH() {
        return constants$3.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void* reserved3;
     * }
     */
    public static MemorySegment reserved3$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void* reserved3;
     * }
     */
    public static void reserved3$set(MemorySegment seg, MemorySegment x) {
        constants$3.const$0.set(seg, x);
    }
    public static MemorySegment reserved3$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void reserved3$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    /**
     * {@snippet :
 * long (*GetVersion)(struct JNINativeInterface_**);
     * }
     */
    public interface GetVersion {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(GetVersion fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(constants$3.const$2, fi, constants$3.const$1, scope);
        }
        static GetVersion ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)constants$3.const$3.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle GetVersion$VH() {
        return constants$3.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * long (*GetVersion)(struct JNINativeInterface_**);
     * }
     */
    public static MemorySegment GetVersion$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * long (*GetVersion)(struct JNINativeInterface_**);
     * }
     */
    public static void GetVersion$set(MemorySegment seg, MemorySegment x) {
        constants$3.const$4.set(seg, x);
    }
    public static MemorySegment GetVersion$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void GetVersion$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetVersion GetVersion(MemorySegment segment, SegmentScope scope) {
        return GetVersion.ofAddress(GetVersion$get(segment), scope);
    }
    /**
     * {@snippet :
 * struct _jobject* (*DefineClass)(struct JNINativeInterface_**,char*,struct _jobject*,signed char*,long);
     * }
     */
    public interface DefineClass {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3, int _x4);
        static MemorySegment allocate(DefineClass fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(constants$4.const$0, fi, constants$3.const$5, scope);
        }
        static DefineClass ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3, int __x4) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$4.const$1.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle DefineClass$VH() {
        return constants$4.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * struct _jobject* (*DefineClass)(struct JNINativeInterface_**,char*,struct _jobject*,signed char*,long);
     * }
     */
    public static MemorySegment DefineClass$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$4.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * struct _jobject* (*DefineClass)(struct JNINativeInterface_**,char*,struct _jobject*,signed char*,long);
     * }
     */
    public static void DefineClass$set(MemorySegment seg, MemorySegment x) {
        constants$4.const$2.set(seg, x);
    }
    public static MemorySegment DefineClass$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$4.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void DefineClass$set(MemorySegment seg, long index, MemorySegment x) {
        constants$4.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static DefineClass DefineClass(MemorySegment segment, SegmentScope scope) {
        return DefineClass.ofAddress(DefineClass$get(segment), scope);
    }
    /**
     * {@snippet :
 * struct _jobject* (*FindClass)(struct JNINativeInterface_**,char*);
     * }
     */
    public interface FindClass {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(FindClass fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(constants$4.const$4, fi, constants$4.const$3, scope);
        }
        static FindClass ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$4.const$5.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle FindClass$VH() {
        return constants$5.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * struct _jobject* (*FindClass)(struct JNINativeInterface_**,char*);
     * }
     */
    public static MemorySegment FindClass$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$5.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * struct _jobject* (*FindClass)(struct JNINativeInterface_**,char*);
     * }
     */
    public static void FindClass$set(MemorySegment seg, MemorySegment x) {
        constants$5.const$0.set(seg, x);
    }
    public static MemorySegment FindClass$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$5.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void FindClass$set(MemorySegment seg, long index, MemorySegment x) {
        constants$5.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static FindClass FindClass(MemorySegment segment, SegmentScope scope) {
        return FindClass.ofAddress(FindClass$get(segment), scope);
    }
    /**
     * {@snippet :
 * struct _jmethodID* (*FromReflectedMethod)(struct JNINativeInterface_**,struct _jobject*);
     * }
     */
    public interface FromReflectedMethod {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(FromReflectedMethod fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(constants$5.const$1, fi, constants$4.const$3, scope);
        }
        static FromReflectedMethod ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$4.const$5.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle FromReflectedMethod$VH() {
        return constants$5.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * struct _jmethodID* (*FromReflectedMethod)(struct JNINativeInterface_**,struct _jobject*);
     * }
     */
    public static MemorySegment FromReflectedMethod$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$5.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * struct _jmethodID* (*FromReflectedMethod)(struct JNINativeInterface_**,struct _jobject*);
     * }
     */
    public static void FromReflectedMethod$set(MemorySegment seg, MemorySegment x) {
        constants$5.const$2.set(seg, x);
    }
    public static MemorySegment FromReflectedMethod$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$5.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void FromReflectedMethod$set(MemorySegment seg, long index, MemorySegment x) {
        constants$5.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static FromReflectedMethod FromReflectedMethod(MemorySegment segment, SegmentScope scope) {
        return FromReflectedMethod.ofAddress(FromReflectedMethod$get(segment), scope);
    }
    /**
     * {@snippet :
 * struct _jfieldID* (*FromReflectedField)(struct JNINativeInterface_**,struct _jobject*);
     * }
     */
    public interface FromReflectedField {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(FromReflectedField fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(constants$5.const$3, fi, constants$4.const$3, scope);
        }
        static FromReflectedField ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$4.const$5.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle FromReflectedField$VH() {
        return constants$5.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * struct _jfieldID* (*FromReflectedField)(struct JNINativeInterface_**,struct _jobject*);
     * }
     */
    public static MemorySegment FromReflectedField$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$5.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * struct _jfieldID* (*FromReflectedField)(struct JNINativeInterface_**,struct _jobject*);
     * }
     */
    public static void FromReflectedField$set(MemorySegment seg, MemorySegment x) {
        constants$5.const$4.set(seg, x);
    }
    public static MemorySegment FromReflectedField$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$5.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void FromReflectedField$set(MemorySegment seg, long index, MemorySegment x) {
        constants$5.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static FromReflectedField FromReflectedField(MemorySegment segment, SegmentScope scope) {
        return FromReflectedField.ofAddress(FromReflectedField$get(segment), scope);
    }
    /**
     * {@snippet :
 * struct _jobject* (*ToReflectedMethod)(struct JNINativeInterface_**,struct _jobject*,struct _jmethodID*,unsigned char);
     * }
     */
    public interface ToReflectedMethod {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, byte _x3);
        static MemorySegment allocate(ToReflectedMethod fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(constants$6.const$0, fi, constants$5.const$5, scope);
        }
        static ToReflectedMethod ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, byte __x3) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$6.const$1.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle ToReflectedMethod$VH() {
        return constants$6.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * struct _jobject* (*ToReflectedMethod)(struct JNINativeInterface_**,struct _jobject*,struct _jmethodID*,unsigned char);
     * }
     */
    public static MemorySegment ToReflectedMethod$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$6.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * struct _jobject* (*ToReflectedMethod)(struct JNINativeInterface_**,struct _jobject*,struct _jmethodID*,unsigned char);
     * }
     */
    public static void ToReflectedMethod$set(MemorySegment seg, MemorySegment x) {
        constants$6.const$2.set(seg, x);
    }
    public static MemorySegment ToReflectedMethod$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$6.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void ToReflectedMethod$set(MemorySegment seg, long index, MemorySegment x) {
        constants$6.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static ToReflectedMethod ToReflectedMethod(MemorySegment segment, SegmentScope scope) {
        return ToReflectedMethod.ofAddress(ToReflectedMethod$get(segment), scope);
    }
    /**
     * {@snippet :
 * struct _jobject* (*GetSuperclass)(struct JNINativeInterface_**,struct _jobject*);
     * }
     */
    public interface GetSuperclass {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(GetSuperclass fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(constants$6.const$3, fi, constants$4.const$3, scope);
        }
        static GetSuperclass ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$4.const$5.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle GetSuperclass$VH() {
        return constants$6.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * struct _jobject* (*GetSuperclass)(struct JNINativeInterface_**,struct _jobject*);
     * }
     */
    public static MemorySegment GetSuperclass$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$6.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * struct _jobject* (*GetSuperclass)(struct JNINativeInterface_**,struct _jobject*);
     * }
     */
    public static void GetSuperclass$set(MemorySegment seg, MemorySegment x) {
        constants$6.const$4.set(seg, x);
    }
    public static MemorySegment GetSuperclass$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$6.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void GetSuperclass$set(MemorySegment seg, long index, MemorySegment x) {
        constants$6.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetSuperclass GetSuperclass(MemorySegment segment, SegmentScope scope) {
        return GetSuperclass.ofAddress(GetSuperclass$get(segment), scope);
    }
    /**
     * {@snippet :
 * unsigned char (*IsAssignableFrom)(struct JNINativeInterface_**,struct _jobject*,struct _jobject*);
     * }
     */
    public interface IsAssignableFrom {

        byte apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(IsAssignableFrom fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(constants$7.const$0, fi, constants$6.const$5, scope);
        }
        static IsAssignableFrom ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (byte)constants$7.const$1.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle IsAssignableFrom$VH() {
        return constants$7.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned char (*IsAssignableFrom)(struct JNINativeInterface_**,struct _jobject*,struct _jobject*);
     * }
     */
    public static MemorySegment IsAssignableFrom$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$7.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned char (*IsAssignableFrom)(struct JNINativeInterface_**,struct _jobject*,struct _jobject*);
     * }
     */
    public static void IsAssignableFrom$set(MemorySegment seg, MemorySegment x) {
        constants$7.const$2.set(seg, x);
    }
    public static MemorySegment IsAssignableFrom$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$7.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void IsAssignableFrom$set(MemorySegment seg, long index, MemorySegment x) {
        constants$7.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static IsAssignableFrom IsAssignableFrom(MemorySegment segment, SegmentScope scope) {
        return IsAssignableFrom.ofAddress(IsAssignableFrom$get(segment), scope);
    }
    /**
     * {@snippet :
 * struct _jobject* (*ToReflectedField)(struct JNINativeInterface_**,struct _jobject*,struct _jfieldID*,unsigned char);
     * }
     */
    public interface ToReflectedField {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, byte _x3);
        static MemorySegment allocate(ToReflectedField fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(constants$7.const$3, fi, constants$5.const$5, scope);
        }
        static ToReflectedField ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, byte __x3) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$6.const$1.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle ToReflectedField$VH() {
        return constants$7.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * struct _jobject* (*ToReflectedField)(struct JNINativeInterface_**,struct _jobject*,struct _jfieldID*,unsigned char);
     * }
     */
    public static MemorySegment ToReflectedField$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$7.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * struct _jobject* (*ToReflectedField)(struct JNINativeInterface_**,struct _jobject*,struct _jfieldID*,unsigned char);
     * }
     */
    public static void ToReflectedField$set(MemorySegment seg, MemorySegment x) {
        constants$7.const$4.set(seg, x);
    }
    public static MemorySegment ToReflectedField$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$7.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void ToReflectedField$set(MemorySegment seg, long index, MemorySegment x) {
        constants$7.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static ToReflectedField ToReflectedField(MemorySegment segment, SegmentScope scope) {
        return ToReflectedField.ofAddress(ToReflectedField$get(segment), scope);
    }
    /**
     * {@snippet :
 * long (*Throw)(struct JNINativeInterface_**,struct _jobject*);
     * }
     */
    public interface Throw {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(Throw fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(constants$8.const$0, fi, constants$7.const$5, scope);
        }
        static Throw ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$8.const$1.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle Throw$VH() {
        return constants$8.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * long (*Throw)(struct JNINativeInterface_**,struct _jobject*);
     * }
     */
    public static MemorySegment Throw$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$8.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * long (*Throw)(struct JNINativeInterface_**,struct _jobject*);
     * }
     */
    public static void Throw$set(MemorySegment seg, MemorySegment x) {
        constants$8.const$2.set(seg, x);
    }
    public static MemorySegment Throw$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$8.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void Throw$set(MemorySegment seg, long index, MemorySegment x) {
        constants$8.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static Throw Throw(MemorySegment segment, SegmentScope scope) {
        return Throw.ofAddress(Throw$get(segment), scope);
    }
    /**
     * {@snippet :
 * long (*ThrowNew)(struct JNINativeInterface_**,struct _jobject*,char*);
     * }
     */
    public interface ThrowNew {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(ThrowNew fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(constants$8.const$4, fi, constants$8.const$3, scope);
        }
        static ThrowNew ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)constants$8.const$5.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle ThrowNew$VH() {
        return constants$9.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * long (*ThrowNew)(struct JNINativeInterface_**,struct _jobject*,char*);
     * }
     */
    public static MemorySegment ThrowNew$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$9.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * long (*ThrowNew)(struct JNINativeInterface_**,struct _jobject*,char*);
     * }
     */
    public static void ThrowNew$set(MemorySegment seg, MemorySegment x) {
        constants$9.const$0.set(seg, x);
    }
    public static MemorySegment ThrowNew$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$9.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void ThrowNew$set(MemorySegment seg, long index, MemorySegment x) {
        constants$9.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static ThrowNew ThrowNew(MemorySegment segment, SegmentScope scope) {
        return ThrowNew.ofAddress(ThrowNew$get(segment), scope);
    }
    /**
     * {@snippet :
 * struct _jobject* (*ExceptionOccurred)(struct JNINativeInterface_**);
     * }
     */
    public interface ExceptionOccurred {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(ExceptionOccurred fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(constants$9.const$2, fi, constants$9.const$1, scope);
        }
        static ExceptionOccurred ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$9.const$3.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle ExceptionOccurred$VH() {
        return constants$9.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * struct _jobject* (*ExceptionOccurred)(struct JNINativeInterface_**);
     * }
     */
    public static MemorySegment ExceptionOccurred$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$9.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * struct _jobject* (*ExceptionOccurred)(struct JNINativeInterface_**);
     * }
     */
    public static void ExceptionOccurred$set(MemorySegment seg, MemorySegment x) {
        constants$9.const$4.set(seg, x);
    }
    public static MemorySegment ExceptionOccurred$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$9.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void ExceptionOccurred$set(MemorySegment seg, long index, MemorySegment x) {
        constants$9.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static ExceptionOccurred ExceptionOccurred(MemorySegment segment, SegmentScope scope) {
        return ExceptionOccurred.ofAddress(ExceptionOccurred$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*ExceptionDescribe)(struct JNINativeInterface_**);
     * }
     */
    public interface ExceptionDescribe {

        void apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(ExceptionDescribe fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(constants$10.const$0, fi, constants$9.const$5, scope);
        }
        static ExceptionDescribe ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    constants$10.const$1.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle ExceptionDescribe$VH() {
        return constants$10.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*ExceptionDescribe)(struct JNINativeInterface_**);
     * }
     */
    public static MemorySegment ExceptionDescribe$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$10.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*ExceptionDescribe)(struct JNINativeInterface_**);
     * }
     */
    public static void ExceptionDescribe$set(MemorySegment seg, MemorySegment x) {
        constants$10.const$2.set(seg, x);
    }
    public static MemorySegment ExceptionDescribe$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$10.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void ExceptionDescribe$set(MemorySegment seg, long index, MemorySegment x) {
        constants$10.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static ExceptionDescribe ExceptionDescribe(MemorySegment segment, SegmentScope scope) {
        return ExceptionDescribe.ofAddress(ExceptionDescribe$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*ExceptionClear)(struct JNINativeInterface_**);
     * }
     */
    public interface ExceptionClear {

        void apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(ExceptionClear fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(constants$10.const$3, fi, constants$9.const$5, scope);
        }
        static ExceptionClear ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    constants$10.const$1.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle ExceptionClear$VH() {
        return constants$10.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*ExceptionClear)(struct JNINativeInterface_**);
     * }
     */
    public static MemorySegment ExceptionClear$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$10.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*ExceptionClear)(struct JNINativeInterface_**);
     * }
     */
    public static void ExceptionClear$set(MemorySegment seg, MemorySegment x) {
        constants$10.const$4.set(seg, x);
    }
    public static MemorySegment ExceptionClear$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$10.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void ExceptionClear$set(MemorySegment seg, long index, MemorySegment x) {
        constants$10.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static ExceptionClear ExceptionClear(MemorySegment segment, SegmentScope scope) {
        return ExceptionClear.ofAddress(ExceptionClear$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*FatalError)(struct JNINativeInterface_**,char*);
     * }
     */
    public interface FatalError {

        void apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(FatalError fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(constants$11.const$0, fi, constants$10.const$5, scope);
        }
        static FatalError ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    constants$11.const$1.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle FatalError$VH() {
        return constants$11.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*FatalError)(struct JNINativeInterface_**,char*);
     * }
     */
    public static MemorySegment FatalError$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$11.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*FatalError)(struct JNINativeInterface_**,char*);
     * }
     */
    public static void FatalError$set(MemorySegment seg, MemorySegment x) {
        constants$11.const$2.set(seg, x);
    }
    public static MemorySegment FatalError$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$11.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void FatalError$set(MemorySegment seg, long index, MemorySegment x) {
        constants$11.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static FatalError FatalError(MemorySegment segment, SegmentScope scope) {
        return FatalError.ofAddress(FatalError$get(segment), scope);
    }
    /**
     * {@snippet :
 * long (*PushLocalFrame)(struct JNINativeInterface_**,long);
     * }
     */
    public interface PushLocalFrame {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1);
        static MemorySegment allocate(PushLocalFrame fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(constants$11.const$4, fi, constants$11.const$3, scope);
        }
        static PushLocalFrame ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, int __x1) -> {
                try {
                    return (int)constants$11.const$5.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle PushLocalFrame$VH() {
        return constants$12.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * long (*PushLocalFrame)(struct JNINativeInterface_**,long);
     * }
     */
    public static MemorySegment PushLocalFrame$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$12.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * long (*PushLocalFrame)(struct JNINativeInterface_**,long);
     * }
     */
    public static void PushLocalFrame$set(MemorySegment seg, MemorySegment x) {
        constants$12.const$0.set(seg, x);
    }
    public static MemorySegment PushLocalFrame$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$12.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void PushLocalFrame$set(MemorySegment seg, long index, MemorySegment x) {
        constants$12.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static PushLocalFrame PushLocalFrame(MemorySegment segment, SegmentScope scope) {
        return PushLocalFrame.ofAddress(PushLocalFrame$get(segment), scope);
    }
    /**
     * {@snippet :
 * struct _jobject* (*PopLocalFrame)(struct JNINativeInterface_**,struct _jobject*);
     * }
     */
    public interface PopLocalFrame {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(PopLocalFrame fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(constants$12.const$1, fi, constants$4.const$3, scope);
        }
        static PopLocalFrame ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$4.const$5.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle PopLocalFrame$VH() {
        return constants$12.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * struct _jobject* (*PopLocalFrame)(struct JNINativeInterface_**,struct _jobject*);
     * }
     */
    public static MemorySegment PopLocalFrame$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$12.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * struct _jobject* (*PopLocalFrame)(struct JNINativeInterface_**,struct _jobject*);
     * }
     */
    public static void PopLocalFrame$set(MemorySegment seg, MemorySegment x) {
        constants$12.const$2.set(seg, x);
    }
    public static MemorySegment PopLocalFrame$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$12.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void PopLocalFrame$set(MemorySegment seg, long index, MemorySegment x) {
        constants$12.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static PopLocalFrame PopLocalFrame(MemorySegment segment, SegmentScope scope) {
        return PopLocalFrame.ofAddress(PopLocalFrame$get(segment), scope);
    }
    /**
     * {@snippet :
 * struct _jobject* (*NewGlobalRef)(struct JNINativeInterface_**,struct _jobject*);
     * }
     */
    public interface NewGlobalRef {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(NewGlobalRef fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(constants$12.const$3, fi, constants$4.const$3, scope);
        }
        static NewGlobalRef ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$4.const$5.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle NewGlobalRef$VH() {
        return constants$12.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * struct _jobject* (*NewGlobalRef)(struct JNINativeInterface_**,struct _jobject*);
     * }
     */
    public static MemorySegment NewGlobalRef$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$12.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * struct _jobject* (*NewGlobalRef)(struct JNINativeInterface_**,struct _jobject*);
     * }
     */
    public static void NewGlobalRef$set(MemorySegment seg, MemorySegment x) {
        constants$12.const$4.set(seg, x);
    }
    public static MemorySegment NewGlobalRef$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$12.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void NewGlobalRef$set(MemorySegment seg, long index, MemorySegment x) {
        constants$12.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static NewGlobalRef NewGlobalRef(MemorySegment segment, SegmentScope scope) {
        return NewGlobalRef.ofAddress(NewGlobalRef$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*DeleteGlobalRef)(struct JNINativeInterface_**,struct _jobject*);
     * }
     */
    public interface DeleteGlobalRef {

        void apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(DeleteGlobalRef fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(constants$12.const$5, fi, constants$10.const$5, scope);
        }
        static DeleteGlobalRef ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    constants$11.const$1.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle DeleteGlobalRef$VH() {
        return constants$13.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*DeleteGlobalRef)(struct JNINativeInterface_**,struct _jobject*);
     * }
     */
    public static MemorySegment DeleteGlobalRef$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$13.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*DeleteGlobalRef)(struct JNINativeInterface_**,struct _jobject*);
     * }
     */
    public static void DeleteGlobalRef$set(MemorySegment seg, MemorySegment x) {
        constants$13.const$0.set(seg, x);
    }
    public static MemorySegment DeleteGlobalRef$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$13.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void DeleteGlobalRef$set(MemorySegment seg, long index, MemorySegment x) {
        constants$13.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static DeleteGlobalRef DeleteGlobalRef(MemorySegment segment, SegmentScope scope) {
        return DeleteGlobalRef.ofAddress(DeleteGlobalRef$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*DeleteLocalRef)(struct JNINativeInterface_**,struct _jobject*);
     * }
     */
    public interface DeleteLocalRef {

        void apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(DeleteLocalRef fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(constants$13.const$1, fi, constants$10.const$5, scope);
        }
        static DeleteLocalRef ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    constants$11.const$1.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle DeleteLocalRef$VH() {
        return constants$13.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*DeleteLocalRef)(struct JNINativeInterface_**,struct _jobject*);
     * }
     */
    public static MemorySegment DeleteLocalRef$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$13.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*DeleteLocalRef)(struct JNINativeInterface_**,struct _jobject*);
     * }
     */
    public static void DeleteLocalRef$set(MemorySegment seg, MemorySegment x) {
        constants$13.const$2.set(seg, x);
    }
    public static MemorySegment DeleteLocalRef$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$13.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void DeleteLocalRef$set(MemorySegment seg, long index, MemorySegment x) {
        constants$13.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static DeleteLocalRef DeleteLocalRef(MemorySegment segment, SegmentScope scope) {
        return DeleteLocalRef.ofAddress(DeleteLocalRef$get(segment), scope);
    }
    /**
     * {@snippet :
 * unsigned char (*IsSameObject)(struct JNINativeInterface_**,struct _jobject*,struct _jobject*);
     * }
     */
    public interface IsSameObject {

        byte apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(IsSameObject fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(constants$13.const$3, fi, constants$6.const$5, scope);
        }
        static IsSameObject ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (byte)constants$7.const$1.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle IsSameObject$VH() {
        return constants$13.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned char (*IsSameObject)(struct JNINativeInterface_**,struct _jobject*,struct _jobject*);
     * }
     */
    public static MemorySegment IsSameObject$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$13.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned char (*IsSameObject)(struct JNINativeInterface_**,struct _jobject*,struct _jobject*);
     * }
     */
    public static void IsSameObject$set(MemorySegment seg, MemorySegment x) {
        constants$13.const$4.set(seg, x);
    }
    public static MemorySegment IsSameObject$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$13.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void IsSameObject$set(MemorySegment seg, long index, MemorySegment x) {
        constants$13.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static IsSameObject IsSameObject(MemorySegment segment, SegmentScope scope) {
        return IsSameObject.ofAddress(IsSameObject$get(segment), scope);
    }
    /**
     * {@snippet :
 * struct _jobject* (*NewLocalRef)(struct JNINativeInterface_**,struct _jobject*);
     * }
     */
    public interface NewLocalRef {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(NewLocalRef fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(constants$13.const$5, fi, constants$4.const$3, scope);
        }
        static NewLocalRef ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$4.const$5.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle NewLocalRef$VH() {
        return constants$14.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * struct _jobject* (*NewLocalRef)(struct JNINativeInterface_**,struct _jobject*);
     * }
     */
    public static MemorySegment NewLocalRef$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$14.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * struct _jobject* (*NewLocalRef)(struct JNINativeInterface_**,struct _jobject*);
     * }
     */
    public static void NewLocalRef$set(MemorySegment seg, MemorySegment x) {
        constants$14.const$0.set(seg, x);
    }
    public static MemorySegment NewLocalRef$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$14.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void NewLocalRef$set(MemorySegment seg, long index, MemorySegment x) {
        constants$14.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static NewLocalRef NewLocalRef(MemorySegment segment, SegmentScope scope) {
        return NewLocalRef.ofAddress(NewLocalRef$get(segment), scope);
    }
    /**
     * {@snippet :
 * long (*EnsureLocalCapacity)(struct JNINativeInterface_**,long);
     * }
     */
    public interface EnsureLocalCapacity {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1);
        static MemorySegment allocate(EnsureLocalCapacity fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(constants$14.const$1, fi, constants$11.const$3, scope);
        }
        static EnsureLocalCapacity ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, int __x1) -> {
                try {
                    return (int)constants$11.const$5.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle EnsureLocalCapacity$VH() {
        return constants$14.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * long (*EnsureLocalCapacity)(struct JNINativeInterface_**,long);
     * }
     */
    public static MemorySegment EnsureLocalCapacity$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$14.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * long (*EnsureLocalCapacity)(struct JNINativeInterface_**,long);
     * }
     */
    public static void EnsureLocalCapacity$set(MemorySegment seg, MemorySegment x) {
        constants$14.const$2.set(seg, x);
    }
    public static MemorySegment EnsureLocalCapacity$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$14.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void EnsureLocalCapacity$set(MemorySegment seg, long index, MemorySegment x) {
        constants$14.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static EnsureLocalCapacity EnsureLocalCapacity(MemorySegment segment, SegmentScope scope) {
        return EnsureLocalCapacity.ofAddress(EnsureLocalCapacity$get(segment), scope);
    }
    /**
     * {@snippet :
 * struct _jobject* (*AllocObject)(struct JNINativeInterface_**,struct _jobject*);
     * }
     */
    public interface AllocObject {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(AllocObject fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(constants$14.const$3, fi, constants$4.const$3, scope);
        }
        static AllocObject ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$4.const$5.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle AllocObject$VH() {
        return constants$14.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * struct _jobject* (*AllocObject)(struct JNINativeInterface_**,struct _jobject*);
     * }
     */
    public static MemorySegment AllocObject$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$14.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * struct _jobject* (*AllocObject)(struct JNINativeInterface_**,struct _jobject*);
     * }
     */
    public static void AllocObject$set(MemorySegment seg, MemorySegment x) {
        constants$14.const$4.set(seg, x);
    }
    public static MemorySegment AllocObject$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$14.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void AllocObject$set(MemorySegment seg, long index, MemorySegment x) {
        constants$14.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static AllocObject AllocObject(MemorySegment segment, SegmentScope scope) {
        return AllocObject.ofAddress(AllocObject$get(segment), scope);
    }
    public static VarHandle NewObject$VH() {
        return constants$14.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * struct _jobject* (*NewObject)(struct JNINativeInterface_**,struct _jobject*,struct _jmethodID*);
     * }
     */
    public static MemorySegment NewObject$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$14.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * struct _jobject* (*NewObject)(struct JNINativeInterface_**,struct _jobject*,struct _jmethodID*);
     * }
     */
    public static void NewObject$set(MemorySegment seg, MemorySegment x) {
        constants$14.const$5.set(seg, x);
    }
    public static MemorySegment NewObject$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$14.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void NewObject$set(MemorySegment seg, long index, MemorySegment x) {
        constants$14.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    /**
     * {@snippet :
 * struct _jobject* (*NewObjectV)(struct JNINativeInterface_**,struct _jobject*,struct _jmethodID*,char*);
     * }
     */
    public interface NewObjectV {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3);
        static MemorySegment allocate(NewObjectV fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(constants$15.const$1, fi, constants$15.const$0, scope);
        }
        static NewObjectV ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$15.const$2.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle NewObjectV$VH() {
        return constants$15.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * struct _jobject* (*NewObjectV)(struct JNINativeInterface_**,struct _jobject*,struct _jmethodID*,char*);
     * }
     */
    public static MemorySegment NewObjectV$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$15.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * struct _jobject* (*NewObjectV)(struct JNINativeInterface_**,struct _jobject*,struct _jmethodID*,char*);
     * }
     */
    public static void NewObjectV$set(MemorySegment seg, MemorySegment x) {
        constants$15.const$3.set(seg, x);
    }
    public static MemorySegment NewObjectV$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$15.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void NewObjectV$set(MemorySegment seg, long index, MemorySegment x) {
        constants$15.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static NewObjectV NewObjectV(MemorySegment segment, SegmentScope scope) {
        return NewObjectV.ofAddress(NewObjectV$get(segment), scope);
    }
    /**
     * {@snippet :
 * struct _jobject* (*NewObjectA)(struct JNINativeInterface_**,struct _jobject*,struct _jmethodID*,union jvalue*);
     * }
     */
    public interface NewObjectA {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3);
        static MemorySegment allocate(NewObjectA fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(constants$15.const$4, fi, constants$15.const$0, scope);
        }
        static NewObjectA ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$15.const$2.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle NewObjectA$VH() {
        return constants$15.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * struct _jobject* (*NewObjectA)(struct JNINativeInterface_**,struct _jobject*,struct _jmethodID*,union jvalue*);
     * }
     */
    public static MemorySegment NewObjectA$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$15.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * struct _jobject* (*NewObjectA)(struct JNINativeInterface_**,struct _jobject*,struct _jmethodID*,union jvalue*);
     * }
     */
    public static void NewObjectA$set(MemorySegment seg, MemorySegment x) {
        constants$15.const$5.set(seg, x);
    }
    public static MemorySegment NewObjectA$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$15.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void NewObjectA$set(MemorySegment seg, long index, MemorySegment x) {
        constants$15.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static NewObjectA NewObjectA(MemorySegment segment, SegmentScope scope) {
        return NewObjectA.ofAddress(NewObjectA$get(segment), scope);
    }
    /**
     * {@snippet :
 * struct _jobject* (*GetObjectClass)(struct JNINativeInterface_**,struct _jobject*);
     * }
     */
    public interface GetObjectClass {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(GetObjectClass fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(constants$16.const$0, fi, constants$4.const$3, scope);
        }
        static GetObjectClass ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$4.const$5.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle GetObjectClass$VH() {
        return constants$16.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * struct _jobject* (*GetObjectClass)(struct JNINativeInterface_**,struct _jobject*);
     * }
     */
    public static MemorySegment GetObjectClass$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$16.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * struct _jobject* (*GetObjectClass)(struct JNINativeInterface_**,struct _jobject*);
     * }
     */
    public static void GetObjectClass$set(MemorySegment seg, MemorySegment x) {
        constants$16.const$1.set(seg, x);
    }
    public static MemorySegment GetObjectClass$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$16.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void GetObjectClass$set(MemorySegment seg, long index, MemorySegment x) {
        constants$16.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetObjectClass GetObjectClass(MemorySegment segment, SegmentScope scope) {
        return GetObjectClass.ofAddress(GetObjectClass$get(segment), scope);
    }
    /**
     * {@snippet :
 * unsigned char (*IsInstanceOf)(struct JNINativeInterface_**,struct _jobject*,struct _jobject*);
     * }
     */
    public interface IsInstanceOf {

        byte apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(IsInstanceOf fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(constants$16.const$2, fi, constants$6.const$5, scope);
        }
        static IsInstanceOf ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (byte)constants$7.const$1.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle IsInstanceOf$VH() {
        return constants$16.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned char (*IsInstanceOf)(struct JNINativeInterface_**,struct _jobject*,struct _jobject*);
     * }
     */
    public static MemorySegment IsInstanceOf$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$16.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned char (*IsInstanceOf)(struct JNINativeInterface_**,struct _jobject*,struct _jobject*);
     * }
     */
    public static void IsInstanceOf$set(MemorySegment seg, MemorySegment x) {
        constants$16.const$3.set(seg, x);
    }
    public static MemorySegment IsInstanceOf$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$16.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void IsInstanceOf$set(MemorySegment seg, long index, MemorySegment x) {
        constants$16.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static IsInstanceOf IsInstanceOf(MemorySegment segment, SegmentScope scope) {
        return IsInstanceOf.ofAddress(IsInstanceOf$get(segment), scope);
    }
    /**
     * {@snippet :
 * struct _jmethodID* (*GetMethodID)(struct JNINativeInterface_**,struct _jobject*,char*,char*);
     * }
     */
    public interface GetMethodID {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3);
        static MemorySegment allocate(GetMethodID fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(constants$16.const$4, fi, constants$15.const$0, scope);
        }
        static GetMethodID ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$15.const$2.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle GetMethodID$VH() {
        return constants$16.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * struct _jmethodID* (*GetMethodID)(struct JNINativeInterface_**,struct _jobject*,char*,char*);
     * }
     */
    public static MemorySegment GetMethodID$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$16.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * struct _jmethodID* (*GetMethodID)(struct JNINativeInterface_**,struct _jobject*,char*,char*);
     * }
     */
    public static void GetMethodID$set(MemorySegment seg, MemorySegment x) {
        constants$16.const$5.set(seg, x);
    }
    public static MemorySegment GetMethodID$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$16.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void GetMethodID$set(MemorySegment seg, long index, MemorySegment x) {
        constants$16.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetMethodID GetMethodID(MemorySegment segment, SegmentScope scope) {
        return GetMethodID.ofAddress(GetMethodID$get(segment), scope);
    }
    public static VarHandle CallObjectMethod$VH() {
        return constants$17.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * struct _jobject* (*CallObjectMethod)(struct JNINativeInterface_**,struct _jobject*,struct _jmethodID*);
     * }
     */
    public static MemorySegment CallObjectMethod$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$17.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * struct _jobject* (*CallObjectMethod)(struct JNINativeInterface_**,struct _jobject*,struct _jmethodID*);
     * }
     */
    public static void CallObjectMethod$set(MemorySegment seg, MemorySegment x) {
        constants$17.const$0.set(seg, x);
    }
    public static MemorySegment CallObjectMethod$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$17.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void CallObjectMethod$set(MemorySegment seg, long index, MemorySegment x) {
        constants$17.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    /**
     * {@snippet :
 * struct _jobject* (*CallObjectMethodV)(struct JNINativeInterface_**,struct _jobject*,struct _jmethodID*,char*);
     * }
     */
    public interface CallObjectMethodV {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3);
        static MemorySegment allocate(CallObjectMethodV fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(constants$17.const$1, fi, constants$15.const$0, scope);
        }
        static CallObjectMethodV ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$15.const$2.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle CallObjectMethodV$VH() {
        return constants$17.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * struct _jobject* (*CallObjectMethodV)(struct JNINativeInterface_**,struct _jobject*,struct _jmethodID*,char*);
     * }
     */
    public static MemorySegment CallObjectMethodV$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$17.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * struct _jobject* (*CallObjectMethodV)(struct JNINativeInterface_**,struct _jobject*,struct _jmethodID*,char*);
     * }
     */
    public static void CallObjectMethodV$set(MemorySegment seg, MemorySegment x) {
        constants$17.const$2.set(seg, x);
    }
    public static MemorySegment CallObjectMethodV$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$17.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void CallObjectMethodV$set(MemorySegment seg, long index, MemorySegment x) {
        constants$17.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static CallObjectMethodV CallObjectMethodV(MemorySegment segment, SegmentScope scope) {
        return CallObjectMethodV.ofAddress(CallObjectMethodV$get(segment), scope);
    }
    /**
     * {@snippet :
 * struct _jobject* (*CallObjectMethodA)(struct JNINativeInterface_**,struct _jobject*,struct _jmethodID*,union jvalue*);
     * }
     */
    public interface CallObjectMethodA {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3);
        static MemorySegment allocate(CallObjectMethodA fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(constants$17.const$3, fi, constants$15.const$0, scope);
        }
        static CallObjectMethodA ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$15.const$2.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle CallObjectMethodA$VH() {
        return constants$17.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * struct _jobject* (*CallObjectMethodA)(struct JNINativeInterface_**,struct _jobject*,struct _jmethodID*,union jvalue*);
     * }
     */
    public static MemorySegment CallObjectMethodA$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$17.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * struct _jobject* (*CallObjectMethodA)(struct JNINativeInterface_**,struct _jobject*,struct _jmethodID*,union jvalue*);
     * }
     */
    public static void CallObjectMethodA$set(MemorySegment seg, MemorySegment x) {
        constants$17.const$4.set(seg, x);
    }
    public static MemorySegment CallObjectMethodA$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$17.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void CallObjectMethodA$set(MemorySegment seg, long index, MemorySegment x) {
        constants$17.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static CallObjectMethodA CallObjectMethodA(MemorySegment segment, SegmentScope scope) {
        return CallObjectMethodA.ofAddress(CallObjectMethodA$get(segment), scope);
    }
    public static VarHandle CallBooleanMethod$VH() {
        return constants$17.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned char (*CallBooleanMethod)(struct JNINativeInterface_**,struct _jobject*,struct _jmethodID*);
     * }
     */
    public static MemorySegment CallBooleanMethod$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$17.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned char (*CallBooleanMethod)(struct JNINativeInterface_**,struct _jobject*,struct _jmethodID*);
     * }
     */
    public static void CallBooleanMethod$set(MemorySegment seg, MemorySegment x) {
        constants$17.const$5.set(seg, x);
    }
    public static MemorySegment CallBooleanMethod$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$17.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void CallBooleanMethod$set(MemorySegment seg, long index, MemorySegment x) {
        constants$17.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    /**
     * {@snippet :
 * unsigned char (*CallBooleanMethodV)(struct JNINativeInterface_**,struct _jobject*,struct _jmethodID*,char*);
     * }
     */
    public interface CallBooleanMethodV {

        byte apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3);
        static MemorySegment allocate(CallBooleanMethodV fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(constants$18.const$1, fi, constants$18.const$0, scope);
        }
        static CallBooleanMethodV ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3) -> {
                try {
                    return (byte)constants$18.const$2.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle CallBooleanMethodV$VH() {
        return constants$18.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned char (*CallBooleanMethodV)(struct JNINativeInterface_**,struct _jobject*,struct _jmethodID*,char*);
     * }
     */
    public static MemorySegment CallBooleanMethodV$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$18.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned char (*CallBooleanMethodV)(struct JNINativeInterface_**,struct _jobject*,struct _jmethodID*,char*);
     * }
     */
    public static void CallBooleanMethodV$set(MemorySegment seg, MemorySegment x) {
        constants$18.const$3.set(seg, x);
    }
    public static MemorySegment CallBooleanMethodV$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$18.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void CallBooleanMethodV$set(MemorySegment seg, long index, MemorySegment x) {
        constants$18.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static CallBooleanMethodV CallBooleanMethodV(MemorySegment segment, SegmentScope scope) {
        return CallBooleanMethodV.ofAddress(CallBooleanMethodV$get(segment), scope);
    }
    /**
     * {@snippet :
 * unsigned char (*CallBooleanMethodA)(struct JNINativeInterface_**,struct _jobject*,struct _jmethodID*,union jvalue*);
     * }
     */
    public interface CallBooleanMethodA {

        byte apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3);
        static MemorySegment allocate(CallBooleanMethodA fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(constants$18.const$4, fi, constants$18.const$0, scope);
        }
        static CallBooleanMethodA ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3) -> {
                try {
                    return (byte)constants$18.const$2.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle CallBooleanMethodA$VH() {
        return constants$18.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned char (*CallBooleanMethodA)(struct JNINativeInterface_**,struct _jobject*,struct _jmethodID*,union jvalue*);
     * }
     */
    public static MemorySegment CallBooleanMethodA$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$18.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned char (*CallBooleanMethodA)(struct JNINativeInterface_**,struct _jobject*,struct _jmethodID*,union jvalue*);
     * }
     */
    public static void CallBooleanMethodA$set(MemorySegment seg, MemorySegment x) {
        constants$18.const$5.set(seg, x);
    }
    public static MemorySegment CallBooleanMethodA$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$18.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void CallBooleanMethodA$set(MemorySegment seg, long index, MemorySegment x) {
        constants$18.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static CallBooleanMethodA CallBooleanMethodA(MemorySegment segment, SegmentScope scope) {
        return CallBooleanMethodA.ofAddress(CallBooleanMethodA$get(segment), scope);
    }
    public static VarHandle CallByteMethod$VH() {
        return constants$19.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * signed char (*CallByteMethod)(struct JNINativeInterface_**,struct _jobject*,struct _jmethodID*);
     * }
     */
    public static MemorySegment CallByteMethod$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$19.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * signed char (*CallByteMethod)(struct JNINativeInterface_**,struct _jobject*,struct _jmethodID*);
     * }
     */
    public static void CallByteMethod$set(MemorySegment seg, MemorySegment x) {
        constants$19.const$0.set(seg, x);
    }
    public static MemorySegment CallByteMethod$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$19.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void CallByteMethod$set(MemorySegment seg, long index, MemorySegment x) {
        constants$19.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    /**
     * {@snippet :
 * signed char (*CallByteMethodV)(struct JNINativeInterface_**,struct _jobject*,struct _jmethodID*,char*);
     * }
     */
    public interface CallByteMethodV {

        byte apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3);
        static MemorySegment allocate(CallByteMethodV fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(constants$19.const$1, fi, constants$18.const$0, scope);
        }
        static CallByteMethodV ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3) -> {
                try {
                    return (byte)constants$18.const$2.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle CallByteMethodV$VH() {
        return constants$19.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * signed char (*CallByteMethodV)(struct JNINativeInterface_**,struct _jobject*,struct _jmethodID*,char*);
     * }
     */
    public static MemorySegment CallByteMethodV$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$19.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * signed char (*CallByteMethodV)(struct JNINativeInterface_**,struct _jobject*,struct _jmethodID*,char*);
     * }
     */
    public static void CallByteMethodV$set(MemorySegment seg, MemorySegment x) {
        constants$19.const$2.set(seg, x);
    }
    public static MemorySegment CallByteMethodV$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$19.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void CallByteMethodV$set(MemorySegment seg, long index, MemorySegment x) {
        constants$19.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static CallByteMethodV CallByteMethodV(MemorySegment segment, SegmentScope scope) {
        return CallByteMethodV.ofAddress(CallByteMethodV$get(segment), scope);
    }
    /**
     * {@snippet :
 * signed char (*CallByteMethodA)(struct JNINativeInterface_**,struct _jobject*,struct _jmethodID*,union jvalue*);
     * }
     */
    public interface CallByteMethodA {

        byte apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3);
        static MemorySegment allocate(CallByteMethodA fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(constants$19.const$3, fi, constants$18.const$0, scope);
        }
        static CallByteMethodA ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3) -> {
                try {
                    return (byte)constants$18.const$2.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle CallByteMethodA$VH() {
        return constants$19.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * signed char (*CallByteMethodA)(struct JNINativeInterface_**,struct _jobject*,struct _jmethodID*,union jvalue*);
     * }
     */
    public static MemorySegment CallByteMethodA$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$19.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * signed char (*CallByteMethodA)(struct JNINativeInterface_**,struct _jobject*,struct _jmethodID*,union jvalue*);
     * }
     */
    public static void CallByteMethodA$set(MemorySegment seg, MemorySegment x) {
        constants$19.const$4.set(seg, x);
    }
    public static MemorySegment CallByteMethodA$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$19.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void CallByteMethodA$set(MemorySegment seg, long index, MemorySegment x) {
        constants$19.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static CallByteMethodA CallByteMethodA(MemorySegment segment, SegmentScope scope) {
        return CallByteMethodA.ofAddress(CallByteMethodA$get(segment), scope);
    }
    public static VarHandle CallCharMethod$VH() {
        return constants$19.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned short (*CallCharMethod)(struct JNINativeInterface_**,struct _jobject*,struct _jmethodID*);
     * }
     */
    public static MemorySegment CallCharMethod$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$19.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned short (*CallCharMethod)(struct JNINativeInterface_**,struct _jobject*,struct _jmethodID*);
     * }
     */
    public static void CallCharMethod$set(MemorySegment seg, MemorySegment x) {
        constants$19.const$5.set(seg, x);
    }
    public static MemorySegment CallCharMethod$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$19.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void CallCharMethod$set(MemorySegment seg, long index, MemorySegment x) {
        constants$19.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    /**
     * {@snippet :
 * unsigned short (*CallCharMethodV)(struct JNINativeInterface_**,struct _jobject*,struct _jmethodID*,char*);
     * }
     */
    public interface CallCharMethodV {

        short apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3);
        static MemorySegment allocate(CallCharMethodV fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(constants$20.const$1, fi, constants$20.const$0, scope);
        }
        static CallCharMethodV ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3) -> {
                try {
                    return (short)constants$20.const$2.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle CallCharMethodV$VH() {
        return constants$20.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned short (*CallCharMethodV)(struct JNINativeInterface_**,struct _jobject*,struct _jmethodID*,char*);
     * }
     */
    public static MemorySegment CallCharMethodV$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$20.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned short (*CallCharMethodV)(struct JNINativeInterface_**,struct _jobject*,struct _jmethodID*,char*);
     * }
     */
    public static void CallCharMethodV$set(MemorySegment seg, MemorySegment x) {
        constants$20.const$3.set(seg, x);
    }
    public static MemorySegment CallCharMethodV$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$20.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void CallCharMethodV$set(MemorySegment seg, long index, MemorySegment x) {
        constants$20.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static CallCharMethodV CallCharMethodV(MemorySegment segment, SegmentScope scope) {
        return CallCharMethodV.ofAddress(CallCharMethodV$get(segment), scope);
    }
    /**
     * {@snippet :
 * unsigned short (*CallCharMethodA)(struct JNINativeInterface_**,struct _jobject*,struct _jmethodID*,union jvalue*);
     * }
     */
    public interface CallCharMethodA {

        short apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3);
        static MemorySegment allocate(CallCharMethodA fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(constants$20.const$4, fi, constants$20.const$0, scope);
        }
        static CallCharMethodA ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3) -> {
                try {
                    return (short)constants$20.const$2.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle CallCharMethodA$VH() {
        return constants$20.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned short (*CallCharMethodA)(struct JNINativeInterface_**,struct _jobject*,struct _jmethodID*,union jvalue*);
     * }
     */
    public static MemorySegment CallCharMethodA$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$20.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned short (*CallCharMethodA)(struct JNINativeInterface_**,struct _jobject*,struct _jmethodID*,union jvalue*);
     * }
     */
    public static void CallCharMethodA$set(MemorySegment seg, MemorySegment x) {
        constants$20.const$5.set(seg, x);
    }
    public static MemorySegment CallCharMethodA$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$20.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void CallCharMethodA$set(MemorySegment seg, long index, MemorySegment x) {
        constants$20.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static CallCharMethodA CallCharMethodA(MemorySegment segment, SegmentScope scope) {
        return CallCharMethodA.ofAddress(CallCharMethodA$get(segment), scope);
    }
    public static VarHandle CallShortMethod$VH() {
        return constants$21.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * short (*CallShortMethod)(struct JNINativeInterface_**,struct _jobject*,struct _jmethodID*);
     * }
     */
    public static MemorySegment CallShortMethod$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$21.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * short (*CallShortMethod)(struct JNINativeInterface_**,struct _jobject*,struct _jmethodID*);
     * }
     */
    public static void CallShortMethod$set(MemorySegment seg, MemorySegment x) {
        constants$21.const$0.set(seg, x);
    }
    public static MemorySegment CallShortMethod$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$21.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void CallShortMethod$set(MemorySegment seg, long index, MemorySegment x) {
        constants$21.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    /**
     * {@snippet :
 * short (*CallShortMethodV)(struct JNINativeInterface_**,struct _jobject*,struct _jmethodID*,char*);
     * }
     */
    public interface CallShortMethodV {

        short apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3);
        static MemorySegment allocate(CallShortMethodV fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(constants$21.const$1, fi, constants$20.const$0, scope);
        }
        static CallShortMethodV ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3) -> {
                try {
                    return (short)constants$20.const$2.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle CallShortMethodV$VH() {
        return constants$21.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * short (*CallShortMethodV)(struct JNINativeInterface_**,struct _jobject*,struct _jmethodID*,char*);
     * }
     */
    public static MemorySegment CallShortMethodV$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$21.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * short (*CallShortMethodV)(struct JNINativeInterface_**,struct _jobject*,struct _jmethodID*,char*);
     * }
     */
    public static void CallShortMethodV$set(MemorySegment seg, MemorySegment x) {
        constants$21.const$2.set(seg, x);
    }
    public static MemorySegment CallShortMethodV$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$21.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void CallShortMethodV$set(MemorySegment seg, long index, MemorySegment x) {
        constants$21.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static CallShortMethodV CallShortMethodV(MemorySegment segment, SegmentScope scope) {
        return CallShortMethodV.ofAddress(CallShortMethodV$get(segment), scope);
    }
    /**
     * {@snippet :
 * short (*CallShortMethodA)(struct JNINativeInterface_**,struct _jobject*,struct _jmethodID*,union jvalue*);
     * }
     */
    public interface CallShortMethodA {

        short apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3);
        static MemorySegment allocate(CallShortMethodA fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(constants$21.const$3, fi, constants$20.const$0, scope);
        }
        static CallShortMethodA ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3) -> {
                try {
                    return (short)constants$20.const$2.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle CallShortMethodA$VH() {
        return constants$21.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * short (*CallShortMethodA)(struct JNINativeInterface_**,struct _jobject*,struct _jmethodID*,union jvalue*);
     * }
     */
    public static MemorySegment CallShortMethodA$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$21.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * short (*CallShortMethodA)(struct JNINativeInterface_**,struct _jobject*,struct _jmethodID*,union jvalue*);
     * }
     */
    public static void CallShortMethodA$set(MemorySegment seg, MemorySegment x) {
        constants$21.const$4.set(seg, x);
    }
    public static MemorySegment CallShortMethodA$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$21.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void CallShortMethodA$set(MemorySegment seg, long index, MemorySegment x) {
        constants$21.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static CallShortMethodA CallShortMethodA(MemorySegment segment, SegmentScope scope) {
        return CallShortMethodA.ofAddress(CallShortMethodA$get(segment), scope);
    }
    public static VarHandle CallIntMethod$VH() {
        return constants$21.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * long (*CallIntMethod)(struct JNINativeInterface_**,struct _jobject*,struct _jmethodID*);
     * }
     */
    public static MemorySegment CallIntMethod$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$21.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * long (*CallIntMethod)(struct JNINativeInterface_**,struct _jobject*,struct _jmethodID*);
     * }
     */
    public static void CallIntMethod$set(MemorySegment seg, MemorySegment x) {
        constants$21.const$5.set(seg, x);
    }
    public static MemorySegment CallIntMethod$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$21.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void CallIntMethod$set(MemorySegment seg, long index, MemorySegment x) {
        constants$21.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    /**
     * {@snippet :
 * long (*CallIntMethodV)(struct JNINativeInterface_**,struct _jobject*,struct _jmethodID*,char*);
     * }
     */
    public interface CallIntMethodV {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3);
        static MemorySegment allocate(CallIntMethodV fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(constants$22.const$1, fi, constants$22.const$0, scope);
        }
        static CallIntMethodV ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3) -> {
                try {
                    return (int)constants$22.const$2.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle CallIntMethodV$VH() {
        return constants$22.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * long (*CallIntMethodV)(struct JNINativeInterface_**,struct _jobject*,struct _jmethodID*,char*);
     * }
     */
    public static MemorySegment CallIntMethodV$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$22.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * long (*CallIntMethodV)(struct JNINativeInterface_**,struct _jobject*,struct _jmethodID*,char*);
     * }
     */
    public static void CallIntMethodV$set(MemorySegment seg, MemorySegment x) {
        constants$22.const$3.set(seg, x);
    }
    public static MemorySegment CallIntMethodV$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$22.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void CallIntMethodV$set(MemorySegment seg, long index, MemorySegment x) {
        constants$22.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static CallIntMethodV CallIntMethodV(MemorySegment segment, SegmentScope scope) {
        return CallIntMethodV.ofAddress(CallIntMethodV$get(segment), scope);
    }
    /**
     * {@snippet :
 * long (*CallIntMethodA)(struct JNINativeInterface_**,struct _jobject*,struct _jmethodID*,union jvalue*);
     * }
     */
    public interface CallIntMethodA {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3);
        static MemorySegment allocate(CallIntMethodA fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(constants$22.const$4, fi, constants$22.const$0, scope);
        }
        static CallIntMethodA ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3) -> {
                try {
                    return (int)constants$22.const$2.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle CallIntMethodA$VH() {
        return constants$22.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * long (*CallIntMethodA)(struct JNINativeInterface_**,struct _jobject*,struct _jmethodID*,union jvalue*);
     * }
     */
    public static MemorySegment CallIntMethodA$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$22.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * long (*CallIntMethodA)(struct JNINativeInterface_**,struct _jobject*,struct _jmethodID*,union jvalue*);
     * }
     */
    public static void CallIntMethodA$set(MemorySegment seg, MemorySegment x) {
        constants$22.const$5.set(seg, x);
    }
    public static MemorySegment CallIntMethodA$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$22.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void CallIntMethodA$set(MemorySegment seg, long index, MemorySegment x) {
        constants$22.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static CallIntMethodA CallIntMethodA(MemorySegment segment, SegmentScope scope) {
        return CallIntMethodA.ofAddress(CallIntMethodA$get(segment), scope);
    }
    public static VarHandle CallLongMethod$VH() {
        return constants$23.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * long long (*CallLongMethod)(struct JNINativeInterface_**,struct _jobject*,struct _jmethodID*);
     * }
     */
    public static MemorySegment CallLongMethod$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$23.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * long long (*CallLongMethod)(struct JNINativeInterface_**,struct _jobject*,struct _jmethodID*);
     * }
     */
    public static void CallLongMethod$set(MemorySegment seg, MemorySegment x) {
        constants$23.const$0.set(seg, x);
    }
    public static MemorySegment CallLongMethod$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$23.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void CallLongMethod$set(MemorySegment seg, long index, MemorySegment x) {
        constants$23.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    /**
     * {@snippet :
 * long long (*CallLongMethodV)(struct JNINativeInterface_**,struct _jobject*,struct _jmethodID*,char*);
     * }
     */
    public interface CallLongMethodV {

        long apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3);
        static MemorySegment allocate(CallLongMethodV fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(constants$23.const$2, fi, constants$23.const$1, scope);
        }
        static CallLongMethodV ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3) -> {
                try {
                    return (long)constants$23.const$3.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle CallLongMethodV$VH() {
        return constants$23.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * long long (*CallLongMethodV)(struct JNINativeInterface_**,struct _jobject*,struct _jmethodID*,char*);
     * }
     */
    public static MemorySegment CallLongMethodV$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$23.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * long long (*CallLongMethodV)(struct JNINativeInterface_**,struct _jobject*,struct _jmethodID*,char*);
     * }
     */
    public static void CallLongMethodV$set(MemorySegment seg, MemorySegment x) {
        constants$23.const$4.set(seg, x);
    }
    public static MemorySegment CallLongMethodV$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$23.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void CallLongMethodV$set(MemorySegment seg, long index, MemorySegment x) {
        constants$23.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static CallLongMethodV CallLongMethodV(MemorySegment segment, SegmentScope scope) {
        return CallLongMethodV.ofAddress(CallLongMethodV$get(segment), scope);
    }
    /**
     * {@snippet :
 * long long (*CallLongMethodA)(struct JNINativeInterface_**,struct _jobject*,struct _jmethodID*,union jvalue*);
     * }
     */
    public interface CallLongMethodA {

        long apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3);
        static MemorySegment allocate(CallLongMethodA fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(constants$23.const$5, fi, constants$23.const$1, scope);
        }
        static CallLongMethodA ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3) -> {
                try {
                    return (long)constants$23.const$3.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle CallLongMethodA$VH() {
        return constants$24.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * long long (*CallLongMethodA)(struct JNINativeInterface_**,struct _jobject*,struct _jmethodID*,union jvalue*);
     * }
     */
    public static MemorySegment CallLongMethodA$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$24.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * long long (*CallLongMethodA)(struct JNINativeInterface_**,struct _jobject*,struct _jmethodID*,union jvalue*);
     * }
     */
    public static void CallLongMethodA$set(MemorySegment seg, MemorySegment x) {
        constants$24.const$0.set(seg, x);
    }
    public static MemorySegment CallLongMethodA$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$24.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void CallLongMethodA$set(MemorySegment seg, long index, MemorySegment x) {
        constants$24.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static CallLongMethodA CallLongMethodA(MemorySegment segment, SegmentScope scope) {
        return CallLongMethodA.ofAddress(CallLongMethodA$get(segment), scope);
    }
    public static VarHandle CallFloatMethod$VH() {
        return constants$24.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * float (*CallFloatMethod)(struct JNINativeInterface_**,struct _jobject*,struct _jmethodID*);
     * }
     */
    public static MemorySegment CallFloatMethod$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$24.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * float (*CallFloatMethod)(struct JNINativeInterface_**,struct _jobject*,struct _jmethodID*);
     * }
     */
    public static void CallFloatMethod$set(MemorySegment seg, MemorySegment x) {
        constants$24.const$1.set(seg, x);
    }
    public static MemorySegment CallFloatMethod$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$24.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void CallFloatMethod$set(MemorySegment seg, long index, MemorySegment x) {
        constants$24.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    /**
     * {@snippet :
 * float (*CallFloatMethodV)(struct JNINativeInterface_**,struct _jobject*,struct _jmethodID*,char*);
     * }
     */
    public interface CallFloatMethodV {

        float apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3);
        static MemorySegment allocate(CallFloatMethodV fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(constants$24.const$3, fi, constants$24.const$2, scope);
        }
        static CallFloatMethodV ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3) -> {
                try {
                    return (float)constants$24.const$4.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle CallFloatMethodV$VH() {
        return constants$24.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * float (*CallFloatMethodV)(struct JNINativeInterface_**,struct _jobject*,struct _jmethodID*,char*);
     * }
     */
    public static MemorySegment CallFloatMethodV$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$24.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * float (*CallFloatMethodV)(struct JNINativeInterface_**,struct _jobject*,struct _jmethodID*,char*);
     * }
     */
    public static void CallFloatMethodV$set(MemorySegment seg, MemorySegment x) {
        constants$24.const$5.set(seg, x);
    }
    public static MemorySegment CallFloatMethodV$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$24.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void CallFloatMethodV$set(MemorySegment seg, long index, MemorySegment x) {
        constants$24.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static CallFloatMethodV CallFloatMethodV(MemorySegment segment, SegmentScope scope) {
        return CallFloatMethodV.ofAddress(CallFloatMethodV$get(segment), scope);
    }
    /**
     * {@snippet :
 * float (*CallFloatMethodA)(struct JNINativeInterface_**,struct _jobject*,struct _jmethodID*,union jvalue*);
     * }
     */
    public interface CallFloatMethodA {

        float apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3);
        static MemorySegment allocate(CallFloatMethodA fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(constants$25.const$0, fi, constants$24.const$2, scope);
        }
        static CallFloatMethodA ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3) -> {
                try {
                    return (float)constants$24.const$4.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle CallFloatMethodA$VH() {
        return constants$25.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * float (*CallFloatMethodA)(struct JNINativeInterface_**,struct _jobject*,struct _jmethodID*,union jvalue*);
     * }
     */
    public static MemorySegment CallFloatMethodA$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$25.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * float (*CallFloatMethodA)(struct JNINativeInterface_**,struct _jobject*,struct _jmethodID*,union jvalue*);
     * }
     */
    public static void CallFloatMethodA$set(MemorySegment seg, MemorySegment x) {
        constants$25.const$1.set(seg, x);
    }
    public static MemorySegment CallFloatMethodA$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$25.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void CallFloatMethodA$set(MemorySegment seg, long index, MemorySegment x) {
        constants$25.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static CallFloatMethodA CallFloatMethodA(MemorySegment segment, SegmentScope scope) {
        return CallFloatMethodA.ofAddress(CallFloatMethodA$get(segment), scope);
    }
    public static VarHandle CallDoubleMethod$VH() {
        return constants$25.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * double (*CallDoubleMethod)(struct JNINativeInterface_**,struct _jobject*,struct _jmethodID*);
     * }
     */
    public static MemorySegment CallDoubleMethod$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$25.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * double (*CallDoubleMethod)(struct JNINativeInterface_**,struct _jobject*,struct _jmethodID*);
     * }
     */
    public static void CallDoubleMethod$set(MemorySegment seg, MemorySegment x) {
        constants$25.const$2.set(seg, x);
    }
    public static MemorySegment CallDoubleMethod$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$25.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void CallDoubleMethod$set(MemorySegment seg, long index, MemorySegment x) {
        constants$25.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    /**
     * {@snippet :
 * double (*CallDoubleMethodV)(struct JNINativeInterface_**,struct _jobject*,struct _jmethodID*,char*);
     * }
     */
    public interface CallDoubleMethodV {

        double apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3);
        static MemorySegment allocate(CallDoubleMethodV fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(constants$25.const$4, fi, constants$25.const$3, scope);
        }
        static CallDoubleMethodV ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3) -> {
                try {
                    return (double)constants$25.const$5.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle CallDoubleMethodV$VH() {
        return constants$26.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * double (*CallDoubleMethodV)(struct JNINativeInterface_**,struct _jobject*,struct _jmethodID*,char*);
     * }
     */
    public static MemorySegment CallDoubleMethodV$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$26.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * double (*CallDoubleMethodV)(struct JNINativeInterface_**,struct _jobject*,struct _jmethodID*,char*);
     * }
     */
    public static void CallDoubleMethodV$set(MemorySegment seg, MemorySegment x) {
        constants$26.const$0.set(seg, x);
    }
    public static MemorySegment CallDoubleMethodV$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$26.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void CallDoubleMethodV$set(MemorySegment seg, long index, MemorySegment x) {
        constants$26.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static CallDoubleMethodV CallDoubleMethodV(MemorySegment segment, SegmentScope scope) {
        return CallDoubleMethodV.ofAddress(CallDoubleMethodV$get(segment), scope);
    }
    /**
     * {@snippet :
 * double (*CallDoubleMethodA)(struct JNINativeInterface_**,struct _jobject*,struct _jmethodID*,union jvalue*);
     * }
     */
    public interface CallDoubleMethodA {

        double apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3);
        static MemorySegment allocate(CallDoubleMethodA fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(constants$26.const$1, fi, constants$25.const$3, scope);
        }
        static CallDoubleMethodA ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3) -> {
                try {
                    return (double)constants$25.const$5.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle CallDoubleMethodA$VH() {
        return constants$26.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * double (*CallDoubleMethodA)(struct JNINativeInterface_**,struct _jobject*,struct _jmethodID*,union jvalue*);
     * }
     */
    public static MemorySegment CallDoubleMethodA$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$26.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * double (*CallDoubleMethodA)(struct JNINativeInterface_**,struct _jobject*,struct _jmethodID*,union jvalue*);
     * }
     */
    public static void CallDoubleMethodA$set(MemorySegment seg, MemorySegment x) {
        constants$26.const$2.set(seg, x);
    }
    public static MemorySegment CallDoubleMethodA$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$26.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void CallDoubleMethodA$set(MemorySegment seg, long index, MemorySegment x) {
        constants$26.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static CallDoubleMethodA CallDoubleMethodA(MemorySegment segment, SegmentScope scope) {
        return CallDoubleMethodA.ofAddress(CallDoubleMethodA$get(segment), scope);
    }
    public static VarHandle CallVoidMethod$VH() {
        return constants$26.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*CallVoidMethod)(struct JNINativeInterface_**,struct _jobject*,struct _jmethodID*);
     * }
     */
    public static MemorySegment CallVoidMethod$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$26.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*CallVoidMethod)(struct JNINativeInterface_**,struct _jobject*,struct _jmethodID*);
     * }
     */
    public static void CallVoidMethod$set(MemorySegment seg, MemorySegment x) {
        constants$26.const$3.set(seg, x);
    }
    public static MemorySegment CallVoidMethod$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$26.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void CallVoidMethod$set(MemorySegment seg, long index, MemorySegment x) {
        constants$26.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    /**
     * {@snippet :
 * void (*CallVoidMethodV)(struct JNINativeInterface_**,struct _jobject*,struct _jmethodID*,char*);
     * }
     */
    public interface CallVoidMethodV {

        void apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3);
        static MemorySegment allocate(CallVoidMethodV fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(constants$26.const$5, fi, constants$26.const$4, scope);
        }
        static CallVoidMethodV ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3) -> {
                try {
                    constants$27.const$0.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle CallVoidMethodV$VH() {
        return constants$27.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*CallVoidMethodV)(struct JNINativeInterface_**,struct _jobject*,struct _jmethodID*,char*);
     * }
     */
    public static MemorySegment CallVoidMethodV$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$27.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*CallVoidMethodV)(struct JNINativeInterface_**,struct _jobject*,struct _jmethodID*,char*);
     * }
     */
    public static void CallVoidMethodV$set(MemorySegment seg, MemorySegment x) {
        constants$27.const$1.set(seg, x);
    }
    public static MemorySegment CallVoidMethodV$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$27.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void CallVoidMethodV$set(MemorySegment seg, long index, MemorySegment x) {
        constants$27.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static CallVoidMethodV CallVoidMethodV(MemorySegment segment, SegmentScope scope) {
        return CallVoidMethodV.ofAddress(CallVoidMethodV$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*CallVoidMethodA)(struct JNINativeInterface_**,struct _jobject*,struct _jmethodID*,union jvalue*);
     * }
     */
    public interface CallVoidMethodA {

        void apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3);
        static MemorySegment allocate(CallVoidMethodA fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(constants$27.const$2, fi, constants$26.const$4, scope);
        }
        static CallVoidMethodA ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3) -> {
                try {
                    constants$27.const$0.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle CallVoidMethodA$VH() {
        return constants$27.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*CallVoidMethodA)(struct JNINativeInterface_**,struct _jobject*,struct _jmethodID*,union jvalue*);
     * }
     */
    public static MemorySegment CallVoidMethodA$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$27.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*CallVoidMethodA)(struct JNINativeInterface_**,struct _jobject*,struct _jmethodID*,union jvalue*);
     * }
     */
    public static void CallVoidMethodA$set(MemorySegment seg, MemorySegment x) {
        constants$27.const$3.set(seg, x);
    }
    public static MemorySegment CallVoidMethodA$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$27.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void CallVoidMethodA$set(MemorySegment seg, long index, MemorySegment x) {
        constants$27.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static CallVoidMethodA CallVoidMethodA(MemorySegment segment, SegmentScope scope) {
        return CallVoidMethodA.ofAddress(CallVoidMethodA$get(segment), scope);
    }
    public static VarHandle CallNonvirtualObjectMethod$VH() {
        return constants$27.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * struct _jobject* (*CallNonvirtualObjectMethod)(struct JNINativeInterface_**,struct _jobject*,struct _jobject*,struct _jmethodID*);
     * }
     */
    public static MemorySegment CallNonvirtualObjectMethod$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$27.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * struct _jobject* (*CallNonvirtualObjectMethod)(struct JNINativeInterface_**,struct _jobject*,struct _jobject*,struct _jmethodID*);
     * }
     */
    public static void CallNonvirtualObjectMethod$set(MemorySegment seg, MemorySegment x) {
        constants$27.const$4.set(seg, x);
    }
    public static MemorySegment CallNonvirtualObjectMethod$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$27.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void CallNonvirtualObjectMethod$set(MemorySegment seg, long index, MemorySegment x) {
        constants$27.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    /**
     * {@snippet :
 * struct _jobject* (*CallNonvirtualObjectMethodV)(struct JNINativeInterface_**,struct _jobject*,struct _jobject*,struct _jmethodID*,char*);
     * }
     */
    public interface CallNonvirtualObjectMethodV {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3, java.lang.foreign.MemorySegment _x4);
        static MemorySegment allocate(CallNonvirtualObjectMethodV fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(constants$28.const$0, fi, constants$27.const$5, scope);
        }
        static CallNonvirtualObjectMethodV ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3, java.lang.foreign.MemorySegment __x4) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$28.const$1.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle CallNonvirtualObjectMethodV$VH() {
        return constants$28.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * struct _jobject* (*CallNonvirtualObjectMethodV)(struct JNINativeInterface_**,struct _jobject*,struct _jobject*,struct _jmethodID*,char*);
     * }
     */
    public static MemorySegment CallNonvirtualObjectMethodV$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$28.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * struct _jobject* (*CallNonvirtualObjectMethodV)(struct JNINativeInterface_**,struct _jobject*,struct _jobject*,struct _jmethodID*,char*);
     * }
     */
    public static void CallNonvirtualObjectMethodV$set(MemorySegment seg, MemorySegment x) {
        constants$28.const$2.set(seg, x);
    }
    public static MemorySegment CallNonvirtualObjectMethodV$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$28.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void CallNonvirtualObjectMethodV$set(MemorySegment seg, long index, MemorySegment x) {
        constants$28.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static CallNonvirtualObjectMethodV CallNonvirtualObjectMethodV(MemorySegment segment, SegmentScope scope) {
        return CallNonvirtualObjectMethodV.ofAddress(CallNonvirtualObjectMethodV$get(segment), scope);
    }
    /**
     * {@snippet :
 * struct _jobject* (*CallNonvirtualObjectMethodA)(struct JNINativeInterface_**,struct _jobject*,struct _jobject*,struct _jmethodID*,union jvalue*);
     * }
     */
    public interface CallNonvirtualObjectMethodA {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3, java.lang.foreign.MemorySegment _x4);
        static MemorySegment allocate(CallNonvirtualObjectMethodA fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(constants$28.const$3, fi, constants$27.const$5, scope);
        }
        static CallNonvirtualObjectMethodA ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3, java.lang.foreign.MemorySegment __x4) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$28.const$1.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle CallNonvirtualObjectMethodA$VH() {
        return constants$28.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * struct _jobject* (*CallNonvirtualObjectMethodA)(struct JNINativeInterface_**,struct _jobject*,struct _jobject*,struct _jmethodID*,union jvalue*);
     * }
     */
    public static MemorySegment CallNonvirtualObjectMethodA$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$28.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * struct _jobject* (*CallNonvirtualObjectMethodA)(struct JNINativeInterface_**,struct _jobject*,struct _jobject*,struct _jmethodID*,union jvalue*);
     * }
     */
    public static void CallNonvirtualObjectMethodA$set(MemorySegment seg, MemorySegment x) {
        constants$28.const$4.set(seg, x);
    }
    public static MemorySegment CallNonvirtualObjectMethodA$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$28.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void CallNonvirtualObjectMethodA$set(MemorySegment seg, long index, MemorySegment x) {
        constants$28.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static CallNonvirtualObjectMethodA CallNonvirtualObjectMethodA(MemorySegment segment, SegmentScope scope) {
        return CallNonvirtualObjectMethodA.ofAddress(CallNonvirtualObjectMethodA$get(segment), scope);
    }
    public static VarHandle CallNonvirtualBooleanMethod$VH() {
        return constants$28.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned char (*CallNonvirtualBooleanMethod)(struct JNINativeInterface_**,struct _jobject*,struct _jobject*,struct _jmethodID*);
     * }
     */
    public static MemorySegment CallNonvirtualBooleanMethod$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$28.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned char (*CallNonvirtualBooleanMethod)(struct JNINativeInterface_**,struct _jobject*,struct _jobject*,struct _jmethodID*);
     * }
     */
    public static void CallNonvirtualBooleanMethod$set(MemorySegment seg, MemorySegment x) {
        constants$28.const$5.set(seg, x);
    }
    public static MemorySegment CallNonvirtualBooleanMethod$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$28.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void CallNonvirtualBooleanMethod$set(MemorySegment seg, long index, MemorySegment x) {
        constants$28.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    /**
     * {@snippet :
 * unsigned char (*CallNonvirtualBooleanMethodV)(struct JNINativeInterface_**,struct _jobject*,struct _jobject*,struct _jmethodID*,char*);
     * }
     */
    public interface CallNonvirtualBooleanMethodV {

        byte apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3, java.lang.foreign.MemorySegment _x4);
        static MemorySegment allocate(CallNonvirtualBooleanMethodV fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(constants$29.const$1, fi, constants$29.const$0, scope);
        }
        static CallNonvirtualBooleanMethodV ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3, java.lang.foreign.MemorySegment __x4) -> {
                try {
                    return (byte)constants$29.const$2.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle CallNonvirtualBooleanMethodV$VH() {
        return constants$29.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned char (*CallNonvirtualBooleanMethodV)(struct JNINativeInterface_**,struct _jobject*,struct _jobject*,struct _jmethodID*,char*);
     * }
     */
    public static MemorySegment CallNonvirtualBooleanMethodV$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$29.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned char (*CallNonvirtualBooleanMethodV)(struct JNINativeInterface_**,struct _jobject*,struct _jobject*,struct _jmethodID*,char*);
     * }
     */
    public static void CallNonvirtualBooleanMethodV$set(MemorySegment seg, MemorySegment x) {
        constants$29.const$3.set(seg, x);
    }
    public static MemorySegment CallNonvirtualBooleanMethodV$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$29.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void CallNonvirtualBooleanMethodV$set(MemorySegment seg, long index, MemorySegment x) {
        constants$29.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static CallNonvirtualBooleanMethodV CallNonvirtualBooleanMethodV(MemorySegment segment, SegmentScope scope) {
        return CallNonvirtualBooleanMethodV.ofAddress(CallNonvirtualBooleanMethodV$get(segment), scope);
    }
    /**
     * {@snippet :
 * unsigned char (*CallNonvirtualBooleanMethodA)(struct JNINativeInterface_**,struct _jobject*,struct _jobject*,struct _jmethodID*,union jvalue*);
     * }
     */
    public interface CallNonvirtualBooleanMethodA {

        byte apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3, java.lang.foreign.MemorySegment _x4);
        static MemorySegment allocate(CallNonvirtualBooleanMethodA fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(constants$29.const$4, fi, constants$29.const$0, scope);
        }
        static CallNonvirtualBooleanMethodA ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3, java.lang.foreign.MemorySegment __x4) -> {
                try {
                    return (byte)constants$29.const$2.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle CallNonvirtualBooleanMethodA$VH() {
        return constants$29.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned char (*CallNonvirtualBooleanMethodA)(struct JNINativeInterface_**,struct _jobject*,struct _jobject*,struct _jmethodID*,union jvalue*);
     * }
     */
    public static MemorySegment CallNonvirtualBooleanMethodA$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$29.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned char (*CallNonvirtualBooleanMethodA)(struct JNINativeInterface_**,struct _jobject*,struct _jobject*,struct _jmethodID*,union jvalue*);
     * }
     */
    public static void CallNonvirtualBooleanMethodA$set(MemorySegment seg, MemorySegment x) {
        constants$29.const$5.set(seg, x);
    }
    public static MemorySegment CallNonvirtualBooleanMethodA$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$29.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void CallNonvirtualBooleanMethodA$set(MemorySegment seg, long index, MemorySegment x) {
        constants$29.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static CallNonvirtualBooleanMethodA CallNonvirtualBooleanMethodA(MemorySegment segment, SegmentScope scope) {
        return CallNonvirtualBooleanMethodA.ofAddress(CallNonvirtualBooleanMethodA$get(segment), scope);
    }
    public static VarHandle CallNonvirtualByteMethod$VH() {
        return constants$30.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * signed char (*CallNonvirtualByteMethod)(struct JNINativeInterface_**,struct _jobject*,struct _jobject*,struct _jmethodID*);
     * }
     */
    public static MemorySegment CallNonvirtualByteMethod$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$30.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * signed char (*CallNonvirtualByteMethod)(struct JNINativeInterface_**,struct _jobject*,struct _jobject*,struct _jmethodID*);
     * }
     */
    public static void CallNonvirtualByteMethod$set(MemorySegment seg, MemorySegment x) {
        constants$30.const$0.set(seg, x);
    }
    public static MemorySegment CallNonvirtualByteMethod$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$30.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void CallNonvirtualByteMethod$set(MemorySegment seg, long index, MemorySegment x) {
        constants$30.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    /**
     * {@snippet :
 * signed char (*CallNonvirtualByteMethodV)(struct JNINativeInterface_**,struct _jobject*,struct _jobject*,struct _jmethodID*,char*);
     * }
     */
    public interface CallNonvirtualByteMethodV {

        byte apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3, java.lang.foreign.MemorySegment _x4);
        static MemorySegment allocate(CallNonvirtualByteMethodV fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(constants$30.const$1, fi, constants$29.const$0, scope);
        }
        static CallNonvirtualByteMethodV ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3, java.lang.foreign.MemorySegment __x4) -> {
                try {
                    return (byte)constants$29.const$2.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle CallNonvirtualByteMethodV$VH() {
        return constants$30.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * signed char (*CallNonvirtualByteMethodV)(struct JNINativeInterface_**,struct _jobject*,struct _jobject*,struct _jmethodID*,char*);
     * }
     */
    public static MemorySegment CallNonvirtualByteMethodV$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$30.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * signed char (*CallNonvirtualByteMethodV)(struct JNINativeInterface_**,struct _jobject*,struct _jobject*,struct _jmethodID*,char*);
     * }
     */
    public static void CallNonvirtualByteMethodV$set(MemorySegment seg, MemorySegment x) {
        constants$30.const$2.set(seg, x);
    }
    public static MemorySegment CallNonvirtualByteMethodV$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$30.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void CallNonvirtualByteMethodV$set(MemorySegment seg, long index, MemorySegment x) {
        constants$30.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static CallNonvirtualByteMethodV CallNonvirtualByteMethodV(MemorySegment segment, SegmentScope scope) {
        return CallNonvirtualByteMethodV.ofAddress(CallNonvirtualByteMethodV$get(segment), scope);
    }
    /**
     * {@snippet :
 * signed char (*CallNonvirtualByteMethodA)(struct JNINativeInterface_**,struct _jobject*,struct _jobject*,struct _jmethodID*,union jvalue*);
     * }
     */
    public interface CallNonvirtualByteMethodA {

        byte apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3, java.lang.foreign.MemorySegment _x4);
        static MemorySegment allocate(CallNonvirtualByteMethodA fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(constants$30.const$3, fi, constants$29.const$0, scope);
        }
        static CallNonvirtualByteMethodA ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3, java.lang.foreign.MemorySegment __x4) -> {
                try {
                    return (byte)constants$29.const$2.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle CallNonvirtualByteMethodA$VH() {
        return constants$30.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * signed char (*CallNonvirtualByteMethodA)(struct JNINativeInterface_**,struct _jobject*,struct _jobject*,struct _jmethodID*,union jvalue*);
     * }
     */
    public static MemorySegment CallNonvirtualByteMethodA$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$30.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * signed char (*CallNonvirtualByteMethodA)(struct JNINativeInterface_**,struct _jobject*,struct _jobject*,struct _jmethodID*,union jvalue*);
     * }
     */
    public static void CallNonvirtualByteMethodA$set(MemorySegment seg, MemorySegment x) {
        constants$30.const$4.set(seg, x);
    }
    public static MemorySegment CallNonvirtualByteMethodA$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$30.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void CallNonvirtualByteMethodA$set(MemorySegment seg, long index, MemorySegment x) {
        constants$30.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static CallNonvirtualByteMethodA CallNonvirtualByteMethodA(MemorySegment segment, SegmentScope scope) {
        return CallNonvirtualByteMethodA.ofAddress(CallNonvirtualByteMethodA$get(segment), scope);
    }
    public static VarHandle CallNonvirtualCharMethod$VH() {
        return constants$30.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned short (*CallNonvirtualCharMethod)(struct JNINativeInterface_**,struct _jobject*,struct _jobject*,struct _jmethodID*);
     * }
     */
    public static MemorySegment CallNonvirtualCharMethod$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$30.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned short (*CallNonvirtualCharMethod)(struct JNINativeInterface_**,struct _jobject*,struct _jobject*,struct _jmethodID*);
     * }
     */
    public static void CallNonvirtualCharMethod$set(MemorySegment seg, MemorySegment x) {
        constants$30.const$5.set(seg, x);
    }
    public static MemorySegment CallNonvirtualCharMethod$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$30.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void CallNonvirtualCharMethod$set(MemorySegment seg, long index, MemorySegment x) {
        constants$30.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    /**
     * {@snippet :
 * unsigned short (*CallNonvirtualCharMethodV)(struct JNINativeInterface_**,struct _jobject*,struct _jobject*,struct _jmethodID*,char*);
     * }
     */
    public interface CallNonvirtualCharMethodV {

        short apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3, java.lang.foreign.MemorySegment _x4);
        static MemorySegment allocate(CallNonvirtualCharMethodV fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(constants$31.const$1, fi, constants$31.const$0, scope);
        }
        static CallNonvirtualCharMethodV ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3, java.lang.foreign.MemorySegment __x4) -> {
                try {
                    return (short)constants$31.const$2.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle CallNonvirtualCharMethodV$VH() {
        return constants$31.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned short (*CallNonvirtualCharMethodV)(struct JNINativeInterface_**,struct _jobject*,struct _jobject*,struct _jmethodID*,char*);
     * }
     */
    public static MemorySegment CallNonvirtualCharMethodV$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$31.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned short (*CallNonvirtualCharMethodV)(struct JNINativeInterface_**,struct _jobject*,struct _jobject*,struct _jmethodID*,char*);
     * }
     */
    public static void CallNonvirtualCharMethodV$set(MemorySegment seg, MemorySegment x) {
        constants$31.const$3.set(seg, x);
    }
    public static MemorySegment CallNonvirtualCharMethodV$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$31.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void CallNonvirtualCharMethodV$set(MemorySegment seg, long index, MemorySegment x) {
        constants$31.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static CallNonvirtualCharMethodV CallNonvirtualCharMethodV(MemorySegment segment, SegmentScope scope) {
        return CallNonvirtualCharMethodV.ofAddress(CallNonvirtualCharMethodV$get(segment), scope);
    }
    /**
     * {@snippet :
 * unsigned short (*CallNonvirtualCharMethodA)(struct JNINativeInterface_**,struct _jobject*,struct _jobject*,struct _jmethodID*,union jvalue*);
     * }
     */
    public interface CallNonvirtualCharMethodA {

        short apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3, java.lang.foreign.MemorySegment _x4);
        static MemorySegment allocate(CallNonvirtualCharMethodA fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(constants$31.const$4, fi, constants$31.const$0, scope);
        }
        static CallNonvirtualCharMethodA ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3, java.lang.foreign.MemorySegment __x4) -> {
                try {
                    return (short)constants$31.const$2.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle CallNonvirtualCharMethodA$VH() {
        return constants$31.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned short (*CallNonvirtualCharMethodA)(struct JNINativeInterface_**,struct _jobject*,struct _jobject*,struct _jmethodID*,union jvalue*);
     * }
     */
    public static MemorySegment CallNonvirtualCharMethodA$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$31.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned short (*CallNonvirtualCharMethodA)(struct JNINativeInterface_**,struct _jobject*,struct _jobject*,struct _jmethodID*,union jvalue*);
     * }
     */
    public static void CallNonvirtualCharMethodA$set(MemorySegment seg, MemorySegment x) {
        constants$31.const$5.set(seg, x);
    }
    public static MemorySegment CallNonvirtualCharMethodA$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$31.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void CallNonvirtualCharMethodA$set(MemorySegment seg, long index, MemorySegment x) {
        constants$31.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static CallNonvirtualCharMethodA CallNonvirtualCharMethodA(MemorySegment segment, SegmentScope scope) {
        return CallNonvirtualCharMethodA.ofAddress(CallNonvirtualCharMethodA$get(segment), scope);
    }
    public static VarHandle CallNonvirtualShortMethod$VH() {
        return constants$32.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * short (*CallNonvirtualShortMethod)(struct JNINativeInterface_**,struct _jobject*,struct _jobject*,struct _jmethodID*);
     * }
     */
    public static MemorySegment CallNonvirtualShortMethod$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$32.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * short (*CallNonvirtualShortMethod)(struct JNINativeInterface_**,struct _jobject*,struct _jobject*,struct _jmethodID*);
     * }
     */
    public static void CallNonvirtualShortMethod$set(MemorySegment seg, MemorySegment x) {
        constants$32.const$0.set(seg, x);
    }
    public static MemorySegment CallNonvirtualShortMethod$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$32.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void CallNonvirtualShortMethod$set(MemorySegment seg, long index, MemorySegment x) {
        constants$32.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    /**
     * {@snippet :
 * short (*CallNonvirtualShortMethodV)(struct JNINativeInterface_**,struct _jobject*,struct _jobject*,struct _jmethodID*,char*);
     * }
     */
    public interface CallNonvirtualShortMethodV {

        short apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3, java.lang.foreign.MemorySegment _x4);
        static MemorySegment allocate(CallNonvirtualShortMethodV fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(constants$32.const$1, fi, constants$31.const$0, scope);
        }
        static CallNonvirtualShortMethodV ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3, java.lang.foreign.MemorySegment __x4) -> {
                try {
                    return (short)constants$31.const$2.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle CallNonvirtualShortMethodV$VH() {
        return constants$32.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * short (*CallNonvirtualShortMethodV)(struct JNINativeInterface_**,struct _jobject*,struct _jobject*,struct _jmethodID*,char*);
     * }
     */
    public static MemorySegment CallNonvirtualShortMethodV$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$32.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * short (*CallNonvirtualShortMethodV)(struct JNINativeInterface_**,struct _jobject*,struct _jobject*,struct _jmethodID*,char*);
     * }
     */
    public static void CallNonvirtualShortMethodV$set(MemorySegment seg, MemorySegment x) {
        constants$32.const$2.set(seg, x);
    }
    public static MemorySegment CallNonvirtualShortMethodV$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$32.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void CallNonvirtualShortMethodV$set(MemorySegment seg, long index, MemorySegment x) {
        constants$32.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static CallNonvirtualShortMethodV CallNonvirtualShortMethodV(MemorySegment segment, SegmentScope scope) {
        return CallNonvirtualShortMethodV.ofAddress(CallNonvirtualShortMethodV$get(segment), scope);
    }
    /**
     * {@snippet :
 * short (*CallNonvirtualShortMethodA)(struct JNINativeInterface_**,struct _jobject*,struct _jobject*,struct _jmethodID*,union jvalue*);
     * }
     */
    public interface CallNonvirtualShortMethodA {

        short apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3, java.lang.foreign.MemorySegment _x4);
        static MemorySegment allocate(CallNonvirtualShortMethodA fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(constants$32.const$3, fi, constants$31.const$0, scope);
        }
        static CallNonvirtualShortMethodA ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3, java.lang.foreign.MemorySegment __x4) -> {
                try {
                    return (short)constants$31.const$2.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle CallNonvirtualShortMethodA$VH() {
        return constants$32.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * short (*CallNonvirtualShortMethodA)(struct JNINativeInterface_**,struct _jobject*,struct _jobject*,struct _jmethodID*,union jvalue*);
     * }
     */
    public static MemorySegment CallNonvirtualShortMethodA$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$32.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * short (*CallNonvirtualShortMethodA)(struct JNINativeInterface_**,struct _jobject*,struct _jobject*,struct _jmethodID*,union jvalue*);
     * }
     */
    public static void CallNonvirtualShortMethodA$set(MemorySegment seg, MemorySegment x) {
        constants$32.const$4.set(seg, x);
    }
    public static MemorySegment CallNonvirtualShortMethodA$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$32.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void CallNonvirtualShortMethodA$set(MemorySegment seg, long index, MemorySegment x) {
        constants$32.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static CallNonvirtualShortMethodA CallNonvirtualShortMethodA(MemorySegment segment, SegmentScope scope) {
        return CallNonvirtualShortMethodA.ofAddress(CallNonvirtualShortMethodA$get(segment), scope);
    }
    public static VarHandle CallNonvirtualIntMethod$VH() {
        return constants$32.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * long (*CallNonvirtualIntMethod)(struct JNINativeInterface_**,struct _jobject*,struct _jobject*,struct _jmethodID*);
     * }
     */
    public static MemorySegment CallNonvirtualIntMethod$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$32.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * long (*CallNonvirtualIntMethod)(struct JNINativeInterface_**,struct _jobject*,struct _jobject*,struct _jmethodID*);
     * }
     */
    public static void CallNonvirtualIntMethod$set(MemorySegment seg, MemorySegment x) {
        constants$32.const$5.set(seg, x);
    }
    public static MemorySegment CallNonvirtualIntMethod$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$32.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void CallNonvirtualIntMethod$set(MemorySegment seg, long index, MemorySegment x) {
        constants$32.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    /**
     * {@snippet :
 * long (*CallNonvirtualIntMethodV)(struct JNINativeInterface_**,struct _jobject*,struct _jobject*,struct _jmethodID*,char*);
     * }
     */
    public interface CallNonvirtualIntMethodV {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3, java.lang.foreign.MemorySegment _x4);
        static MemorySegment allocate(CallNonvirtualIntMethodV fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(constants$33.const$1, fi, constants$33.const$0, scope);
        }
        static CallNonvirtualIntMethodV ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3, java.lang.foreign.MemorySegment __x4) -> {
                try {
                    return (int)constants$33.const$2.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle CallNonvirtualIntMethodV$VH() {
        return constants$33.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * long (*CallNonvirtualIntMethodV)(struct JNINativeInterface_**,struct _jobject*,struct _jobject*,struct _jmethodID*,char*);
     * }
     */
    public static MemorySegment CallNonvirtualIntMethodV$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$33.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * long (*CallNonvirtualIntMethodV)(struct JNINativeInterface_**,struct _jobject*,struct _jobject*,struct _jmethodID*,char*);
     * }
     */
    public static void CallNonvirtualIntMethodV$set(MemorySegment seg, MemorySegment x) {
        constants$33.const$3.set(seg, x);
    }
    public static MemorySegment CallNonvirtualIntMethodV$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$33.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void CallNonvirtualIntMethodV$set(MemorySegment seg, long index, MemorySegment x) {
        constants$33.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static CallNonvirtualIntMethodV CallNonvirtualIntMethodV(MemorySegment segment, SegmentScope scope) {
        return CallNonvirtualIntMethodV.ofAddress(CallNonvirtualIntMethodV$get(segment), scope);
    }
    /**
     * {@snippet :
 * long (*CallNonvirtualIntMethodA)(struct JNINativeInterface_**,struct _jobject*,struct _jobject*,struct _jmethodID*,union jvalue*);
     * }
     */
    public interface CallNonvirtualIntMethodA {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3, java.lang.foreign.MemorySegment _x4);
        static MemorySegment allocate(CallNonvirtualIntMethodA fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(constants$33.const$4, fi, constants$33.const$0, scope);
        }
        static CallNonvirtualIntMethodA ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3, java.lang.foreign.MemorySegment __x4) -> {
                try {
                    return (int)constants$33.const$2.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle CallNonvirtualIntMethodA$VH() {
        return constants$33.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * long (*CallNonvirtualIntMethodA)(struct JNINativeInterface_**,struct _jobject*,struct _jobject*,struct _jmethodID*,union jvalue*);
     * }
     */
    public static MemorySegment CallNonvirtualIntMethodA$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$33.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * long (*CallNonvirtualIntMethodA)(struct JNINativeInterface_**,struct _jobject*,struct _jobject*,struct _jmethodID*,union jvalue*);
     * }
     */
    public static void CallNonvirtualIntMethodA$set(MemorySegment seg, MemorySegment x) {
        constants$33.const$5.set(seg, x);
    }
    public static MemorySegment CallNonvirtualIntMethodA$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$33.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void CallNonvirtualIntMethodA$set(MemorySegment seg, long index, MemorySegment x) {
        constants$33.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static CallNonvirtualIntMethodA CallNonvirtualIntMethodA(MemorySegment segment, SegmentScope scope) {
        return CallNonvirtualIntMethodA.ofAddress(CallNonvirtualIntMethodA$get(segment), scope);
    }
    public static VarHandle CallNonvirtualLongMethod$VH() {
        return constants$34.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * long long (*CallNonvirtualLongMethod)(struct JNINativeInterface_**,struct _jobject*,struct _jobject*,struct _jmethodID*);
     * }
     */
    public static MemorySegment CallNonvirtualLongMethod$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$34.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * long long (*CallNonvirtualLongMethod)(struct JNINativeInterface_**,struct _jobject*,struct _jobject*,struct _jmethodID*);
     * }
     */
    public static void CallNonvirtualLongMethod$set(MemorySegment seg, MemorySegment x) {
        constants$34.const$0.set(seg, x);
    }
    public static MemorySegment CallNonvirtualLongMethod$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$34.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void CallNonvirtualLongMethod$set(MemorySegment seg, long index, MemorySegment x) {
        constants$34.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    /**
     * {@snippet :
 * long long (*CallNonvirtualLongMethodV)(struct JNINativeInterface_**,struct _jobject*,struct _jobject*,struct _jmethodID*,char*);
     * }
     */
    public interface CallNonvirtualLongMethodV {

        long apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3, java.lang.foreign.MemorySegment _x4);
        static MemorySegment allocate(CallNonvirtualLongMethodV fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(constants$34.const$2, fi, constants$34.const$1, scope);
        }
        static CallNonvirtualLongMethodV ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3, java.lang.foreign.MemorySegment __x4) -> {
                try {
                    return (long)constants$34.const$3.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle CallNonvirtualLongMethodV$VH() {
        return constants$34.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * long long (*CallNonvirtualLongMethodV)(struct JNINativeInterface_**,struct _jobject*,struct _jobject*,struct _jmethodID*,char*);
     * }
     */
    public static MemorySegment CallNonvirtualLongMethodV$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$34.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * long long (*CallNonvirtualLongMethodV)(struct JNINativeInterface_**,struct _jobject*,struct _jobject*,struct _jmethodID*,char*);
     * }
     */
    public static void CallNonvirtualLongMethodV$set(MemorySegment seg, MemorySegment x) {
        constants$34.const$4.set(seg, x);
    }
    public static MemorySegment CallNonvirtualLongMethodV$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$34.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void CallNonvirtualLongMethodV$set(MemorySegment seg, long index, MemorySegment x) {
        constants$34.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static CallNonvirtualLongMethodV CallNonvirtualLongMethodV(MemorySegment segment, SegmentScope scope) {
        return CallNonvirtualLongMethodV.ofAddress(CallNonvirtualLongMethodV$get(segment), scope);
    }
    /**
     * {@snippet :
 * long long (*CallNonvirtualLongMethodA)(struct JNINativeInterface_**,struct _jobject*,struct _jobject*,struct _jmethodID*,union jvalue*);
     * }
     */
    public interface CallNonvirtualLongMethodA {

        long apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3, java.lang.foreign.MemorySegment _x4);
        static MemorySegment allocate(CallNonvirtualLongMethodA fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(constants$34.const$5, fi, constants$34.const$1, scope);
        }
        static CallNonvirtualLongMethodA ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3, java.lang.foreign.MemorySegment __x4) -> {
                try {
                    return (long)constants$34.const$3.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle CallNonvirtualLongMethodA$VH() {
        return constants$35.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * long long (*CallNonvirtualLongMethodA)(struct JNINativeInterface_**,struct _jobject*,struct _jobject*,struct _jmethodID*,union jvalue*);
     * }
     */
    public static MemorySegment CallNonvirtualLongMethodA$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$35.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * long long (*CallNonvirtualLongMethodA)(struct JNINativeInterface_**,struct _jobject*,struct _jobject*,struct _jmethodID*,union jvalue*);
     * }
     */
    public static void CallNonvirtualLongMethodA$set(MemorySegment seg, MemorySegment x) {
        constants$35.const$0.set(seg, x);
    }
    public static MemorySegment CallNonvirtualLongMethodA$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$35.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void CallNonvirtualLongMethodA$set(MemorySegment seg, long index, MemorySegment x) {
        constants$35.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static CallNonvirtualLongMethodA CallNonvirtualLongMethodA(MemorySegment segment, SegmentScope scope) {
        return CallNonvirtualLongMethodA.ofAddress(CallNonvirtualLongMethodA$get(segment), scope);
    }
    public static VarHandle CallNonvirtualFloatMethod$VH() {
        return constants$35.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * float (*CallNonvirtualFloatMethod)(struct JNINativeInterface_**,struct _jobject*,struct _jobject*,struct _jmethodID*);
     * }
     */
    public static MemorySegment CallNonvirtualFloatMethod$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$35.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * float (*CallNonvirtualFloatMethod)(struct JNINativeInterface_**,struct _jobject*,struct _jobject*,struct _jmethodID*);
     * }
     */
    public static void CallNonvirtualFloatMethod$set(MemorySegment seg, MemorySegment x) {
        constants$35.const$1.set(seg, x);
    }
    public static MemorySegment CallNonvirtualFloatMethod$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$35.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void CallNonvirtualFloatMethod$set(MemorySegment seg, long index, MemorySegment x) {
        constants$35.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    /**
     * {@snippet :
 * float (*CallNonvirtualFloatMethodV)(struct JNINativeInterface_**,struct _jobject*,struct _jobject*,struct _jmethodID*,char*);
     * }
     */
    public interface CallNonvirtualFloatMethodV {

        float apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3, java.lang.foreign.MemorySegment _x4);
        static MemorySegment allocate(CallNonvirtualFloatMethodV fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(constants$35.const$3, fi, constants$35.const$2, scope);
        }
        static CallNonvirtualFloatMethodV ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3, java.lang.foreign.MemorySegment __x4) -> {
                try {
                    return (float)constants$35.const$4.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle CallNonvirtualFloatMethodV$VH() {
        return constants$35.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * float (*CallNonvirtualFloatMethodV)(struct JNINativeInterface_**,struct _jobject*,struct _jobject*,struct _jmethodID*,char*);
     * }
     */
    public static MemorySegment CallNonvirtualFloatMethodV$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$35.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * float (*CallNonvirtualFloatMethodV)(struct JNINativeInterface_**,struct _jobject*,struct _jobject*,struct _jmethodID*,char*);
     * }
     */
    public static void CallNonvirtualFloatMethodV$set(MemorySegment seg, MemorySegment x) {
        constants$35.const$5.set(seg, x);
    }
    public static MemorySegment CallNonvirtualFloatMethodV$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$35.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void CallNonvirtualFloatMethodV$set(MemorySegment seg, long index, MemorySegment x) {
        constants$35.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static CallNonvirtualFloatMethodV CallNonvirtualFloatMethodV(MemorySegment segment, SegmentScope scope) {
        return CallNonvirtualFloatMethodV.ofAddress(CallNonvirtualFloatMethodV$get(segment), scope);
    }
    /**
     * {@snippet :
 * float (*CallNonvirtualFloatMethodA)(struct JNINativeInterface_**,struct _jobject*,struct _jobject*,struct _jmethodID*,union jvalue*);
     * }
     */
    public interface CallNonvirtualFloatMethodA {

        float apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3, java.lang.foreign.MemorySegment _x4);
        static MemorySegment allocate(CallNonvirtualFloatMethodA fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(constants$36.const$0, fi, constants$35.const$2, scope);
        }
        static CallNonvirtualFloatMethodA ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3, java.lang.foreign.MemorySegment __x4) -> {
                try {
                    return (float)constants$35.const$4.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle CallNonvirtualFloatMethodA$VH() {
        return constants$36.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * float (*CallNonvirtualFloatMethodA)(struct JNINativeInterface_**,struct _jobject*,struct _jobject*,struct _jmethodID*,union jvalue*);
     * }
     */
    public static MemorySegment CallNonvirtualFloatMethodA$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$36.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * float (*CallNonvirtualFloatMethodA)(struct JNINativeInterface_**,struct _jobject*,struct _jobject*,struct _jmethodID*,union jvalue*);
     * }
     */
    public static void CallNonvirtualFloatMethodA$set(MemorySegment seg, MemorySegment x) {
        constants$36.const$1.set(seg, x);
    }
    public static MemorySegment CallNonvirtualFloatMethodA$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$36.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void CallNonvirtualFloatMethodA$set(MemorySegment seg, long index, MemorySegment x) {
        constants$36.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static CallNonvirtualFloatMethodA CallNonvirtualFloatMethodA(MemorySegment segment, SegmentScope scope) {
        return CallNonvirtualFloatMethodA.ofAddress(CallNonvirtualFloatMethodA$get(segment), scope);
    }
    public static VarHandle CallNonvirtualDoubleMethod$VH() {
        return constants$36.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * double (*CallNonvirtualDoubleMethod)(struct JNINativeInterface_**,struct _jobject*,struct _jobject*,struct _jmethodID*);
     * }
     */
    public static MemorySegment CallNonvirtualDoubleMethod$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$36.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * double (*CallNonvirtualDoubleMethod)(struct JNINativeInterface_**,struct _jobject*,struct _jobject*,struct _jmethodID*);
     * }
     */
    public static void CallNonvirtualDoubleMethod$set(MemorySegment seg, MemorySegment x) {
        constants$36.const$2.set(seg, x);
    }
    public static MemorySegment CallNonvirtualDoubleMethod$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$36.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void CallNonvirtualDoubleMethod$set(MemorySegment seg, long index, MemorySegment x) {
        constants$36.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    /**
     * {@snippet :
 * double (*CallNonvirtualDoubleMethodV)(struct JNINativeInterface_**,struct _jobject*,struct _jobject*,struct _jmethodID*,char*);
     * }
     */
    public interface CallNonvirtualDoubleMethodV {

        double apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3, java.lang.foreign.MemorySegment _x4);
        static MemorySegment allocate(CallNonvirtualDoubleMethodV fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(constants$36.const$4, fi, constants$36.const$3, scope);
        }
        static CallNonvirtualDoubleMethodV ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3, java.lang.foreign.MemorySegment __x4) -> {
                try {
                    return (double)constants$36.const$5.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle CallNonvirtualDoubleMethodV$VH() {
        return constants$37.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * double (*CallNonvirtualDoubleMethodV)(struct JNINativeInterface_**,struct _jobject*,struct _jobject*,struct _jmethodID*,char*);
     * }
     */
    public static MemorySegment CallNonvirtualDoubleMethodV$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$37.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * double (*CallNonvirtualDoubleMethodV)(struct JNINativeInterface_**,struct _jobject*,struct _jobject*,struct _jmethodID*,char*);
     * }
     */
    public static void CallNonvirtualDoubleMethodV$set(MemorySegment seg, MemorySegment x) {
        constants$37.const$0.set(seg, x);
    }
    public static MemorySegment CallNonvirtualDoubleMethodV$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$37.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void CallNonvirtualDoubleMethodV$set(MemorySegment seg, long index, MemorySegment x) {
        constants$37.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static CallNonvirtualDoubleMethodV CallNonvirtualDoubleMethodV(MemorySegment segment, SegmentScope scope) {
        return CallNonvirtualDoubleMethodV.ofAddress(CallNonvirtualDoubleMethodV$get(segment), scope);
    }
    /**
     * {@snippet :
 * double (*CallNonvirtualDoubleMethodA)(struct JNINativeInterface_**,struct _jobject*,struct _jobject*,struct _jmethodID*,union jvalue*);
     * }
     */
    public interface CallNonvirtualDoubleMethodA {

        double apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3, java.lang.foreign.MemorySegment _x4);
        static MemorySegment allocate(CallNonvirtualDoubleMethodA fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(constants$37.const$1, fi, constants$36.const$3, scope);
        }
        static CallNonvirtualDoubleMethodA ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3, java.lang.foreign.MemorySegment __x4) -> {
                try {
                    return (double)constants$36.const$5.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle CallNonvirtualDoubleMethodA$VH() {
        return constants$37.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * double (*CallNonvirtualDoubleMethodA)(struct JNINativeInterface_**,struct _jobject*,struct _jobject*,struct _jmethodID*,union jvalue*);
     * }
     */
    public static MemorySegment CallNonvirtualDoubleMethodA$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$37.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * double (*CallNonvirtualDoubleMethodA)(struct JNINativeInterface_**,struct _jobject*,struct _jobject*,struct _jmethodID*,union jvalue*);
     * }
     */
    public static void CallNonvirtualDoubleMethodA$set(MemorySegment seg, MemorySegment x) {
        constants$37.const$2.set(seg, x);
    }
    public static MemorySegment CallNonvirtualDoubleMethodA$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$37.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void CallNonvirtualDoubleMethodA$set(MemorySegment seg, long index, MemorySegment x) {
        constants$37.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static CallNonvirtualDoubleMethodA CallNonvirtualDoubleMethodA(MemorySegment segment, SegmentScope scope) {
        return CallNonvirtualDoubleMethodA.ofAddress(CallNonvirtualDoubleMethodA$get(segment), scope);
    }
    public static VarHandle CallNonvirtualVoidMethod$VH() {
        return constants$37.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*CallNonvirtualVoidMethod)(struct JNINativeInterface_**,struct _jobject*,struct _jobject*,struct _jmethodID*);
     * }
     */
    public static MemorySegment CallNonvirtualVoidMethod$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$37.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*CallNonvirtualVoidMethod)(struct JNINativeInterface_**,struct _jobject*,struct _jobject*,struct _jmethodID*);
     * }
     */
    public static void CallNonvirtualVoidMethod$set(MemorySegment seg, MemorySegment x) {
        constants$37.const$3.set(seg, x);
    }
    public static MemorySegment CallNonvirtualVoidMethod$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$37.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void CallNonvirtualVoidMethod$set(MemorySegment seg, long index, MemorySegment x) {
        constants$37.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    /**
     * {@snippet :
 * void (*CallNonvirtualVoidMethodV)(struct JNINativeInterface_**,struct _jobject*,struct _jobject*,struct _jmethodID*,char*);
     * }
     */
    public interface CallNonvirtualVoidMethodV {

        void apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3, java.lang.foreign.MemorySegment _x4);
        static MemorySegment allocate(CallNonvirtualVoidMethodV fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(constants$37.const$5, fi, constants$37.const$4, scope);
        }
        static CallNonvirtualVoidMethodV ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3, java.lang.foreign.MemorySegment __x4) -> {
                try {
                    constants$38.const$0.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle CallNonvirtualVoidMethodV$VH() {
        return constants$38.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*CallNonvirtualVoidMethodV)(struct JNINativeInterface_**,struct _jobject*,struct _jobject*,struct _jmethodID*,char*);
     * }
     */
    public static MemorySegment CallNonvirtualVoidMethodV$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$38.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*CallNonvirtualVoidMethodV)(struct JNINativeInterface_**,struct _jobject*,struct _jobject*,struct _jmethodID*,char*);
     * }
     */
    public static void CallNonvirtualVoidMethodV$set(MemorySegment seg, MemorySegment x) {
        constants$38.const$1.set(seg, x);
    }
    public static MemorySegment CallNonvirtualVoidMethodV$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$38.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void CallNonvirtualVoidMethodV$set(MemorySegment seg, long index, MemorySegment x) {
        constants$38.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static CallNonvirtualVoidMethodV CallNonvirtualVoidMethodV(MemorySegment segment, SegmentScope scope) {
        return CallNonvirtualVoidMethodV.ofAddress(CallNonvirtualVoidMethodV$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*CallNonvirtualVoidMethodA)(struct JNINativeInterface_**,struct _jobject*,struct _jobject*,struct _jmethodID*,union jvalue*);
     * }
     */
    public interface CallNonvirtualVoidMethodA {

        void apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3, java.lang.foreign.MemorySegment _x4);
        static MemorySegment allocate(CallNonvirtualVoidMethodA fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(constants$38.const$2, fi, constants$37.const$4, scope);
        }
        static CallNonvirtualVoidMethodA ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3, java.lang.foreign.MemorySegment __x4) -> {
                try {
                    constants$38.const$0.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle CallNonvirtualVoidMethodA$VH() {
        return constants$38.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*CallNonvirtualVoidMethodA)(struct JNINativeInterface_**,struct _jobject*,struct _jobject*,struct _jmethodID*,union jvalue*);
     * }
     */
    public static MemorySegment CallNonvirtualVoidMethodA$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$38.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*CallNonvirtualVoidMethodA)(struct JNINativeInterface_**,struct _jobject*,struct _jobject*,struct _jmethodID*,union jvalue*);
     * }
     */
    public static void CallNonvirtualVoidMethodA$set(MemorySegment seg, MemorySegment x) {
        constants$38.const$3.set(seg, x);
    }
    public static MemorySegment CallNonvirtualVoidMethodA$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$38.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void CallNonvirtualVoidMethodA$set(MemorySegment seg, long index, MemorySegment x) {
        constants$38.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static CallNonvirtualVoidMethodA CallNonvirtualVoidMethodA(MemorySegment segment, SegmentScope scope) {
        return CallNonvirtualVoidMethodA.ofAddress(CallNonvirtualVoidMethodA$get(segment), scope);
    }
    /**
     * {@snippet :
 * struct _jfieldID* (*GetFieldID)(struct JNINativeInterface_**,struct _jobject*,char*,char*);
     * }
     */
    public interface GetFieldID {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3);
        static MemorySegment allocate(GetFieldID fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(constants$38.const$4, fi, constants$15.const$0, scope);
        }
        static GetFieldID ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$15.const$2.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle GetFieldID$VH() {
        return constants$38.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * struct _jfieldID* (*GetFieldID)(struct JNINativeInterface_**,struct _jobject*,char*,char*);
     * }
     */
    public static MemorySegment GetFieldID$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$38.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * struct _jfieldID* (*GetFieldID)(struct JNINativeInterface_**,struct _jobject*,char*,char*);
     * }
     */
    public static void GetFieldID$set(MemorySegment seg, MemorySegment x) {
        constants$38.const$5.set(seg, x);
    }
    public static MemorySegment GetFieldID$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$38.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void GetFieldID$set(MemorySegment seg, long index, MemorySegment x) {
        constants$38.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetFieldID GetFieldID(MemorySegment segment, SegmentScope scope) {
        return GetFieldID.ofAddress(GetFieldID$get(segment), scope);
    }
    /**
     * {@snippet :
 * struct _jobject* (*GetObjectField)(struct JNINativeInterface_**,struct _jobject*,struct _jfieldID*);
     * }
     */
    public interface GetObjectField {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(GetObjectField fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(constants$39.const$1, fi, constants$39.const$0, scope);
        }
        static GetObjectField ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$39.const$2.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle GetObjectField$VH() {
        return constants$39.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * struct _jobject* (*GetObjectField)(struct JNINativeInterface_**,struct _jobject*,struct _jfieldID*);
     * }
     */
    public static MemorySegment GetObjectField$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$39.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * struct _jobject* (*GetObjectField)(struct JNINativeInterface_**,struct _jobject*,struct _jfieldID*);
     * }
     */
    public static void GetObjectField$set(MemorySegment seg, MemorySegment x) {
        constants$39.const$3.set(seg, x);
    }
    public static MemorySegment GetObjectField$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$39.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void GetObjectField$set(MemorySegment seg, long index, MemorySegment x) {
        constants$39.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetObjectField GetObjectField(MemorySegment segment, SegmentScope scope) {
        return GetObjectField.ofAddress(GetObjectField$get(segment), scope);
    }
    /**
     * {@snippet :
 * unsigned char (*GetBooleanField)(struct JNINativeInterface_**,struct _jobject*,struct _jfieldID*);
     * }
     */
    public interface GetBooleanField {

        byte apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(GetBooleanField fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(constants$39.const$4, fi, constants$6.const$5, scope);
        }
        static GetBooleanField ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (byte)constants$7.const$1.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle GetBooleanField$VH() {
        return constants$39.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned char (*GetBooleanField)(struct JNINativeInterface_**,struct _jobject*,struct _jfieldID*);
     * }
     */
    public static MemorySegment GetBooleanField$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$39.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned char (*GetBooleanField)(struct JNINativeInterface_**,struct _jobject*,struct _jfieldID*);
     * }
     */
    public static void GetBooleanField$set(MemorySegment seg, MemorySegment x) {
        constants$39.const$5.set(seg, x);
    }
    public static MemorySegment GetBooleanField$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$39.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void GetBooleanField$set(MemorySegment seg, long index, MemorySegment x) {
        constants$39.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetBooleanField GetBooleanField(MemorySegment segment, SegmentScope scope) {
        return GetBooleanField.ofAddress(GetBooleanField$get(segment), scope);
    }
    /**
     * {@snippet :
 * signed char (*GetByteField)(struct JNINativeInterface_**,struct _jobject*,struct _jfieldID*);
     * }
     */
    public interface GetByteField {

        byte apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(GetByteField fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(constants$40.const$0, fi, constants$6.const$5, scope);
        }
        static GetByteField ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (byte)constants$7.const$1.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle GetByteField$VH() {
        return constants$40.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * signed char (*GetByteField)(struct JNINativeInterface_**,struct _jobject*,struct _jfieldID*);
     * }
     */
    public static MemorySegment GetByteField$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$40.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * signed char (*GetByteField)(struct JNINativeInterface_**,struct _jobject*,struct _jfieldID*);
     * }
     */
    public static void GetByteField$set(MemorySegment seg, MemorySegment x) {
        constants$40.const$1.set(seg, x);
    }
    public static MemorySegment GetByteField$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$40.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void GetByteField$set(MemorySegment seg, long index, MemorySegment x) {
        constants$40.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetByteField GetByteField(MemorySegment segment, SegmentScope scope) {
        return GetByteField.ofAddress(GetByteField$get(segment), scope);
    }
    /**
     * {@snippet :
 * unsigned short (*GetCharField)(struct JNINativeInterface_**,struct _jobject*,struct _jfieldID*);
     * }
     */
    public interface GetCharField {

        short apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(GetCharField fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(constants$40.const$3, fi, constants$40.const$2, scope);
        }
        static GetCharField ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (short)constants$40.const$4.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle GetCharField$VH() {
        return constants$40.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned short (*GetCharField)(struct JNINativeInterface_**,struct _jobject*,struct _jfieldID*);
     * }
     */
    public static MemorySegment GetCharField$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$40.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned short (*GetCharField)(struct JNINativeInterface_**,struct _jobject*,struct _jfieldID*);
     * }
     */
    public static void GetCharField$set(MemorySegment seg, MemorySegment x) {
        constants$40.const$5.set(seg, x);
    }
    public static MemorySegment GetCharField$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$40.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void GetCharField$set(MemorySegment seg, long index, MemorySegment x) {
        constants$40.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetCharField GetCharField(MemorySegment segment, SegmentScope scope) {
        return GetCharField.ofAddress(GetCharField$get(segment), scope);
    }
    /**
     * {@snippet :
 * short (*GetShortField)(struct JNINativeInterface_**,struct _jobject*,struct _jfieldID*);
     * }
     */
    public interface GetShortField {

        short apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(GetShortField fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(constants$41.const$0, fi, constants$40.const$2, scope);
        }
        static GetShortField ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (short)constants$40.const$4.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle GetShortField$VH() {
        return constants$41.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * short (*GetShortField)(struct JNINativeInterface_**,struct _jobject*,struct _jfieldID*);
     * }
     */
    public static MemorySegment GetShortField$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$41.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * short (*GetShortField)(struct JNINativeInterface_**,struct _jobject*,struct _jfieldID*);
     * }
     */
    public static void GetShortField$set(MemorySegment seg, MemorySegment x) {
        constants$41.const$1.set(seg, x);
    }
    public static MemorySegment GetShortField$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$41.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void GetShortField$set(MemorySegment seg, long index, MemorySegment x) {
        constants$41.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetShortField GetShortField(MemorySegment segment, SegmentScope scope) {
        return GetShortField.ofAddress(GetShortField$get(segment), scope);
    }
    /**
     * {@snippet :
 * long (*GetIntField)(struct JNINativeInterface_**,struct _jobject*,struct _jfieldID*);
     * }
     */
    public interface GetIntField {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(GetIntField fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(constants$41.const$2, fi, constants$8.const$3, scope);
        }
        static GetIntField ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)constants$8.const$5.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle GetIntField$VH() {
        return constants$41.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * long (*GetIntField)(struct JNINativeInterface_**,struct _jobject*,struct _jfieldID*);
     * }
     */
    public static MemorySegment GetIntField$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$41.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * long (*GetIntField)(struct JNINativeInterface_**,struct _jobject*,struct _jfieldID*);
     * }
     */
    public static void GetIntField$set(MemorySegment seg, MemorySegment x) {
        constants$41.const$3.set(seg, x);
    }
    public static MemorySegment GetIntField$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$41.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void GetIntField$set(MemorySegment seg, long index, MemorySegment x) {
        constants$41.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetIntField GetIntField(MemorySegment segment, SegmentScope scope) {
        return GetIntField.ofAddress(GetIntField$get(segment), scope);
    }
    /**
     * {@snippet :
 * long long (*GetLongField)(struct JNINativeInterface_**,struct _jobject*,struct _jfieldID*);
     * }
     */
    public interface GetLongField {

        long apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(GetLongField fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(constants$41.const$5, fi, constants$41.const$4, scope);
        }
        static GetLongField ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (long)constants$42.const$0.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle GetLongField$VH() {
        return constants$42.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * long long (*GetLongField)(struct JNINativeInterface_**,struct _jobject*,struct _jfieldID*);
     * }
     */
    public static MemorySegment GetLongField$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$42.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * long long (*GetLongField)(struct JNINativeInterface_**,struct _jobject*,struct _jfieldID*);
     * }
     */
    public static void GetLongField$set(MemorySegment seg, MemorySegment x) {
        constants$42.const$1.set(seg, x);
    }
    public static MemorySegment GetLongField$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$42.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void GetLongField$set(MemorySegment seg, long index, MemorySegment x) {
        constants$42.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetLongField GetLongField(MemorySegment segment, SegmentScope scope) {
        return GetLongField.ofAddress(GetLongField$get(segment), scope);
    }
    /**
     * {@snippet :
 * float (*GetFloatField)(struct JNINativeInterface_**,struct _jobject*,struct _jfieldID*);
     * }
     */
    public interface GetFloatField {

        float apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(GetFloatField fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(constants$42.const$3, fi, constants$42.const$2, scope);
        }
        static GetFloatField ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (float)constants$42.const$4.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle GetFloatField$VH() {
        return constants$42.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * float (*GetFloatField)(struct JNINativeInterface_**,struct _jobject*,struct _jfieldID*);
     * }
     */
    public static MemorySegment GetFloatField$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$42.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * float (*GetFloatField)(struct JNINativeInterface_**,struct _jobject*,struct _jfieldID*);
     * }
     */
    public static void GetFloatField$set(MemorySegment seg, MemorySegment x) {
        constants$42.const$5.set(seg, x);
    }
    public static MemorySegment GetFloatField$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$42.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void GetFloatField$set(MemorySegment seg, long index, MemorySegment x) {
        constants$42.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetFloatField GetFloatField(MemorySegment segment, SegmentScope scope) {
        return GetFloatField.ofAddress(GetFloatField$get(segment), scope);
    }
    /**
     * {@snippet :
 * double (*GetDoubleField)(struct JNINativeInterface_**,struct _jobject*,struct _jfieldID*);
     * }
     */
    public interface GetDoubleField {

        double apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(GetDoubleField fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(constants$43.const$1, fi, constants$43.const$0, scope);
        }
        static GetDoubleField ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (double)constants$43.const$2.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle GetDoubleField$VH() {
        return constants$43.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * double (*GetDoubleField)(struct JNINativeInterface_**,struct _jobject*,struct _jfieldID*);
     * }
     */
    public static MemorySegment GetDoubleField$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$43.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * double (*GetDoubleField)(struct JNINativeInterface_**,struct _jobject*,struct _jfieldID*);
     * }
     */
    public static void GetDoubleField$set(MemorySegment seg, MemorySegment x) {
        constants$43.const$3.set(seg, x);
    }
    public static MemorySegment GetDoubleField$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$43.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void GetDoubleField$set(MemorySegment seg, long index, MemorySegment x) {
        constants$43.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetDoubleField GetDoubleField(MemorySegment segment, SegmentScope scope) {
        return GetDoubleField.ofAddress(GetDoubleField$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*SetObjectField)(struct JNINativeInterface_**,struct _jobject*,struct _jfieldID*,struct _jobject*);
     * }
     */
    public interface SetObjectField {

        void apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3);
        static MemorySegment allocate(SetObjectField fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(constants$43.const$4, fi, constants$26.const$4, scope);
        }
        static SetObjectField ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3) -> {
                try {
                    constants$27.const$0.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle SetObjectField$VH() {
        return constants$43.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*SetObjectField)(struct JNINativeInterface_**,struct _jobject*,struct _jfieldID*,struct _jobject*);
     * }
     */
    public static MemorySegment SetObjectField$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$43.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*SetObjectField)(struct JNINativeInterface_**,struct _jobject*,struct _jfieldID*,struct _jobject*);
     * }
     */
    public static void SetObjectField$set(MemorySegment seg, MemorySegment x) {
        constants$43.const$5.set(seg, x);
    }
    public static MemorySegment SetObjectField$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$43.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void SetObjectField$set(MemorySegment seg, long index, MemorySegment x) {
        constants$43.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static SetObjectField SetObjectField(MemorySegment segment, SegmentScope scope) {
        return SetObjectField.ofAddress(SetObjectField$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*SetBooleanField)(struct JNINativeInterface_**,struct _jobject*,struct _jfieldID*,unsigned char);
     * }
     */
    public interface SetBooleanField {

        void apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, byte _x3);
        static MemorySegment allocate(SetBooleanField fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(constants$44.const$1, fi, constants$44.const$0, scope);
        }
        static SetBooleanField ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, byte __x3) -> {
                try {
                    constants$44.const$2.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle SetBooleanField$VH() {
        return constants$44.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*SetBooleanField)(struct JNINativeInterface_**,struct _jobject*,struct _jfieldID*,unsigned char);
     * }
     */
    public static MemorySegment SetBooleanField$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$44.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*SetBooleanField)(struct JNINativeInterface_**,struct _jobject*,struct _jfieldID*,unsigned char);
     * }
     */
    public static void SetBooleanField$set(MemorySegment seg, MemorySegment x) {
        constants$44.const$3.set(seg, x);
    }
    public static MemorySegment SetBooleanField$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$44.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void SetBooleanField$set(MemorySegment seg, long index, MemorySegment x) {
        constants$44.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static SetBooleanField SetBooleanField(MemorySegment segment, SegmentScope scope) {
        return SetBooleanField.ofAddress(SetBooleanField$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*SetByteField)(struct JNINativeInterface_**,struct _jobject*,struct _jfieldID*,signed char);
     * }
     */
    public interface SetByteField {

        void apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, byte _x3);
        static MemorySegment allocate(SetByteField fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(constants$44.const$4, fi, constants$44.const$0, scope);
        }
        static SetByteField ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, byte __x3) -> {
                try {
                    constants$44.const$2.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle SetByteField$VH() {
        return constants$44.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*SetByteField)(struct JNINativeInterface_**,struct _jobject*,struct _jfieldID*,signed char);
     * }
     */
    public static MemorySegment SetByteField$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$44.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*SetByteField)(struct JNINativeInterface_**,struct _jobject*,struct _jfieldID*,signed char);
     * }
     */
    public static void SetByteField$set(MemorySegment seg, MemorySegment x) {
        constants$44.const$5.set(seg, x);
    }
    public static MemorySegment SetByteField$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$44.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void SetByteField$set(MemorySegment seg, long index, MemorySegment x) {
        constants$44.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static SetByteField SetByteField(MemorySegment segment, SegmentScope scope) {
        return SetByteField.ofAddress(SetByteField$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*SetCharField)(struct JNINativeInterface_**,struct _jobject*,struct _jfieldID*,unsigned short);
     * }
     */
    public interface SetCharField {

        void apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, short _x3);
        static MemorySegment allocate(SetCharField fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(constants$45.const$1, fi, constants$45.const$0, scope);
        }
        static SetCharField ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, short __x3) -> {
                try {
                    constants$45.const$2.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle SetCharField$VH() {
        return constants$45.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*SetCharField)(struct JNINativeInterface_**,struct _jobject*,struct _jfieldID*,unsigned short);
     * }
     */
    public static MemorySegment SetCharField$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$45.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*SetCharField)(struct JNINativeInterface_**,struct _jobject*,struct _jfieldID*,unsigned short);
     * }
     */
    public static void SetCharField$set(MemorySegment seg, MemorySegment x) {
        constants$45.const$3.set(seg, x);
    }
    public static MemorySegment SetCharField$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$45.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void SetCharField$set(MemorySegment seg, long index, MemorySegment x) {
        constants$45.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static SetCharField SetCharField(MemorySegment segment, SegmentScope scope) {
        return SetCharField.ofAddress(SetCharField$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*SetShortField)(struct JNINativeInterface_**,struct _jobject*,struct _jfieldID*,short);
     * }
     */
    public interface SetShortField {

        void apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, short _x3);
        static MemorySegment allocate(SetShortField fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(constants$45.const$4, fi, constants$45.const$0, scope);
        }
        static SetShortField ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, short __x3) -> {
                try {
                    constants$45.const$2.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle SetShortField$VH() {
        return constants$45.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*SetShortField)(struct JNINativeInterface_**,struct _jobject*,struct _jfieldID*,short);
     * }
     */
    public static MemorySegment SetShortField$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$45.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*SetShortField)(struct JNINativeInterface_**,struct _jobject*,struct _jfieldID*,short);
     * }
     */
    public static void SetShortField$set(MemorySegment seg, MemorySegment x) {
        constants$45.const$5.set(seg, x);
    }
    public static MemorySegment SetShortField$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$45.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void SetShortField$set(MemorySegment seg, long index, MemorySegment x) {
        constants$45.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static SetShortField SetShortField(MemorySegment segment, SegmentScope scope) {
        return SetShortField.ofAddress(SetShortField$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*SetIntField)(struct JNINativeInterface_**,struct _jobject*,struct _jfieldID*,long);
     * }
     */
    public interface SetIntField {

        void apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, int _x3);
        static MemorySegment allocate(SetIntField fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(constants$46.const$1, fi, constants$46.const$0, scope);
        }
        static SetIntField ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, int __x3) -> {
                try {
                    constants$46.const$2.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle SetIntField$VH() {
        return constants$46.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*SetIntField)(struct JNINativeInterface_**,struct _jobject*,struct _jfieldID*,long);
     * }
     */
    public static MemorySegment SetIntField$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$46.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*SetIntField)(struct JNINativeInterface_**,struct _jobject*,struct _jfieldID*,long);
     * }
     */
    public static void SetIntField$set(MemorySegment seg, MemorySegment x) {
        constants$46.const$3.set(seg, x);
    }
    public static MemorySegment SetIntField$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$46.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void SetIntField$set(MemorySegment seg, long index, MemorySegment x) {
        constants$46.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static SetIntField SetIntField(MemorySegment segment, SegmentScope scope) {
        return SetIntField.ofAddress(SetIntField$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*SetLongField)(struct JNINativeInterface_**,struct _jobject*,struct _jfieldID*,long long);
     * }
     */
    public interface SetLongField {

        void apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, long _x3);
        static MemorySegment allocate(SetLongField fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(constants$46.const$5, fi, constants$46.const$4, scope);
        }
        static SetLongField ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, long __x3) -> {
                try {
                    constants$47.const$0.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle SetLongField$VH() {
        return constants$47.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*SetLongField)(struct JNINativeInterface_**,struct _jobject*,struct _jfieldID*,long long);
     * }
     */
    public static MemorySegment SetLongField$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$47.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*SetLongField)(struct JNINativeInterface_**,struct _jobject*,struct _jfieldID*,long long);
     * }
     */
    public static void SetLongField$set(MemorySegment seg, MemorySegment x) {
        constants$47.const$1.set(seg, x);
    }
    public static MemorySegment SetLongField$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$47.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void SetLongField$set(MemorySegment seg, long index, MemorySegment x) {
        constants$47.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static SetLongField SetLongField(MemorySegment segment, SegmentScope scope) {
        return SetLongField.ofAddress(SetLongField$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*SetFloatField)(struct JNINativeInterface_**,struct _jobject*,struct _jfieldID*,float);
     * }
     */
    public interface SetFloatField {

        void apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, float _x3);
        static MemorySegment allocate(SetFloatField fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(constants$47.const$3, fi, constants$47.const$2, scope);
        }
        static SetFloatField ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, float __x3) -> {
                try {
                    constants$47.const$4.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle SetFloatField$VH() {
        return constants$47.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*SetFloatField)(struct JNINativeInterface_**,struct _jobject*,struct _jfieldID*,float);
     * }
     */
    public static MemorySegment SetFloatField$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$47.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*SetFloatField)(struct JNINativeInterface_**,struct _jobject*,struct _jfieldID*,float);
     * }
     */
    public static void SetFloatField$set(MemorySegment seg, MemorySegment x) {
        constants$47.const$5.set(seg, x);
    }
    public static MemorySegment SetFloatField$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$47.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void SetFloatField$set(MemorySegment seg, long index, MemorySegment x) {
        constants$47.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static SetFloatField SetFloatField(MemorySegment segment, SegmentScope scope) {
        return SetFloatField.ofAddress(SetFloatField$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*SetDoubleField)(struct JNINativeInterface_**,struct _jobject*,struct _jfieldID*,double);
     * }
     */
    public interface SetDoubleField {

        void apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, double _x3);
        static MemorySegment allocate(SetDoubleField fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(constants$48.const$1, fi, constants$48.const$0, scope);
        }
        static SetDoubleField ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, double __x3) -> {
                try {
                    constants$48.const$2.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle SetDoubleField$VH() {
        return constants$48.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*SetDoubleField)(struct JNINativeInterface_**,struct _jobject*,struct _jfieldID*,double);
     * }
     */
    public static MemorySegment SetDoubleField$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$48.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*SetDoubleField)(struct JNINativeInterface_**,struct _jobject*,struct _jfieldID*,double);
     * }
     */
    public static void SetDoubleField$set(MemorySegment seg, MemorySegment x) {
        constants$48.const$3.set(seg, x);
    }
    public static MemorySegment SetDoubleField$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$48.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void SetDoubleField$set(MemorySegment seg, long index, MemorySegment x) {
        constants$48.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static SetDoubleField SetDoubleField(MemorySegment segment, SegmentScope scope) {
        return SetDoubleField.ofAddress(SetDoubleField$get(segment), scope);
    }
    /**
     * {@snippet :
 * struct _jmethodID* (*GetStaticMethodID)(struct JNINativeInterface_**,struct _jobject*,char*,char*);
     * }
     */
    public interface GetStaticMethodID {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3);
        static MemorySegment allocate(GetStaticMethodID fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(constants$48.const$4, fi, constants$15.const$0, scope);
        }
        static GetStaticMethodID ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$15.const$2.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle GetStaticMethodID$VH() {
        return constants$48.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * struct _jmethodID* (*GetStaticMethodID)(struct JNINativeInterface_**,struct _jobject*,char*,char*);
     * }
     */
    public static MemorySegment GetStaticMethodID$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$48.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * struct _jmethodID* (*GetStaticMethodID)(struct JNINativeInterface_**,struct _jobject*,char*,char*);
     * }
     */
    public static void GetStaticMethodID$set(MemorySegment seg, MemorySegment x) {
        constants$48.const$5.set(seg, x);
    }
    public static MemorySegment GetStaticMethodID$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$48.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void GetStaticMethodID$set(MemorySegment seg, long index, MemorySegment x) {
        constants$48.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetStaticMethodID GetStaticMethodID(MemorySegment segment, SegmentScope scope) {
        return GetStaticMethodID.ofAddress(GetStaticMethodID$get(segment), scope);
    }
    public static VarHandle CallStaticObjectMethod$VH() {
        return constants$49.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * struct _jobject* (*CallStaticObjectMethod)(struct JNINativeInterface_**,struct _jobject*,struct _jmethodID*);
     * }
     */
    public static MemorySegment CallStaticObjectMethod$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$49.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * struct _jobject* (*CallStaticObjectMethod)(struct JNINativeInterface_**,struct _jobject*,struct _jmethodID*);
     * }
     */
    public static void CallStaticObjectMethod$set(MemorySegment seg, MemorySegment x) {
        constants$49.const$0.set(seg, x);
    }
    public static MemorySegment CallStaticObjectMethod$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$49.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void CallStaticObjectMethod$set(MemorySegment seg, long index, MemorySegment x) {
        constants$49.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    /**
     * {@snippet :
 * struct _jobject* (*CallStaticObjectMethodV)(struct JNINativeInterface_**,struct _jobject*,struct _jmethodID*,char*);
     * }
     */
    public interface CallStaticObjectMethodV {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3);
        static MemorySegment allocate(CallStaticObjectMethodV fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(constants$49.const$1, fi, constants$15.const$0, scope);
        }
        static CallStaticObjectMethodV ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$15.const$2.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle CallStaticObjectMethodV$VH() {
        return constants$49.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * struct _jobject* (*CallStaticObjectMethodV)(struct JNINativeInterface_**,struct _jobject*,struct _jmethodID*,char*);
     * }
     */
    public static MemorySegment CallStaticObjectMethodV$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$49.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * struct _jobject* (*CallStaticObjectMethodV)(struct JNINativeInterface_**,struct _jobject*,struct _jmethodID*,char*);
     * }
     */
    public static void CallStaticObjectMethodV$set(MemorySegment seg, MemorySegment x) {
        constants$49.const$2.set(seg, x);
    }
    public static MemorySegment CallStaticObjectMethodV$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$49.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void CallStaticObjectMethodV$set(MemorySegment seg, long index, MemorySegment x) {
        constants$49.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static CallStaticObjectMethodV CallStaticObjectMethodV(MemorySegment segment, SegmentScope scope) {
        return CallStaticObjectMethodV.ofAddress(CallStaticObjectMethodV$get(segment), scope);
    }
    /**
     * {@snippet :
 * struct _jobject* (*CallStaticObjectMethodA)(struct JNINativeInterface_**,struct _jobject*,struct _jmethodID*,union jvalue*);
     * }
     */
    public interface CallStaticObjectMethodA {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3);
        static MemorySegment allocate(CallStaticObjectMethodA fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(constants$49.const$3, fi, constants$15.const$0, scope);
        }
        static CallStaticObjectMethodA ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$15.const$2.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle CallStaticObjectMethodA$VH() {
        return constants$49.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * struct _jobject* (*CallStaticObjectMethodA)(struct JNINativeInterface_**,struct _jobject*,struct _jmethodID*,union jvalue*);
     * }
     */
    public static MemorySegment CallStaticObjectMethodA$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$49.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * struct _jobject* (*CallStaticObjectMethodA)(struct JNINativeInterface_**,struct _jobject*,struct _jmethodID*,union jvalue*);
     * }
     */
    public static void CallStaticObjectMethodA$set(MemorySegment seg, MemorySegment x) {
        constants$49.const$4.set(seg, x);
    }
    public static MemorySegment CallStaticObjectMethodA$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$49.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void CallStaticObjectMethodA$set(MemorySegment seg, long index, MemorySegment x) {
        constants$49.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static CallStaticObjectMethodA CallStaticObjectMethodA(MemorySegment segment, SegmentScope scope) {
        return CallStaticObjectMethodA.ofAddress(CallStaticObjectMethodA$get(segment), scope);
    }
    public static VarHandle CallStaticBooleanMethod$VH() {
        return constants$49.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned char (*CallStaticBooleanMethod)(struct JNINativeInterface_**,struct _jobject*,struct _jmethodID*);
     * }
     */
    public static MemorySegment CallStaticBooleanMethod$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$49.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned char (*CallStaticBooleanMethod)(struct JNINativeInterface_**,struct _jobject*,struct _jmethodID*);
     * }
     */
    public static void CallStaticBooleanMethod$set(MemorySegment seg, MemorySegment x) {
        constants$49.const$5.set(seg, x);
    }
    public static MemorySegment CallStaticBooleanMethod$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$49.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void CallStaticBooleanMethod$set(MemorySegment seg, long index, MemorySegment x) {
        constants$49.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    /**
     * {@snippet :
 * unsigned char (*CallStaticBooleanMethodV)(struct JNINativeInterface_**,struct _jobject*,struct _jmethodID*,char*);
     * }
     */
    public interface CallStaticBooleanMethodV {

        byte apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3);
        static MemorySegment allocate(CallStaticBooleanMethodV fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(constants$50.const$0, fi, constants$18.const$0, scope);
        }
        static CallStaticBooleanMethodV ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3) -> {
                try {
                    return (byte)constants$18.const$2.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle CallStaticBooleanMethodV$VH() {
        return constants$50.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned char (*CallStaticBooleanMethodV)(struct JNINativeInterface_**,struct _jobject*,struct _jmethodID*,char*);
     * }
     */
    public static MemorySegment CallStaticBooleanMethodV$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$50.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned char (*CallStaticBooleanMethodV)(struct JNINativeInterface_**,struct _jobject*,struct _jmethodID*,char*);
     * }
     */
    public static void CallStaticBooleanMethodV$set(MemorySegment seg, MemorySegment x) {
        constants$50.const$1.set(seg, x);
    }
    public static MemorySegment CallStaticBooleanMethodV$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$50.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void CallStaticBooleanMethodV$set(MemorySegment seg, long index, MemorySegment x) {
        constants$50.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static CallStaticBooleanMethodV CallStaticBooleanMethodV(MemorySegment segment, SegmentScope scope) {
        return CallStaticBooleanMethodV.ofAddress(CallStaticBooleanMethodV$get(segment), scope);
    }
    /**
     * {@snippet :
 * unsigned char (*CallStaticBooleanMethodA)(struct JNINativeInterface_**,struct _jobject*,struct _jmethodID*,union jvalue*);
     * }
     */
    public interface CallStaticBooleanMethodA {

        byte apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3);
        static MemorySegment allocate(CallStaticBooleanMethodA fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(constants$50.const$2, fi, constants$18.const$0, scope);
        }
        static CallStaticBooleanMethodA ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3) -> {
                try {
                    return (byte)constants$18.const$2.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle CallStaticBooleanMethodA$VH() {
        return constants$50.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned char (*CallStaticBooleanMethodA)(struct JNINativeInterface_**,struct _jobject*,struct _jmethodID*,union jvalue*);
     * }
     */
    public static MemorySegment CallStaticBooleanMethodA$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$50.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned char (*CallStaticBooleanMethodA)(struct JNINativeInterface_**,struct _jobject*,struct _jmethodID*,union jvalue*);
     * }
     */
    public static void CallStaticBooleanMethodA$set(MemorySegment seg, MemorySegment x) {
        constants$50.const$3.set(seg, x);
    }
    public static MemorySegment CallStaticBooleanMethodA$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$50.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void CallStaticBooleanMethodA$set(MemorySegment seg, long index, MemorySegment x) {
        constants$50.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static CallStaticBooleanMethodA CallStaticBooleanMethodA(MemorySegment segment, SegmentScope scope) {
        return CallStaticBooleanMethodA.ofAddress(CallStaticBooleanMethodA$get(segment), scope);
    }
    public static VarHandle CallStaticByteMethod$VH() {
        return constants$50.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * signed char (*CallStaticByteMethod)(struct JNINativeInterface_**,struct _jobject*,struct _jmethodID*);
     * }
     */
    public static MemorySegment CallStaticByteMethod$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$50.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * signed char (*CallStaticByteMethod)(struct JNINativeInterface_**,struct _jobject*,struct _jmethodID*);
     * }
     */
    public static void CallStaticByteMethod$set(MemorySegment seg, MemorySegment x) {
        constants$50.const$4.set(seg, x);
    }
    public static MemorySegment CallStaticByteMethod$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$50.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void CallStaticByteMethod$set(MemorySegment seg, long index, MemorySegment x) {
        constants$50.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    /**
     * {@snippet :
 * signed char (*CallStaticByteMethodV)(struct JNINativeInterface_**,struct _jobject*,struct _jmethodID*,char*);
     * }
     */
    public interface CallStaticByteMethodV {

        byte apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3);
        static MemorySegment allocate(CallStaticByteMethodV fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(constants$50.const$5, fi, constants$18.const$0, scope);
        }
        static CallStaticByteMethodV ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3) -> {
                try {
                    return (byte)constants$18.const$2.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle CallStaticByteMethodV$VH() {
        return constants$51.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * signed char (*CallStaticByteMethodV)(struct JNINativeInterface_**,struct _jobject*,struct _jmethodID*,char*);
     * }
     */
    public static MemorySegment CallStaticByteMethodV$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$51.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * signed char (*CallStaticByteMethodV)(struct JNINativeInterface_**,struct _jobject*,struct _jmethodID*,char*);
     * }
     */
    public static void CallStaticByteMethodV$set(MemorySegment seg, MemorySegment x) {
        constants$51.const$0.set(seg, x);
    }
    public static MemorySegment CallStaticByteMethodV$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$51.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void CallStaticByteMethodV$set(MemorySegment seg, long index, MemorySegment x) {
        constants$51.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static CallStaticByteMethodV CallStaticByteMethodV(MemorySegment segment, SegmentScope scope) {
        return CallStaticByteMethodV.ofAddress(CallStaticByteMethodV$get(segment), scope);
    }
    /**
     * {@snippet :
 * signed char (*CallStaticByteMethodA)(struct JNINativeInterface_**,struct _jobject*,struct _jmethodID*,union jvalue*);
     * }
     */
    public interface CallStaticByteMethodA {

        byte apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3);
        static MemorySegment allocate(CallStaticByteMethodA fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(constants$51.const$1, fi, constants$18.const$0, scope);
        }
        static CallStaticByteMethodA ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3) -> {
                try {
                    return (byte)constants$18.const$2.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle CallStaticByteMethodA$VH() {
        return constants$51.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * signed char (*CallStaticByteMethodA)(struct JNINativeInterface_**,struct _jobject*,struct _jmethodID*,union jvalue*);
     * }
     */
    public static MemorySegment CallStaticByteMethodA$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$51.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * signed char (*CallStaticByteMethodA)(struct JNINativeInterface_**,struct _jobject*,struct _jmethodID*,union jvalue*);
     * }
     */
    public static void CallStaticByteMethodA$set(MemorySegment seg, MemorySegment x) {
        constants$51.const$2.set(seg, x);
    }
    public static MemorySegment CallStaticByteMethodA$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$51.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void CallStaticByteMethodA$set(MemorySegment seg, long index, MemorySegment x) {
        constants$51.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static CallStaticByteMethodA CallStaticByteMethodA(MemorySegment segment, SegmentScope scope) {
        return CallStaticByteMethodA.ofAddress(CallStaticByteMethodA$get(segment), scope);
    }
    public static VarHandle CallStaticCharMethod$VH() {
        return constants$51.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned short (*CallStaticCharMethod)(struct JNINativeInterface_**,struct _jobject*,struct _jmethodID*);
     * }
     */
    public static MemorySegment CallStaticCharMethod$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$51.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned short (*CallStaticCharMethod)(struct JNINativeInterface_**,struct _jobject*,struct _jmethodID*);
     * }
     */
    public static void CallStaticCharMethod$set(MemorySegment seg, MemorySegment x) {
        constants$51.const$3.set(seg, x);
    }
    public static MemorySegment CallStaticCharMethod$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$51.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void CallStaticCharMethod$set(MemorySegment seg, long index, MemorySegment x) {
        constants$51.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    /**
     * {@snippet :
 * unsigned short (*CallStaticCharMethodV)(struct JNINativeInterface_**,struct _jobject*,struct _jmethodID*,char*);
     * }
     */
    public interface CallStaticCharMethodV {

        short apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3);
        static MemorySegment allocate(CallStaticCharMethodV fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(constants$51.const$4, fi, constants$20.const$0, scope);
        }
        static CallStaticCharMethodV ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3) -> {
                try {
                    return (short)constants$20.const$2.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle CallStaticCharMethodV$VH() {
        return constants$51.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned short (*CallStaticCharMethodV)(struct JNINativeInterface_**,struct _jobject*,struct _jmethodID*,char*);
     * }
     */
    public static MemorySegment CallStaticCharMethodV$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$51.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned short (*CallStaticCharMethodV)(struct JNINativeInterface_**,struct _jobject*,struct _jmethodID*,char*);
     * }
     */
    public static void CallStaticCharMethodV$set(MemorySegment seg, MemorySegment x) {
        constants$51.const$5.set(seg, x);
    }
    public static MemorySegment CallStaticCharMethodV$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$51.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void CallStaticCharMethodV$set(MemorySegment seg, long index, MemorySegment x) {
        constants$51.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static CallStaticCharMethodV CallStaticCharMethodV(MemorySegment segment, SegmentScope scope) {
        return CallStaticCharMethodV.ofAddress(CallStaticCharMethodV$get(segment), scope);
    }
    /**
     * {@snippet :
 * unsigned short (*CallStaticCharMethodA)(struct JNINativeInterface_**,struct _jobject*,struct _jmethodID*,union jvalue*);
     * }
     */
    public interface CallStaticCharMethodA {

        short apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3);
        static MemorySegment allocate(CallStaticCharMethodA fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(constants$52.const$0, fi, constants$20.const$0, scope);
        }
        static CallStaticCharMethodA ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3) -> {
                try {
                    return (short)constants$20.const$2.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle CallStaticCharMethodA$VH() {
        return constants$52.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned short (*CallStaticCharMethodA)(struct JNINativeInterface_**,struct _jobject*,struct _jmethodID*,union jvalue*);
     * }
     */
    public static MemorySegment CallStaticCharMethodA$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$52.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned short (*CallStaticCharMethodA)(struct JNINativeInterface_**,struct _jobject*,struct _jmethodID*,union jvalue*);
     * }
     */
    public static void CallStaticCharMethodA$set(MemorySegment seg, MemorySegment x) {
        constants$52.const$1.set(seg, x);
    }
    public static MemorySegment CallStaticCharMethodA$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$52.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void CallStaticCharMethodA$set(MemorySegment seg, long index, MemorySegment x) {
        constants$52.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static CallStaticCharMethodA CallStaticCharMethodA(MemorySegment segment, SegmentScope scope) {
        return CallStaticCharMethodA.ofAddress(CallStaticCharMethodA$get(segment), scope);
    }
    public static VarHandle CallStaticShortMethod$VH() {
        return constants$52.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * short (*CallStaticShortMethod)(struct JNINativeInterface_**,struct _jobject*,struct _jmethodID*);
     * }
     */
    public static MemorySegment CallStaticShortMethod$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$52.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * short (*CallStaticShortMethod)(struct JNINativeInterface_**,struct _jobject*,struct _jmethodID*);
     * }
     */
    public static void CallStaticShortMethod$set(MemorySegment seg, MemorySegment x) {
        constants$52.const$2.set(seg, x);
    }
    public static MemorySegment CallStaticShortMethod$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$52.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void CallStaticShortMethod$set(MemorySegment seg, long index, MemorySegment x) {
        constants$52.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    /**
     * {@snippet :
 * short (*CallStaticShortMethodV)(struct JNINativeInterface_**,struct _jobject*,struct _jmethodID*,char*);
     * }
     */
    public interface CallStaticShortMethodV {

        short apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3);
        static MemorySegment allocate(CallStaticShortMethodV fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(constants$52.const$3, fi, constants$20.const$0, scope);
        }
        static CallStaticShortMethodV ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3) -> {
                try {
                    return (short)constants$20.const$2.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle CallStaticShortMethodV$VH() {
        return constants$52.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * short (*CallStaticShortMethodV)(struct JNINativeInterface_**,struct _jobject*,struct _jmethodID*,char*);
     * }
     */
    public static MemorySegment CallStaticShortMethodV$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$52.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * short (*CallStaticShortMethodV)(struct JNINativeInterface_**,struct _jobject*,struct _jmethodID*,char*);
     * }
     */
    public static void CallStaticShortMethodV$set(MemorySegment seg, MemorySegment x) {
        constants$52.const$4.set(seg, x);
    }
    public static MemorySegment CallStaticShortMethodV$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$52.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void CallStaticShortMethodV$set(MemorySegment seg, long index, MemorySegment x) {
        constants$52.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static CallStaticShortMethodV CallStaticShortMethodV(MemorySegment segment, SegmentScope scope) {
        return CallStaticShortMethodV.ofAddress(CallStaticShortMethodV$get(segment), scope);
    }
    /**
     * {@snippet :
 * short (*CallStaticShortMethodA)(struct JNINativeInterface_**,struct _jobject*,struct _jmethodID*,union jvalue*);
     * }
     */
    public interface CallStaticShortMethodA {

        short apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3);
        static MemorySegment allocate(CallStaticShortMethodA fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(constants$52.const$5, fi, constants$20.const$0, scope);
        }
        static CallStaticShortMethodA ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3) -> {
                try {
                    return (short)constants$20.const$2.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle CallStaticShortMethodA$VH() {
        return constants$53.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * short (*CallStaticShortMethodA)(struct JNINativeInterface_**,struct _jobject*,struct _jmethodID*,union jvalue*);
     * }
     */
    public static MemorySegment CallStaticShortMethodA$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$53.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * short (*CallStaticShortMethodA)(struct JNINativeInterface_**,struct _jobject*,struct _jmethodID*,union jvalue*);
     * }
     */
    public static void CallStaticShortMethodA$set(MemorySegment seg, MemorySegment x) {
        constants$53.const$0.set(seg, x);
    }
    public static MemorySegment CallStaticShortMethodA$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$53.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void CallStaticShortMethodA$set(MemorySegment seg, long index, MemorySegment x) {
        constants$53.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static CallStaticShortMethodA CallStaticShortMethodA(MemorySegment segment, SegmentScope scope) {
        return CallStaticShortMethodA.ofAddress(CallStaticShortMethodA$get(segment), scope);
    }
    public static VarHandle CallStaticIntMethod$VH() {
        return constants$53.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * long (*CallStaticIntMethod)(struct JNINativeInterface_**,struct _jobject*,struct _jmethodID*);
     * }
     */
    public static MemorySegment CallStaticIntMethod$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$53.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * long (*CallStaticIntMethod)(struct JNINativeInterface_**,struct _jobject*,struct _jmethodID*);
     * }
     */
    public static void CallStaticIntMethod$set(MemorySegment seg, MemorySegment x) {
        constants$53.const$1.set(seg, x);
    }
    public static MemorySegment CallStaticIntMethod$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$53.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void CallStaticIntMethod$set(MemorySegment seg, long index, MemorySegment x) {
        constants$53.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    /**
     * {@snippet :
 * long (*CallStaticIntMethodV)(struct JNINativeInterface_**,struct _jobject*,struct _jmethodID*,char*);
     * }
     */
    public interface CallStaticIntMethodV {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3);
        static MemorySegment allocate(CallStaticIntMethodV fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(constants$53.const$2, fi, constants$22.const$0, scope);
        }
        static CallStaticIntMethodV ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3) -> {
                try {
                    return (int)constants$22.const$2.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle CallStaticIntMethodV$VH() {
        return constants$53.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * long (*CallStaticIntMethodV)(struct JNINativeInterface_**,struct _jobject*,struct _jmethodID*,char*);
     * }
     */
    public static MemorySegment CallStaticIntMethodV$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$53.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * long (*CallStaticIntMethodV)(struct JNINativeInterface_**,struct _jobject*,struct _jmethodID*,char*);
     * }
     */
    public static void CallStaticIntMethodV$set(MemorySegment seg, MemorySegment x) {
        constants$53.const$3.set(seg, x);
    }
    public static MemorySegment CallStaticIntMethodV$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$53.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void CallStaticIntMethodV$set(MemorySegment seg, long index, MemorySegment x) {
        constants$53.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static CallStaticIntMethodV CallStaticIntMethodV(MemorySegment segment, SegmentScope scope) {
        return CallStaticIntMethodV.ofAddress(CallStaticIntMethodV$get(segment), scope);
    }
    /**
     * {@snippet :
 * long (*CallStaticIntMethodA)(struct JNINativeInterface_**,struct _jobject*,struct _jmethodID*,union jvalue*);
     * }
     */
    public interface CallStaticIntMethodA {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3);
        static MemorySegment allocate(CallStaticIntMethodA fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(constants$53.const$4, fi, constants$22.const$0, scope);
        }
        static CallStaticIntMethodA ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3) -> {
                try {
                    return (int)constants$22.const$2.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle CallStaticIntMethodA$VH() {
        return constants$53.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * long (*CallStaticIntMethodA)(struct JNINativeInterface_**,struct _jobject*,struct _jmethodID*,union jvalue*);
     * }
     */
    public static MemorySegment CallStaticIntMethodA$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$53.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * long (*CallStaticIntMethodA)(struct JNINativeInterface_**,struct _jobject*,struct _jmethodID*,union jvalue*);
     * }
     */
    public static void CallStaticIntMethodA$set(MemorySegment seg, MemorySegment x) {
        constants$53.const$5.set(seg, x);
    }
    public static MemorySegment CallStaticIntMethodA$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$53.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void CallStaticIntMethodA$set(MemorySegment seg, long index, MemorySegment x) {
        constants$53.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static CallStaticIntMethodA CallStaticIntMethodA(MemorySegment segment, SegmentScope scope) {
        return CallStaticIntMethodA.ofAddress(CallStaticIntMethodA$get(segment), scope);
    }
    public static VarHandle CallStaticLongMethod$VH() {
        return constants$54.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * long long (*CallStaticLongMethod)(struct JNINativeInterface_**,struct _jobject*,struct _jmethodID*);
     * }
     */
    public static MemorySegment CallStaticLongMethod$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$54.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * long long (*CallStaticLongMethod)(struct JNINativeInterface_**,struct _jobject*,struct _jmethodID*);
     * }
     */
    public static void CallStaticLongMethod$set(MemorySegment seg, MemorySegment x) {
        constants$54.const$0.set(seg, x);
    }
    public static MemorySegment CallStaticLongMethod$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$54.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void CallStaticLongMethod$set(MemorySegment seg, long index, MemorySegment x) {
        constants$54.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    /**
     * {@snippet :
 * long long (*CallStaticLongMethodV)(struct JNINativeInterface_**,struct _jobject*,struct _jmethodID*,char*);
     * }
     */
    public interface CallStaticLongMethodV {

        long apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3);
        static MemorySegment allocate(CallStaticLongMethodV fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(constants$54.const$1, fi, constants$23.const$1, scope);
        }
        static CallStaticLongMethodV ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3) -> {
                try {
                    return (long)constants$23.const$3.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle CallStaticLongMethodV$VH() {
        return constants$54.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * long long (*CallStaticLongMethodV)(struct JNINativeInterface_**,struct _jobject*,struct _jmethodID*,char*);
     * }
     */
    public static MemorySegment CallStaticLongMethodV$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$54.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * long long (*CallStaticLongMethodV)(struct JNINativeInterface_**,struct _jobject*,struct _jmethodID*,char*);
     * }
     */
    public static void CallStaticLongMethodV$set(MemorySegment seg, MemorySegment x) {
        constants$54.const$2.set(seg, x);
    }
    public static MemorySegment CallStaticLongMethodV$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$54.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void CallStaticLongMethodV$set(MemorySegment seg, long index, MemorySegment x) {
        constants$54.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static CallStaticLongMethodV CallStaticLongMethodV(MemorySegment segment, SegmentScope scope) {
        return CallStaticLongMethodV.ofAddress(CallStaticLongMethodV$get(segment), scope);
    }
    /**
     * {@snippet :
 * long long (*CallStaticLongMethodA)(struct JNINativeInterface_**,struct _jobject*,struct _jmethodID*,union jvalue*);
     * }
     */
    public interface CallStaticLongMethodA {

        long apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3);
        static MemorySegment allocate(CallStaticLongMethodA fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(constants$54.const$3, fi, constants$23.const$1, scope);
        }
        static CallStaticLongMethodA ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3) -> {
                try {
                    return (long)constants$23.const$3.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle CallStaticLongMethodA$VH() {
        return constants$54.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * long long (*CallStaticLongMethodA)(struct JNINativeInterface_**,struct _jobject*,struct _jmethodID*,union jvalue*);
     * }
     */
    public static MemorySegment CallStaticLongMethodA$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$54.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * long long (*CallStaticLongMethodA)(struct JNINativeInterface_**,struct _jobject*,struct _jmethodID*,union jvalue*);
     * }
     */
    public static void CallStaticLongMethodA$set(MemorySegment seg, MemorySegment x) {
        constants$54.const$4.set(seg, x);
    }
    public static MemorySegment CallStaticLongMethodA$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$54.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void CallStaticLongMethodA$set(MemorySegment seg, long index, MemorySegment x) {
        constants$54.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static CallStaticLongMethodA CallStaticLongMethodA(MemorySegment segment, SegmentScope scope) {
        return CallStaticLongMethodA.ofAddress(CallStaticLongMethodA$get(segment), scope);
    }
    public static VarHandle CallStaticFloatMethod$VH() {
        return constants$54.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * float (*CallStaticFloatMethod)(struct JNINativeInterface_**,struct _jobject*,struct _jmethodID*);
     * }
     */
    public static MemorySegment CallStaticFloatMethod$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$54.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * float (*CallStaticFloatMethod)(struct JNINativeInterface_**,struct _jobject*,struct _jmethodID*);
     * }
     */
    public static void CallStaticFloatMethod$set(MemorySegment seg, MemorySegment x) {
        constants$54.const$5.set(seg, x);
    }
    public static MemorySegment CallStaticFloatMethod$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$54.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void CallStaticFloatMethod$set(MemorySegment seg, long index, MemorySegment x) {
        constants$54.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    /**
     * {@snippet :
 * float (*CallStaticFloatMethodV)(struct JNINativeInterface_**,struct _jobject*,struct _jmethodID*,char*);
     * }
     */
    public interface CallStaticFloatMethodV {

        float apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3);
        static MemorySegment allocate(CallStaticFloatMethodV fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(constants$55.const$0, fi, constants$24.const$2, scope);
        }
        static CallStaticFloatMethodV ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3) -> {
                try {
                    return (float)constants$24.const$4.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle CallStaticFloatMethodV$VH() {
        return constants$55.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * float (*CallStaticFloatMethodV)(struct JNINativeInterface_**,struct _jobject*,struct _jmethodID*,char*);
     * }
     */
    public static MemorySegment CallStaticFloatMethodV$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$55.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * float (*CallStaticFloatMethodV)(struct JNINativeInterface_**,struct _jobject*,struct _jmethodID*,char*);
     * }
     */
    public static void CallStaticFloatMethodV$set(MemorySegment seg, MemorySegment x) {
        constants$55.const$1.set(seg, x);
    }
    public static MemorySegment CallStaticFloatMethodV$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$55.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void CallStaticFloatMethodV$set(MemorySegment seg, long index, MemorySegment x) {
        constants$55.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static CallStaticFloatMethodV CallStaticFloatMethodV(MemorySegment segment, SegmentScope scope) {
        return CallStaticFloatMethodV.ofAddress(CallStaticFloatMethodV$get(segment), scope);
    }
    /**
     * {@snippet :
 * float (*CallStaticFloatMethodA)(struct JNINativeInterface_**,struct _jobject*,struct _jmethodID*,union jvalue*);
     * }
     */
    public interface CallStaticFloatMethodA {

        float apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3);
        static MemorySegment allocate(CallStaticFloatMethodA fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(constants$55.const$2, fi, constants$24.const$2, scope);
        }
        static CallStaticFloatMethodA ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3) -> {
                try {
                    return (float)constants$24.const$4.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle CallStaticFloatMethodA$VH() {
        return constants$55.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * float (*CallStaticFloatMethodA)(struct JNINativeInterface_**,struct _jobject*,struct _jmethodID*,union jvalue*);
     * }
     */
    public static MemorySegment CallStaticFloatMethodA$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$55.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * float (*CallStaticFloatMethodA)(struct JNINativeInterface_**,struct _jobject*,struct _jmethodID*,union jvalue*);
     * }
     */
    public static void CallStaticFloatMethodA$set(MemorySegment seg, MemorySegment x) {
        constants$55.const$3.set(seg, x);
    }
    public static MemorySegment CallStaticFloatMethodA$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$55.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void CallStaticFloatMethodA$set(MemorySegment seg, long index, MemorySegment x) {
        constants$55.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static CallStaticFloatMethodA CallStaticFloatMethodA(MemorySegment segment, SegmentScope scope) {
        return CallStaticFloatMethodA.ofAddress(CallStaticFloatMethodA$get(segment), scope);
    }
    public static VarHandle CallStaticDoubleMethod$VH() {
        return constants$55.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * double (*CallStaticDoubleMethod)(struct JNINativeInterface_**,struct _jobject*,struct _jmethodID*);
     * }
     */
    public static MemorySegment CallStaticDoubleMethod$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$55.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * double (*CallStaticDoubleMethod)(struct JNINativeInterface_**,struct _jobject*,struct _jmethodID*);
     * }
     */
    public static void CallStaticDoubleMethod$set(MemorySegment seg, MemorySegment x) {
        constants$55.const$4.set(seg, x);
    }
    public static MemorySegment CallStaticDoubleMethod$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$55.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void CallStaticDoubleMethod$set(MemorySegment seg, long index, MemorySegment x) {
        constants$55.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    /**
     * {@snippet :
 * double (*CallStaticDoubleMethodV)(struct JNINativeInterface_**,struct _jobject*,struct _jmethodID*,char*);
     * }
     */
    public interface CallStaticDoubleMethodV {

        double apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3);
        static MemorySegment allocate(CallStaticDoubleMethodV fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(constants$55.const$5, fi, constants$25.const$3, scope);
        }
        static CallStaticDoubleMethodV ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3) -> {
                try {
                    return (double)constants$25.const$5.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle CallStaticDoubleMethodV$VH() {
        return constants$56.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * double (*CallStaticDoubleMethodV)(struct JNINativeInterface_**,struct _jobject*,struct _jmethodID*,char*);
     * }
     */
    public static MemorySegment CallStaticDoubleMethodV$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$56.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * double (*CallStaticDoubleMethodV)(struct JNINativeInterface_**,struct _jobject*,struct _jmethodID*,char*);
     * }
     */
    public static void CallStaticDoubleMethodV$set(MemorySegment seg, MemorySegment x) {
        constants$56.const$0.set(seg, x);
    }
    public static MemorySegment CallStaticDoubleMethodV$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$56.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void CallStaticDoubleMethodV$set(MemorySegment seg, long index, MemorySegment x) {
        constants$56.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static CallStaticDoubleMethodV CallStaticDoubleMethodV(MemorySegment segment, SegmentScope scope) {
        return CallStaticDoubleMethodV.ofAddress(CallStaticDoubleMethodV$get(segment), scope);
    }
    /**
     * {@snippet :
 * double (*CallStaticDoubleMethodA)(struct JNINativeInterface_**,struct _jobject*,struct _jmethodID*,union jvalue*);
     * }
     */
    public interface CallStaticDoubleMethodA {

        double apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3);
        static MemorySegment allocate(CallStaticDoubleMethodA fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(constants$56.const$1, fi, constants$25.const$3, scope);
        }
        static CallStaticDoubleMethodA ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3) -> {
                try {
                    return (double)constants$25.const$5.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle CallStaticDoubleMethodA$VH() {
        return constants$56.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * double (*CallStaticDoubleMethodA)(struct JNINativeInterface_**,struct _jobject*,struct _jmethodID*,union jvalue*);
     * }
     */
    public static MemorySegment CallStaticDoubleMethodA$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$56.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * double (*CallStaticDoubleMethodA)(struct JNINativeInterface_**,struct _jobject*,struct _jmethodID*,union jvalue*);
     * }
     */
    public static void CallStaticDoubleMethodA$set(MemorySegment seg, MemorySegment x) {
        constants$56.const$2.set(seg, x);
    }
    public static MemorySegment CallStaticDoubleMethodA$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$56.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void CallStaticDoubleMethodA$set(MemorySegment seg, long index, MemorySegment x) {
        constants$56.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static CallStaticDoubleMethodA CallStaticDoubleMethodA(MemorySegment segment, SegmentScope scope) {
        return CallStaticDoubleMethodA.ofAddress(CallStaticDoubleMethodA$get(segment), scope);
    }
    public static VarHandle CallStaticVoidMethod$VH() {
        return constants$56.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*CallStaticVoidMethod)(struct JNINativeInterface_**,struct _jobject*,struct _jmethodID*);
     * }
     */
    public static MemorySegment CallStaticVoidMethod$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$56.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*CallStaticVoidMethod)(struct JNINativeInterface_**,struct _jobject*,struct _jmethodID*);
     * }
     */
    public static void CallStaticVoidMethod$set(MemorySegment seg, MemorySegment x) {
        constants$56.const$3.set(seg, x);
    }
    public static MemorySegment CallStaticVoidMethod$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$56.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void CallStaticVoidMethod$set(MemorySegment seg, long index, MemorySegment x) {
        constants$56.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    /**
     * {@snippet :
 * void (*CallStaticVoidMethodV)(struct JNINativeInterface_**,struct _jobject*,struct _jmethodID*,char*);
     * }
     */
    public interface CallStaticVoidMethodV {

        void apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3);
        static MemorySegment allocate(CallStaticVoidMethodV fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(constants$56.const$4, fi, constants$26.const$4, scope);
        }
        static CallStaticVoidMethodV ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3) -> {
                try {
                    constants$27.const$0.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle CallStaticVoidMethodV$VH() {
        return constants$56.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*CallStaticVoidMethodV)(struct JNINativeInterface_**,struct _jobject*,struct _jmethodID*,char*);
     * }
     */
    public static MemorySegment CallStaticVoidMethodV$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$56.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*CallStaticVoidMethodV)(struct JNINativeInterface_**,struct _jobject*,struct _jmethodID*,char*);
     * }
     */
    public static void CallStaticVoidMethodV$set(MemorySegment seg, MemorySegment x) {
        constants$56.const$5.set(seg, x);
    }
    public static MemorySegment CallStaticVoidMethodV$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$56.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void CallStaticVoidMethodV$set(MemorySegment seg, long index, MemorySegment x) {
        constants$56.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static CallStaticVoidMethodV CallStaticVoidMethodV(MemorySegment segment, SegmentScope scope) {
        return CallStaticVoidMethodV.ofAddress(CallStaticVoidMethodV$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*CallStaticVoidMethodA)(struct JNINativeInterface_**,struct _jobject*,struct _jmethodID*,union jvalue*);
     * }
     */
    public interface CallStaticVoidMethodA {

        void apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3);
        static MemorySegment allocate(CallStaticVoidMethodA fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(constants$57.const$0, fi, constants$26.const$4, scope);
        }
        static CallStaticVoidMethodA ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3) -> {
                try {
                    constants$27.const$0.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle CallStaticVoidMethodA$VH() {
        return constants$57.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*CallStaticVoidMethodA)(struct JNINativeInterface_**,struct _jobject*,struct _jmethodID*,union jvalue*);
     * }
     */
    public static MemorySegment CallStaticVoidMethodA$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$57.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*CallStaticVoidMethodA)(struct JNINativeInterface_**,struct _jobject*,struct _jmethodID*,union jvalue*);
     * }
     */
    public static void CallStaticVoidMethodA$set(MemorySegment seg, MemorySegment x) {
        constants$57.const$1.set(seg, x);
    }
    public static MemorySegment CallStaticVoidMethodA$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$57.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void CallStaticVoidMethodA$set(MemorySegment seg, long index, MemorySegment x) {
        constants$57.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static CallStaticVoidMethodA CallStaticVoidMethodA(MemorySegment segment, SegmentScope scope) {
        return CallStaticVoidMethodA.ofAddress(CallStaticVoidMethodA$get(segment), scope);
    }
    /**
     * {@snippet :
 * struct _jfieldID* (*GetStaticFieldID)(struct JNINativeInterface_**,struct _jobject*,char*,char*);
     * }
     */
    public interface GetStaticFieldID {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3);
        static MemorySegment allocate(GetStaticFieldID fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(constants$57.const$2, fi, constants$15.const$0, scope);
        }
        static GetStaticFieldID ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$15.const$2.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle GetStaticFieldID$VH() {
        return constants$57.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * struct _jfieldID* (*GetStaticFieldID)(struct JNINativeInterface_**,struct _jobject*,char*,char*);
     * }
     */
    public static MemorySegment GetStaticFieldID$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$57.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * struct _jfieldID* (*GetStaticFieldID)(struct JNINativeInterface_**,struct _jobject*,char*,char*);
     * }
     */
    public static void GetStaticFieldID$set(MemorySegment seg, MemorySegment x) {
        constants$57.const$3.set(seg, x);
    }
    public static MemorySegment GetStaticFieldID$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$57.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void GetStaticFieldID$set(MemorySegment seg, long index, MemorySegment x) {
        constants$57.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetStaticFieldID GetStaticFieldID(MemorySegment segment, SegmentScope scope) {
        return GetStaticFieldID.ofAddress(GetStaticFieldID$get(segment), scope);
    }
    /**
     * {@snippet :
 * struct _jobject* (*GetStaticObjectField)(struct JNINativeInterface_**,struct _jobject*,struct _jfieldID*);
     * }
     */
    public interface GetStaticObjectField {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(GetStaticObjectField fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(constants$57.const$4, fi, constants$39.const$0, scope);
        }
        static GetStaticObjectField ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$39.const$2.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle GetStaticObjectField$VH() {
        return constants$57.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * struct _jobject* (*GetStaticObjectField)(struct JNINativeInterface_**,struct _jobject*,struct _jfieldID*);
     * }
     */
    public static MemorySegment GetStaticObjectField$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$57.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * struct _jobject* (*GetStaticObjectField)(struct JNINativeInterface_**,struct _jobject*,struct _jfieldID*);
     * }
     */
    public static void GetStaticObjectField$set(MemorySegment seg, MemorySegment x) {
        constants$57.const$5.set(seg, x);
    }
    public static MemorySegment GetStaticObjectField$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$57.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void GetStaticObjectField$set(MemorySegment seg, long index, MemorySegment x) {
        constants$57.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetStaticObjectField GetStaticObjectField(MemorySegment segment, SegmentScope scope) {
        return GetStaticObjectField.ofAddress(GetStaticObjectField$get(segment), scope);
    }
    /**
     * {@snippet :
 * unsigned char (*GetStaticBooleanField)(struct JNINativeInterface_**,struct _jobject*,struct _jfieldID*);
     * }
     */
    public interface GetStaticBooleanField {

        byte apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(GetStaticBooleanField fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(constants$58.const$0, fi, constants$6.const$5, scope);
        }
        static GetStaticBooleanField ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (byte)constants$7.const$1.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle GetStaticBooleanField$VH() {
        return constants$58.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned char (*GetStaticBooleanField)(struct JNINativeInterface_**,struct _jobject*,struct _jfieldID*);
     * }
     */
    public static MemorySegment GetStaticBooleanField$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$58.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned char (*GetStaticBooleanField)(struct JNINativeInterface_**,struct _jobject*,struct _jfieldID*);
     * }
     */
    public static void GetStaticBooleanField$set(MemorySegment seg, MemorySegment x) {
        constants$58.const$1.set(seg, x);
    }
    public static MemorySegment GetStaticBooleanField$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$58.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void GetStaticBooleanField$set(MemorySegment seg, long index, MemorySegment x) {
        constants$58.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetStaticBooleanField GetStaticBooleanField(MemorySegment segment, SegmentScope scope) {
        return GetStaticBooleanField.ofAddress(GetStaticBooleanField$get(segment), scope);
    }
    /**
     * {@snippet :
 * signed char (*GetStaticByteField)(struct JNINativeInterface_**,struct _jobject*,struct _jfieldID*);
     * }
     */
    public interface GetStaticByteField {

        byte apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(GetStaticByteField fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(constants$58.const$2, fi, constants$6.const$5, scope);
        }
        static GetStaticByteField ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (byte)constants$7.const$1.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle GetStaticByteField$VH() {
        return constants$58.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * signed char (*GetStaticByteField)(struct JNINativeInterface_**,struct _jobject*,struct _jfieldID*);
     * }
     */
    public static MemorySegment GetStaticByteField$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$58.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * signed char (*GetStaticByteField)(struct JNINativeInterface_**,struct _jobject*,struct _jfieldID*);
     * }
     */
    public static void GetStaticByteField$set(MemorySegment seg, MemorySegment x) {
        constants$58.const$3.set(seg, x);
    }
    public static MemorySegment GetStaticByteField$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$58.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void GetStaticByteField$set(MemorySegment seg, long index, MemorySegment x) {
        constants$58.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetStaticByteField GetStaticByteField(MemorySegment segment, SegmentScope scope) {
        return GetStaticByteField.ofAddress(GetStaticByteField$get(segment), scope);
    }
    /**
     * {@snippet :
 * unsigned short (*GetStaticCharField)(struct JNINativeInterface_**,struct _jobject*,struct _jfieldID*);
     * }
     */
    public interface GetStaticCharField {

        short apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(GetStaticCharField fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(constants$58.const$4, fi, constants$40.const$2, scope);
        }
        static GetStaticCharField ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (short)constants$40.const$4.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle GetStaticCharField$VH() {
        return constants$58.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned short (*GetStaticCharField)(struct JNINativeInterface_**,struct _jobject*,struct _jfieldID*);
     * }
     */
    public static MemorySegment GetStaticCharField$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$58.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned short (*GetStaticCharField)(struct JNINativeInterface_**,struct _jobject*,struct _jfieldID*);
     * }
     */
    public static void GetStaticCharField$set(MemorySegment seg, MemorySegment x) {
        constants$58.const$5.set(seg, x);
    }
    public static MemorySegment GetStaticCharField$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$58.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void GetStaticCharField$set(MemorySegment seg, long index, MemorySegment x) {
        constants$58.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetStaticCharField GetStaticCharField(MemorySegment segment, SegmentScope scope) {
        return GetStaticCharField.ofAddress(GetStaticCharField$get(segment), scope);
    }
    /**
     * {@snippet :
 * short (*GetStaticShortField)(struct JNINativeInterface_**,struct _jobject*,struct _jfieldID*);
     * }
     */
    public interface GetStaticShortField {

        short apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(GetStaticShortField fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(constants$59.const$0, fi, constants$40.const$2, scope);
        }
        static GetStaticShortField ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (short)constants$40.const$4.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle GetStaticShortField$VH() {
        return constants$59.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * short (*GetStaticShortField)(struct JNINativeInterface_**,struct _jobject*,struct _jfieldID*);
     * }
     */
    public static MemorySegment GetStaticShortField$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$59.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * short (*GetStaticShortField)(struct JNINativeInterface_**,struct _jobject*,struct _jfieldID*);
     * }
     */
    public static void GetStaticShortField$set(MemorySegment seg, MemorySegment x) {
        constants$59.const$1.set(seg, x);
    }
    public static MemorySegment GetStaticShortField$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$59.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void GetStaticShortField$set(MemorySegment seg, long index, MemorySegment x) {
        constants$59.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetStaticShortField GetStaticShortField(MemorySegment segment, SegmentScope scope) {
        return GetStaticShortField.ofAddress(GetStaticShortField$get(segment), scope);
    }
    /**
     * {@snippet :
 * long (*GetStaticIntField)(struct JNINativeInterface_**,struct _jobject*,struct _jfieldID*);
     * }
     */
    public interface GetStaticIntField {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(GetStaticIntField fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(constants$59.const$2, fi, constants$8.const$3, scope);
        }
        static GetStaticIntField ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)constants$8.const$5.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle GetStaticIntField$VH() {
        return constants$59.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * long (*GetStaticIntField)(struct JNINativeInterface_**,struct _jobject*,struct _jfieldID*);
     * }
     */
    public static MemorySegment GetStaticIntField$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$59.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * long (*GetStaticIntField)(struct JNINativeInterface_**,struct _jobject*,struct _jfieldID*);
     * }
     */
    public static void GetStaticIntField$set(MemorySegment seg, MemorySegment x) {
        constants$59.const$3.set(seg, x);
    }
    public static MemorySegment GetStaticIntField$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$59.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void GetStaticIntField$set(MemorySegment seg, long index, MemorySegment x) {
        constants$59.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetStaticIntField GetStaticIntField(MemorySegment segment, SegmentScope scope) {
        return GetStaticIntField.ofAddress(GetStaticIntField$get(segment), scope);
    }
    /**
     * {@snippet :
 * long long (*GetStaticLongField)(struct JNINativeInterface_**,struct _jobject*,struct _jfieldID*);
     * }
     */
    public interface GetStaticLongField {

        long apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(GetStaticLongField fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(constants$59.const$4, fi, constants$41.const$4, scope);
        }
        static GetStaticLongField ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (long)constants$42.const$0.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle GetStaticLongField$VH() {
        return constants$59.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * long long (*GetStaticLongField)(struct JNINativeInterface_**,struct _jobject*,struct _jfieldID*);
     * }
     */
    public static MemorySegment GetStaticLongField$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$59.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * long long (*GetStaticLongField)(struct JNINativeInterface_**,struct _jobject*,struct _jfieldID*);
     * }
     */
    public static void GetStaticLongField$set(MemorySegment seg, MemorySegment x) {
        constants$59.const$5.set(seg, x);
    }
    public static MemorySegment GetStaticLongField$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$59.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void GetStaticLongField$set(MemorySegment seg, long index, MemorySegment x) {
        constants$59.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetStaticLongField GetStaticLongField(MemorySegment segment, SegmentScope scope) {
        return GetStaticLongField.ofAddress(GetStaticLongField$get(segment), scope);
    }
    /**
     * {@snippet :
 * float (*GetStaticFloatField)(struct JNINativeInterface_**,struct _jobject*,struct _jfieldID*);
     * }
     */
    public interface GetStaticFloatField {

        float apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(GetStaticFloatField fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(constants$60.const$0, fi, constants$42.const$2, scope);
        }
        static GetStaticFloatField ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (float)constants$42.const$4.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle GetStaticFloatField$VH() {
        return constants$60.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * float (*GetStaticFloatField)(struct JNINativeInterface_**,struct _jobject*,struct _jfieldID*);
     * }
     */
    public static MemorySegment GetStaticFloatField$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$60.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * float (*GetStaticFloatField)(struct JNINativeInterface_**,struct _jobject*,struct _jfieldID*);
     * }
     */
    public static void GetStaticFloatField$set(MemorySegment seg, MemorySegment x) {
        constants$60.const$1.set(seg, x);
    }
    public static MemorySegment GetStaticFloatField$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$60.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void GetStaticFloatField$set(MemorySegment seg, long index, MemorySegment x) {
        constants$60.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetStaticFloatField GetStaticFloatField(MemorySegment segment, SegmentScope scope) {
        return GetStaticFloatField.ofAddress(GetStaticFloatField$get(segment), scope);
    }
    /**
     * {@snippet :
 * double (*GetStaticDoubleField)(struct JNINativeInterface_**,struct _jobject*,struct _jfieldID*);
     * }
     */
    public interface GetStaticDoubleField {

        double apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(GetStaticDoubleField fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(constants$60.const$2, fi, constants$43.const$0, scope);
        }
        static GetStaticDoubleField ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (double)constants$43.const$2.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle GetStaticDoubleField$VH() {
        return constants$60.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * double (*GetStaticDoubleField)(struct JNINativeInterface_**,struct _jobject*,struct _jfieldID*);
     * }
     */
    public static MemorySegment GetStaticDoubleField$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$60.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * double (*GetStaticDoubleField)(struct JNINativeInterface_**,struct _jobject*,struct _jfieldID*);
     * }
     */
    public static void GetStaticDoubleField$set(MemorySegment seg, MemorySegment x) {
        constants$60.const$3.set(seg, x);
    }
    public static MemorySegment GetStaticDoubleField$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$60.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void GetStaticDoubleField$set(MemorySegment seg, long index, MemorySegment x) {
        constants$60.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetStaticDoubleField GetStaticDoubleField(MemorySegment segment, SegmentScope scope) {
        return GetStaticDoubleField.ofAddress(GetStaticDoubleField$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*SetStaticObjectField)(struct JNINativeInterface_**,struct _jobject*,struct _jfieldID*,struct _jobject*);
     * }
     */
    public interface SetStaticObjectField {

        void apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3);
        static MemorySegment allocate(SetStaticObjectField fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(constants$60.const$4, fi, constants$26.const$4, scope);
        }
        static SetStaticObjectField ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3) -> {
                try {
                    constants$27.const$0.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle SetStaticObjectField$VH() {
        return constants$60.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*SetStaticObjectField)(struct JNINativeInterface_**,struct _jobject*,struct _jfieldID*,struct _jobject*);
     * }
     */
    public static MemorySegment SetStaticObjectField$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$60.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*SetStaticObjectField)(struct JNINativeInterface_**,struct _jobject*,struct _jfieldID*,struct _jobject*);
     * }
     */
    public static void SetStaticObjectField$set(MemorySegment seg, MemorySegment x) {
        constants$60.const$5.set(seg, x);
    }
    public static MemorySegment SetStaticObjectField$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$60.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void SetStaticObjectField$set(MemorySegment seg, long index, MemorySegment x) {
        constants$60.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static SetStaticObjectField SetStaticObjectField(MemorySegment segment, SegmentScope scope) {
        return SetStaticObjectField.ofAddress(SetStaticObjectField$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*SetStaticBooleanField)(struct JNINativeInterface_**,struct _jobject*,struct _jfieldID*,unsigned char);
     * }
     */
    public interface SetStaticBooleanField {

        void apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, byte _x3);
        static MemorySegment allocate(SetStaticBooleanField fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(constants$61.const$0, fi, constants$44.const$0, scope);
        }
        static SetStaticBooleanField ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, byte __x3) -> {
                try {
                    constants$44.const$2.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle SetStaticBooleanField$VH() {
        return constants$61.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*SetStaticBooleanField)(struct JNINativeInterface_**,struct _jobject*,struct _jfieldID*,unsigned char);
     * }
     */
    public static MemorySegment SetStaticBooleanField$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$61.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*SetStaticBooleanField)(struct JNINativeInterface_**,struct _jobject*,struct _jfieldID*,unsigned char);
     * }
     */
    public static void SetStaticBooleanField$set(MemorySegment seg, MemorySegment x) {
        constants$61.const$1.set(seg, x);
    }
    public static MemorySegment SetStaticBooleanField$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$61.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void SetStaticBooleanField$set(MemorySegment seg, long index, MemorySegment x) {
        constants$61.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static SetStaticBooleanField SetStaticBooleanField(MemorySegment segment, SegmentScope scope) {
        return SetStaticBooleanField.ofAddress(SetStaticBooleanField$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*SetStaticByteField)(struct JNINativeInterface_**,struct _jobject*,struct _jfieldID*,signed char);
     * }
     */
    public interface SetStaticByteField {

        void apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, byte _x3);
        static MemorySegment allocate(SetStaticByteField fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(constants$61.const$2, fi, constants$44.const$0, scope);
        }
        static SetStaticByteField ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, byte __x3) -> {
                try {
                    constants$44.const$2.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle SetStaticByteField$VH() {
        return constants$61.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*SetStaticByteField)(struct JNINativeInterface_**,struct _jobject*,struct _jfieldID*,signed char);
     * }
     */
    public static MemorySegment SetStaticByteField$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$61.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*SetStaticByteField)(struct JNINativeInterface_**,struct _jobject*,struct _jfieldID*,signed char);
     * }
     */
    public static void SetStaticByteField$set(MemorySegment seg, MemorySegment x) {
        constants$61.const$3.set(seg, x);
    }
    public static MemorySegment SetStaticByteField$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$61.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void SetStaticByteField$set(MemorySegment seg, long index, MemorySegment x) {
        constants$61.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static SetStaticByteField SetStaticByteField(MemorySegment segment, SegmentScope scope) {
        return SetStaticByteField.ofAddress(SetStaticByteField$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*SetStaticCharField)(struct JNINativeInterface_**,struct _jobject*,struct _jfieldID*,unsigned short);
     * }
     */
    public interface SetStaticCharField {

        void apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, short _x3);
        static MemorySegment allocate(SetStaticCharField fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(constants$61.const$4, fi, constants$45.const$0, scope);
        }
        static SetStaticCharField ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, short __x3) -> {
                try {
                    constants$45.const$2.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle SetStaticCharField$VH() {
        return constants$61.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*SetStaticCharField)(struct JNINativeInterface_**,struct _jobject*,struct _jfieldID*,unsigned short);
     * }
     */
    public static MemorySegment SetStaticCharField$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$61.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*SetStaticCharField)(struct JNINativeInterface_**,struct _jobject*,struct _jfieldID*,unsigned short);
     * }
     */
    public static void SetStaticCharField$set(MemorySegment seg, MemorySegment x) {
        constants$61.const$5.set(seg, x);
    }
    public static MemorySegment SetStaticCharField$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$61.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void SetStaticCharField$set(MemorySegment seg, long index, MemorySegment x) {
        constants$61.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static SetStaticCharField SetStaticCharField(MemorySegment segment, SegmentScope scope) {
        return SetStaticCharField.ofAddress(SetStaticCharField$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*SetStaticShortField)(struct JNINativeInterface_**,struct _jobject*,struct _jfieldID*,short);
     * }
     */
    public interface SetStaticShortField {

        void apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, short _x3);
        static MemorySegment allocate(SetStaticShortField fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(constants$62.const$0, fi, constants$45.const$0, scope);
        }
        static SetStaticShortField ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, short __x3) -> {
                try {
                    constants$45.const$2.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle SetStaticShortField$VH() {
        return constants$62.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*SetStaticShortField)(struct JNINativeInterface_**,struct _jobject*,struct _jfieldID*,short);
     * }
     */
    public static MemorySegment SetStaticShortField$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$62.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*SetStaticShortField)(struct JNINativeInterface_**,struct _jobject*,struct _jfieldID*,short);
     * }
     */
    public static void SetStaticShortField$set(MemorySegment seg, MemorySegment x) {
        constants$62.const$1.set(seg, x);
    }
    public static MemorySegment SetStaticShortField$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$62.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void SetStaticShortField$set(MemorySegment seg, long index, MemorySegment x) {
        constants$62.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static SetStaticShortField SetStaticShortField(MemorySegment segment, SegmentScope scope) {
        return SetStaticShortField.ofAddress(SetStaticShortField$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*SetStaticIntField)(struct JNINativeInterface_**,struct _jobject*,struct _jfieldID*,long);
     * }
     */
    public interface SetStaticIntField {

        void apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, int _x3);
        static MemorySegment allocate(SetStaticIntField fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(constants$62.const$2, fi, constants$46.const$0, scope);
        }
        static SetStaticIntField ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, int __x3) -> {
                try {
                    constants$46.const$2.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle SetStaticIntField$VH() {
        return constants$62.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*SetStaticIntField)(struct JNINativeInterface_**,struct _jobject*,struct _jfieldID*,long);
     * }
     */
    public static MemorySegment SetStaticIntField$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$62.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*SetStaticIntField)(struct JNINativeInterface_**,struct _jobject*,struct _jfieldID*,long);
     * }
     */
    public static void SetStaticIntField$set(MemorySegment seg, MemorySegment x) {
        constants$62.const$3.set(seg, x);
    }
    public static MemorySegment SetStaticIntField$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$62.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void SetStaticIntField$set(MemorySegment seg, long index, MemorySegment x) {
        constants$62.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static SetStaticIntField SetStaticIntField(MemorySegment segment, SegmentScope scope) {
        return SetStaticIntField.ofAddress(SetStaticIntField$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*SetStaticLongField)(struct JNINativeInterface_**,struct _jobject*,struct _jfieldID*,long long);
     * }
     */
    public interface SetStaticLongField {

        void apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, long _x3);
        static MemorySegment allocate(SetStaticLongField fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(constants$62.const$4, fi, constants$46.const$4, scope);
        }
        static SetStaticLongField ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, long __x3) -> {
                try {
                    constants$47.const$0.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle SetStaticLongField$VH() {
        return constants$62.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*SetStaticLongField)(struct JNINativeInterface_**,struct _jobject*,struct _jfieldID*,long long);
     * }
     */
    public static MemorySegment SetStaticLongField$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$62.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*SetStaticLongField)(struct JNINativeInterface_**,struct _jobject*,struct _jfieldID*,long long);
     * }
     */
    public static void SetStaticLongField$set(MemorySegment seg, MemorySegment x) {
        constants$62.const$5.set(seg, x);
    }
    public static MemorySegment SetStaticLongField$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$62.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void SetStaticLongField$set(MemorySegment seg, long index, MemorySegment x) {
        constants$62.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static SetStaticLongField SetStaticLongField(MemorySegment segment, SegmentScope scope) {
        return SetStaticLongField.ofAddress(SetStaticLongField$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*SetStaticFloatField)(struct JNINativeInterface_**,struct _jobject*,struct _jfieldID*,float);
     * }
     */
    public interface SetStaticFloatField {

        void apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, float _x3);
        static MemorySegment allocate(SetStaticFloatField fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(constants$63.const$0, fi, constants$47.const$2, scope);
        }
        static SetStaticFloatField ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, float __x3) -> {
                try {
                    constants$47.const$4.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle SetStaticFloatField$VH() {
        return constants$63.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*SetStaticFloatField)(struct JNINativeInterface_**,struct _jobject*,struct _jfieldID*,float);
     * }
     */
    public static MemorySegment SetStaticFloatField$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$63.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*SetStaticFloatField)(struct JNINativeInterface_**,struct _jobject*,struct _jfieldID*,float);
     * }
     */
    public static void SetStaticFloatField$set(MemorySegment seg, MemorySegment x) {
        constants$63.const$1.set(seg, x);
    }
    public static MemorySegment SetStaticFloatField$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$63.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void SetStaticFloatField$set(MemorySegment seg, long index, MemorySegment x) {
        constants$63.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static SetStaticFloatField SetStaticFloatField(MemorySegment segment, SegmentScope scope) {
        return SetStaticFloatField.ofAddress(SetStaticFloatField$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*SetStaticDoubleField)(struct JNINativeInterface_**,struct _jobject*,struct _jfieldID*,double);
     * }
     */
    public interface SetStaticDoubleField {

        void apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, double _x3);
        static MemorySegment allocate(SetStaticDoubleField fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(constants$63.const$2, fi, constants$48.const$0, scope);
        }
        static SetStaticDoubleField ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, double __x3) -> {
                try {
                    constants$48.const$2.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle SetStaticDoubleField$VH() {
        return constants$63.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*SetStaticDoubleField)(struct JNINativeInterface_**,struct _jobject*,struct _jfieldID*,double);
     * }
     */
    public static MemorySegment SetStaticDoubleField$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$63.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*SetStaticDoubleField)(struct JNINativeInterface_**,struct _jobject*,struct _jfieldID*,double);
     * }
     */
    public static void SetStaticDoubleField$set(MemorySegment seg, MemorySegment x) {
        constants$63.const$3.set(seg, x);
    }
    public static MemorySegment SetStaticDoubleField$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$63.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void SetStaticDoubleField$set(MemorySegment seg, long index, MemorySegment x) {
        constants$63.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static SetStaticDoubleField SetStaticDoubleField(MemorySegment segment, SegmentScope scope) {
        return SetStaticDoubleField.ofAddress(SetStaticDoubleField$get(segment), scope);
    }
    /**
     * {@snippet :
 * struct _jobject* (*NewString)(struct JNINativeInterface_**,unsigned short*,long);
     * }
     */
    public interface NewString {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, int _x2);
        static MemorySegment allocate(NewString fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(constants$63.const$5, fi, constants$63.const$4, scope);
        }
        static NewString ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, int __x2) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$64.const$0.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle NewString$VH() {
        return constants$64.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * struct _jobject* (*NewString)(struct JNINativeInterface_**,unsigned short*,long);
     * }
     */
    public static MemorySegment NewString$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$64.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * struct _jobject* (*NewString)(struct JNINativeInterface_**,unsigned short*,long);
     * }
     */
    public static void NewString$set(MemorySegment seg, MemorySegment x) {
        constants$64.const$1.set(seg, x);
    }
    public static MemorySegment NewString$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$64.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void NewString$set(MemorySegment seg, long index, MemorySegment x) {
        constants$64.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static NewString NewString(MemorySegment segment, SegmentScope scope) {
        return NewString.ofAddress(NewString$get(segment), scope);
    }
    /**
     * {@snippet :
 * long (*GetStringLength)(struct JNINativeInterface_**,struct _jobject*);
     * }
     */
    public interface GetStringLength {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(GetStringLength fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(constants$64.const$2, fi, constants$7.const$5, scope);
        }
        static GetStringLength ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$8.const$1.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle GetStringLength$VH() {
        return constants$64.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * long (*GetStringLength)(struct JNINativeInterface_**,struct _jobject*);
     * }
     */
    public static MemorySegment GetStringLength$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$64.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * long (*GetStringLength)(struct JNINativeInterface_**,struct _jobject*);
     * }
     */
    public static void GetStringLength$set(MemorySegment seg, MemorySegment x) {
        constants$64.const$3.set(seg, x);
    }
    public static MemorySegment GetStringLength$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$64.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void GetStringLength$set(MemorySegment seg, long index, MemorySegment x) {
        constants$64.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetStringLength GetStringLength(MemorySegment segment, SegmentScope scope) {
        return GetStringLength.ofAddress(GetStringLength$get(segment), scope);
    }
    /**
     * {@snippet :
 * unsigned short* (*GetStringChars)(struct JNINativeInterface_**,struct _jobject*,unsigned char*);
     * }
     */
    public interface GetStringChars {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(GetStringChars fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(constants$64.const$4, fi, constants$39.const$0, scope);
        }
        static GetStringChars ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$39.const$2.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle GetStringChars$VH() {
        return constants$64.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned short* (*GetStringChars)(struct JNINativeInterface_**,struct _jobject*,unsigned char*);
     * }
     */
    public static MemorySegment GetStringChars$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$64.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned short* (*GetStringChars)(struct JNINativeInterface_**,struct _jobject*,unsigned char*);
     * }
     */
    public static void GetStringChars$set(MemorySegment seg, MemorySegment x) {
        constants$64.const$5.set(seg, x);
    }
    public static MemorySegment GetStringChars$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$64.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void GetStringChars$set(MemorySegment seg, long index, MemorySegment x) {
        constants$64.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetStringChars GetStringChars(MemorySegment segment, SegmentScope scope) {
        return GetStringChars.ofAddress(GetStringChars$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*ReleaseStringChars)(struct JNINativeInterface_**,struct _jobject*,unsigned short*);
     * }
     */
    public interface ReleaseStringChars {

        void apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(ReleaseStringChars fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(constants$65.const$1, fi, constants$65.const$0, scope);
        }
        static ReleaseStringChars ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    constants$65.const$2.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle ReleaseStringChars$VH() {
        return constants$65.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*ReleaseStringChars)(struct JNINativeInterface_**,struct _jobject*,unsigned short*);
     * }
     */
    public static MemorySegment ReleaseStringChars$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$65.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*ReleaseStringChars)(struct JNINativeInterface_**,struct _jobject*,unsigned short*);
     * }
     */
    public static void ReleaseStringChars$set(MemorySegment seg, MemorySegment x) {
        constants$65.const$3.set(seg, x);
    }
    public static MemorySegment ReleaseStringChars$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$65.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void ReleaseStringChars$set(MemorySegment seg, long index, MemorySegment x) {
        constants$65.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static ReleaseStringChars ReleaseStringChars(MemorySegment segment, SegmentScope scope) {
        return ReleaseStringChars.ofAddress(ReleaseStringChars$get(segment), scope);
    }
    /**
     * {@snippet :
 * struct _jobject* (*NewStringUTF)(struct JNINativeInterface_**,char*);
     * }
     */
    public interface NewStringUTF {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(NewStringUTF fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(constants$65.const$4, fi, constants$4.const$3, scope);
        }
        static NewStringUTF ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$4.const$5.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle NewStringUTF$VH() {
        return constants$65.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * struct _jobject* (*NewStringUTF)(struct JNINativeInterface_**,char*);
     * }
     */
    public static MemorySegment NewStringUTF$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$65.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * struct _jobject* (*NewStringUTF)(struct JNINativeInterface_**,char*);
     * }
     */
    public static void NewStringUTF$set(MemorySegment seg, MemorySegment x) {
        constants$65.const$5.set(seg, x);
    }
    public static MemorySegment NewStringUTF$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$65.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void NewStringUTF$set(MemorySegment seg, long index, MemorySegment x) {
        constants$65.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static NewStringUTF NewStringUTF(MemorySegment segment, SegmentScope scope) {
        return NewStringUTF.ofAddress(NewStringUTF$get(segment), scope);
    }
    /**
     * {@snippet :
 * long (*GetStringUTFLength)(struct JNINativeInterface_**,struct _jobject*);
     * }
     */
    public interface GetStringUTFLength {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(GetStringUTFLength fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(constants$66.const$0, fi, constants$7.const$5, scope);
        }
        static GetStringUTFLength ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$8.const$1.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle GetStringUTFLength$VH() {
        return constants$66.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * long (*GetStringUTFLength)(struct JNINativeInterface_**,struct _jobject*);
     * }
     */
    public static MemorySegment GetStringUTFLength$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$66.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * long (*GetStringUTFLength)(struct JNINativeInterface_**,struct _jobject*);
     * }
     */
    public static void GetStringUTFLength$set(MemorySegment seg, MemorySegment x) {
        constants$66.const$1.set(seg, x);
    }
    public static MemorySegment GetStringUTFLength$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$66.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void GetStringUTFLength$set(MemorySegment seg, long index, MemorySegment x) {
        constants$66.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetStringUTFLength GetStringUTFLength(MemorySegment segment, SegmentScope scope) {
        return GetStringUTFLength.ofAddress(GetStringUTFLength$get(segment), scope);
    }
    /**
     * {@snippet :
 * char* (*GetStringUTFChars)(struct JNINativeInterface_**,struct _jobject*,unsigned char*);
     * }
     */
    public interface GetStringUTFChars {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(GetStringUTFChars fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(constants$66.const$2, fi, constants$39.const$0, scope);
        }
        static GetStringUTFChars ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$39.const$2.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle GetStringUTFChars$VH() {
        return constants$66.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * char* (*GetStringUTFChars)(struct JNINativeInterface_**,struct _jobject*,unsigned char*);
     * }
     */
    public static MemorySegment GetStringUTFChars$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$66.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * char* (*GetStringUTFChars)(struct JNINativeInterface_**,struct _jobject*,unsigned char*);
     * }
     */
    public static void GetStringUTFChars$set(MemorySegment seg, MemorySegment x) {
        constants$66.const$3.set(seg, x);
    }
    public static MemorySegment GetStringUTFChars$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$66.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void GetStringUTFChars$set(MemorySegment seg, long index, MemorySegment x) {
        constants$66.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetStringUTFChars GetStringUTFChars(MemorySegment segment, SegmentScope scope) {
        return GetStringUTFChars.ofAddress(GetStringUTFChars$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*ReleaseStringUTFChars)(struct JNINativeInterface_**,struct _jobject*,char*);
     * }
     */
    public interface ReleaseStringUTFChars {

        void apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(ReleaseStringUTFChars fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(constants$66.const$4, fi, constants$65.const$0, scope);
        }
        static ReleaseStringUTFChars ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    constants$65.const$2.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle ReleaseStringUTFChars$VH() {
        return constants$66.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*ReleaseStringUTFChars)(struct JNINativeInterface_**,struct _jobject*,char*);
     * }
     */
    public static MemorySegment ReleaseStringUTFChars$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$66.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*ReleaseStringUTFChars)(struct JNINativeInterface_**,struct _jobject*,char*);
     * }
     */
    public static void ReleaseStringUTFChars$set(MemorySegment seg, MemorySegment x) {
        constants$66.const$5.set(seg, x);
    }
    public static MemorySegment ReleaseStringUTFChars$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$66.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void ReleaseStringUTFChars$set(MemorySegment seg, long index, MemorySegment x) {
        constants$66.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static ReleaseStringUTFChars ReleaseStringUTFChars(MemorySegment segment, SegmentScope scope) {
        return ReleaseStringUTFChars.ofAddress(ReleaseStringUTFChars$get(segment), scope);
    }
    /**
     * {@snippet :
 * long (*GetArrayLength)(struct JNINativeInterface_**,struct _jobject*);
     * }
     */
    public interface GetArrayLength {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(GetArrayLength fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(constants$67.const$0, fi, constants$7.const$5, scope);
        }
        static GetArrayLength ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$8.const$1.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle GetArrayLength$VH() {
        return constants$67.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * long (*GetArrayLength)(struct JNINativeInterface_**,struct _jobject*);
     * }
     */
    public static MemorySegment GetArrayLength$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$67.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * long (*GetArrayLength)(struct JNINativeInterface_**,struct _jobject*);
     * }
     */
    public static void GetArrayLength$set(MemorySegment seg, MemorySegment x) {
        constants$67.const$1.set(seg, x);
    }
    public static MemorySegment GetArrayLength$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$67.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void GetArrayLength$set(MemorySegment seg, long index, MemorySegment x) {
        constants$67.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetArrayLength GetArrayLength(MemorySegment segment, SegmentScope scope) {
        return GetArrayLength.ofAddress(GetArrayLength$get(segment), scope);
    }
    /**
     * {@snippet :
 * struct _jobject* (*NewObjectArray)(struct JNINativeInterface_**,long,struct _jobject*,struct _jobject*);
     * }
     */
    public interface NewObjectArray {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment _x0, int _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3);
        static MemorySegment allocate(NewObjectArray fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(constants$67.const$3, fi, constants$67.const$2, scope);
        }
        static NewObjectArray ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, int __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$67.const$4.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle NewObjectArray$VH() {
        return constants$67.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * struct _jobject* (*NewObjectArray)(struct JNINativeInterface_**,long,struct _jobject*,struct _jobject*);
     * }
     */
    public static MemorySegment NewObjectArray$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$67.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * struct _jobject* (*NewObjectArray)(struct JNINativeInterface_**,long,struct _jobject*,struct _jobject*);
     * }
     */
    public static void NewObjectArray$set(MemorySegment seg, MemorySegment x) {
        constants$67.const$5.set(seg, x);
    }
    public static MemorySegment NewObjectArray$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$67.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void NewObjectArray$set(MemorySegment seg, long index, MemorySegment x) {
        constants$67.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static NewObjectArray NewObjectArray(MemorySegment segment, SegmentScope scope) {
        return NewObjectArray.ofAddress(NewObjectArray$get(segment), scope);
    }
    /**
     * {@snippet :
 * struct _jobject* (*GetObjectArrayElement)(struct JNINativeInterface_**,struct _jobject*,long);
     * }
     */
    public interface GetObjectArrayElement {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, int _x2);
        static MemorySegment allocate(GetObjectArrayElement fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(constants$68.const$0, fi, constants$63.const$4, scope);
        }
        static GetObjectArrayElement ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, int __x2) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$64.const$0.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle GetObjectArrayElement$VH() {
        return constants$68.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * struct _jobject* (*GetObjectArrayElement)(struct JNINativeInterface_**,struct _jobject*,long);
     * }
     */
    public static MemorySegment GetObjectArrayElement$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$68.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * struct _jobject* (*GetObjectArrayElement)(struct JNINativeInterface_**,struct _jobject*,long);
     * }
     */
    public static void GetObjectArrayElement$set(MemorySegment seg, MemorySegment x) {
        constants$68.const$1.set(seg, x);
    }
    public static MemorySegment GetObjectArrayElement$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$68.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void GetObjectArrayElement$set(MemorySegment seg, long index, MemorySegment x) {
        constants$68.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetObjectArrayElement GetObjectArrayElement(MemorySegment segment, SegmentScope scope) {
        return GetObjectArrayElement.ofAddress(GetObjectArrayElement$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*SetObjectArrayElement)(struct JNINativeInterface_**,struct _jobject*,long,struct _jobject*);
     * }
     */
    public interface SetObjectArrayElement {

        void apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, int _x2, java.lang.foreign.MemorySegment _x3);
        static MemorySegment allocate(SetObjectArrayElement fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(constants$68.const$3, fi, constants$68.const$2, scope);
        }
        static SetObjectArrayElement ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, int __x2, java.lang.foreign.MemorySegment __x3) -> {
                try {
                    constants$68.const$4.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle SetObjectArrayElement$VH() {
        return constants$68.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*SetObjectArrayElement)(struct JNINativeInterface_**,struct _jobject*,long,struct _jobject*);
     * }
     */
    public static MemorySegment SetObjectArrayElement$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$68.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*SetObjectArrayElement)(struct JNINativeInterface_**,struct _jobject*,long,struct _jobject*);
     * }
     */
    public static void SetObjectArrayElement$set(MemorySegment seg, MemorySegment x) {
        constants$68.const$5.set(seg, x);
    }
    public static MemorySegment SetObjectArrayElement$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$68.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void SetObjectArrayElement$set(MemorySegment seg, long index, MemorySegment x) {
        constants$68.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static SetObjectArrayElement SetObjectArrayElement(MemorySegment segment, SegmentScope scope) {
        return SetObjectArrayElement.ofAddress(SetObjectArrayElement$get(segment), scope);
    }
    /**
     * {@snippet :
 * struct _jobject* (*NewBooleanArray)(struct JNINativeInterface_**,long);
     * }
     */
    public interface NewBooleanArray {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment _x0, int _x1);
        static MemorySegment allocate(NewBooleanArray fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(constants$69.const$1, fi, constants$69.const$0, scope);
        }
        static NewBooleanArray ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, int __x1) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$69.const$2.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle NewBooleanArray$VH() {
        return constants$69.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * struct _jobject* (*NewBooleanArray)(struct JNINativeInterface_**,long);
     * }
     */
    public static MemorySegment NewBooleanArray$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$69.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * struct _jobject* (*NewBooleanArray)(struct JNINativeInterface_**,long);
     * }
     */
    public static void NewBooleanArray$set(MemorySegment seg, MemorySegment x) {
        constants$69.const$3.set(seg, x);
    }
    public static MemorySegment NewBooleanArray$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$69.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void NewBooleanArray$set(MemorySegment seg, long index, MemorySegment x) {
        constants$69.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static NewBooleanArray NewBooleanArray(MemorySegment segment, SegmentScope scope) {
        return NewBooleanArray.ofAddress(NewBooleanArray$get(segment), scope);
    }
    /**
     * {@snippet :
 * struct _jobject* (*NewByteArray)(struct JNINativeInterface_**,long);
     * }
     */
    public interface NewByteArray {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment _x0, int _x1);
        static MemorySegment allocate(NewByteArray fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(constants$69.const$4, fi, constants$69.const$0, scope);
        }
        static NewByteArray ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, int __x1) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$69.const$2.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle NewByteArray$VH() {
        return constants$69.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * struct _jobject* (*NewByteArray)(struct JNINativeInterface_**,long);
     * }
     */
    public static MemorySegment NewByteArray$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$69.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * struct _jobject* (*NewByteArray)(struct JNINativeInterface_**,long);
     * }
     */
    public static void NewByteArray$set(MemorySegment seg, MemorySegment x) {
        constants$69.const$5.set(seg, x);
    }
    public static MemorySegment NewByteArray$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$69.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void NewByteArray$set(MemorySegment seg, long index, MemorySegment x) {
        constants$69.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static NewByteArray NewByteArray(MemorySegment segment, SegmentScope scope) {
        return NewByteArray.ofAddress(NewByteArray$get(segment), scope);
    }
    /**
     * {@snippet :
 * struct _jobject* (*NewCharArray)(struct JNINativeInterface_**,long);
     * }
     */
    public interface NewCharArray {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment _x0, int _x1);
        static MemorySegment allocate(NewCharArray fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(constants$70.const$0, fi, constants$69.const$0, scope);
        }
        static NewCharArray ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, int __x1) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$69.const$2.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle NewCharArray$VH() {
        return constants$70.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * struct _jobject* (*NewCharArray)(struct JNINativeInterface_**,long);
     * }
     */
    public static MemorySegment NewCharArray$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$70.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * struct _jobject* (*NewCharArray)(struct JNINativeInterface_**,long);
     * }
     */
    public static void NewCharArray$set(MemorySegment seg, MemorySegment x) {
        constants$70.const$1.set(seg, x);
    }
    public static MemorySegment NewCharArray$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$70.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void NewCharArray$set(MemorySegment seg, long index, MemorySegment x) {
        constants$70.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static NewCharArray NewCharArray(MemorySegment segment, SegmentScope scope) {
        return NewCharArray.ofAddress(NewCharArray$get(segment), scope);
    }
    /**
     * {@snippet :
 * struct _jobject* (*NewShortArray)(struct JNINativeInterface_**,long);
     * }
     */
    public interface NewShortArray {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment _x0, int _x1);
        static MemorySegment allocate(NewShortArray fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(constants$70.const$2, fi, constants$69.const$0, scope);
        }
        static NewShortArray ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, int __x1) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$69.const$2.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle NewShortArray$VH() {
        return constants$70.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * struct _jobject* (*NewShortArray)(struct JNINativeInterface_**,long);
     * }
     */
    public static MemorySegment NewShortArray$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$70.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * struct _jobject* (*NewShortArray)(struct JNINativeInterface_**,long);
     * }
     */
    public static void NewShortArray$set(MemorySegment seg, MemorySegment x) {
        constants$70.const$3.set(seg, x);
    }
    public static MemorySegment NewShortArray$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$70.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void NewShortArray$set(MemorySegment seg, long index, MemorySegment x) {
        constants$70.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static NewShortArray NewShortArray(MemorySegment segment, SegmentScope scope) {
        return NewShortArray.ofAddress(NewShortArray$get(segment), scope);
    }
    /**
     * {@snippet :
 * struct _jobject* (*NewIntArray)(struct JNINativeInterface_**,long);
     * }
     */
    public interface NewIntArray {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment _x0, int _x1);
        static MemorySegment allocate(NewIntArray fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(constants$70.const$4, fi, constants$69.const$0, scope);
        }
        static NewIntArray ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, int __x1) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$69.const$2.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle NewIntArray$VH() {
        return constants$70.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * struct _jobject* (*NewIntArray)(struct JNINativeInterface_**,long);
     * }
     */
    public static MemorySegment NewIntArray$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$70.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * struct _jobject* (*NewIntArray)(struct JNINativeInterface_**,long);
     * }
     */
    public static void NewIntArray$set(MemorySegment seg, MemorySegment x) {
        constants$70.const$5.set(seg, x);
    }
    public static MemorySegment NewIntArray$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$70.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void NewIntArray$set(MemorySegment seg, long index, MemorySegment x) {
        constants$70.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static NewIntArray NewIntArray(MemorySegment segment, SegmentScope scope) {
        return NewIntArray.ofAddress(NewIntArray$get(segment), scope);
    }
    /**
     * {@snippet :
 * struct _jobject* (*NewLongArray)(struct JNINativeInterface_**,long);
     * }
     */
    public interface NewLongArray {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment _x0, int _x1);
        static MemorySegment allocate(NewLongArray fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(constants$71.const$0, fi, constants$69.const$0, scope);
        }
        static NewLongArray ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, int __x1) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$69.const$2.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle NewLongArray$VH() {
        return constants$71.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * struct _jobject* (*NewLongArray)(struct JNINativeInterface_**,long);
     * }
     */
    public static MemorySegment NewLongArray$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$71.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * struct _jobject* (*NewLongArray)(struct JNINativeInterface_**,long);
     * }
     */
    public static void NewLongArray$set(MemorySegment seg, MemorySegment x) {
        constants$71.const$1.set(seg, x);
    }
    public static MemorySegment NewLongArray$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$71.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void NewLongArray$set(MemorySegment seg, long index, MemorySegment x) {
        constants$71.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static NewLongArray NewLongArray(MemorySegment segment, SegmentScope scope) {
        return NewLongArray.ofAddress(NewLongArray$get(segment), scope);
    }
    /**
     * {@snippet :
 * struct _jobject* (*NewFloatArray)(struct JNINativeInterface_**,long);
     * }
     */
    public interface NewFloatArray {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment _x0, int _x1);
        static MemorySegment allocate(NewFloatArray fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(constants$71.const$2, fi, constants$69.const$0, scope);
        }
        static NewFloatArray ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, int __x1) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$69.const$2.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle NewFloatArray$VH() {
        return constants$71.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * struct _jobject* (*NewFloatArray)(struct JNINativeInterface_**,long);
     * }
     */
    public static MemorySegment NewFloatArray$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$71.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * struct _jobject* (*NewFloatArray)(struct JNINativeInterface_**,long);
     * }
     */
    public static void NewFloatArray$set(MemorySegment seg, MemorySegment x) {
        constants$71.const$3.set(seg, x);
    }
    public static MemorySegment NewFloatArray$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$71.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void NewFloatArray$set(MemorySegment seg, long index, MemorySegment x) {
        constants$71.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static NewFloatArray NewFloatArray(MemorySegment segment, SegmentScope scope) {
        return NewFloatArray.ofAddress(NewFloatArray$get(segment), scope);
    }
    /**
     * {@snippet :
 * struct _jobject* (*NewDoubleArray)(struct JNINativeInterface_**,long);
     * }
     */
    public interface NewDoubleArray {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment _x0, int _x1);
        static MemorySegment allocate(NewDoubleArray fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(constants$71.const$4, fi, constants$69.const$0, scope);
        }
        static NewDoubleArray ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, int __x1) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$69.const$2.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle NewDoubleArray$VH() {
        return constants$71.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * struct _jobject* (*NewDoubleArray)(struct JNINativeInterface_**,long);
     * }
     */
    public static MemorySegment NewDoubleArray$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$71.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * struct _jobject* (*NewDoubleArray)(struct JNINativeInterface_**,long);
     * }
     */
    public static void NewDoubleArray$set(MemorySegment seg, MemorySegment x) {
        constants$71.const$5.set(seg, x);
    }
    public static MemorySegment NewDoubleArray$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$71.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void NewDoubleArray$set(MemorySegment seg, long index, MemorySegment x) {
        constants$71.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static NewDoubleArray NewDoubleArray(MemorySegment segment, SegmentScope scope) {
        return NewDoubleArray.ofAddress(NewDoubleArray$get(segment), scope);
    }
    /**
     * {@snippet :
 * unsigned char* (*GetBooleanArrayElements)(struct JNINativeInterface_**,struct _jobject*,unsigned char*);
     * }
     */
    public interface GetBooleanArrayElements {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(GetBooleanArrayElements fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(constants$72.const$0, fi, constants$39.const$0, scope);
        }
        static GetBooleanArrayElements ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$39.const$2.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle GetBooleanArrayElements$VH() {
        return constants$72.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned char* (*GetBooleanArrayElements)(struct JNINativeInterface_**,struct _jobject*,unsigned char*);
     * }
     */
    public static MemorySegment GetBooleanArrayElements$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$72.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned char* (*GetBooleanArrayElements)(struct JNINativeInterface_**,struct _jobject*,unsigned char*);
     * }
     */
    public static void GetBooleanArrayElements$set(MemorySegment seg, MemorySegment x) {
        constants$72.const$1.set(seg, x);
    }
    public static MemorySegment GetBooleanArrayElements$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$72.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void GetBooleanArrayElements$set(MemorySegment seg, long index, MemorySegment x) {
        constants$72.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetBooleanArrayElements GetBooleanArrayElements(MemorySegment segment, SegmentScope scope) {
        return GetBooleanArrayElements.ofAddress(GetBooleanArrayElements$get(segment), scope);
    }
    /**
     * {@snippet :
 * signed char* (*GetByteArrayElements)(struct JNINativeInterface_**,struct _jobject*,unsigned char*);
     * }
     */
    public interface GetByteArrayElements {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(GetByteArrayElements fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(constants$72.const$2, fi, constants$39.const$0, scope);
        }
        static GetByteArrayElements ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$39.const$2.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle GetByteArrayElements$VH() {
        return constants$72.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * signed char* (*GetByteArrayElements)(struct JNINativeInterface_**,struct _jobject*,unsigned char*);
     * }
     */
    public static MemorySegment GetByteArrayElements$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$72.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * signed char* (*GetByteArrayElements)(struct JNINativeInterface_**,struct _jobject*,unsigned char*);
     * }
     */
    public static void GetByteArrayElements$set(MemorySegment seg, MemorySegment x) {
        constants$72.const$3.set(seg, x);
    }
    public static MemorySegment GetByteArrayElements$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$72.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void GetByteArrayElements$set(MemorySegment seg, long index, MemorySegment x) {
        constants$72.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetByteArrayElements GetByteArrayElements(MemorySegment segment, SegmentScope scope) {
        return GetByteArrayElements.ofAddress(GetByteArrayElements$get(segment), scope);
    }
    /**
     * {@snippet :
 * unsigned short* (*GetCharArrayElements)(struct JNINativeInterface_**,struct _jobject*,unsigned char*);
     * }
     */
    public interface GetCharArrayElements {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(GetCharArrayElements fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(constants$72.const$4, fi, constants$39.const$0, scope);
        }
        static GetCharArrayElements ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$39.const$2.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle GetCharArrayElements$VH() {
        return constants$72.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned short* (*GetCharArrayElements)(struct JNINativeInterface_**,struct _jobject*,unsigned char*);
     * }
     */
    public static MemorySegment GetCharArrayElements$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$72.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned short* (*GetCharArrayElements)(struct JNINativeInterface_**,struct _jobject*,unsigned char*);
     * }
     */
    public static void GetCharArrayElements$set(MemorySegment seg, MemorySegment x) {
        constants$72.const$5.set(seg, x);
    }
    public static MemorySegment GetCharArrayElements$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$72.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void GetCharArrayElements$set(MemorySegment seg, long index, MemorySegment x) {
        constants$72.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetCharArrayElements GetCharArrayElements(MemorySegment segment, SegmentScope scope) {
        return GetCharArrayElements.ofAddress(GetCharArrayElements$get(segment), scope);
    }
    /**
     * {@snippet :
 * short* (*GetShortArrayElements)(struct JNINativeInterface_**,struct _jobject*,unsigned char*);
     * }
     */
    public interface GetShortArrayElements {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(GetShortArrayElements fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(constants$73.const$0, fi, constants$39.const$0, scope);
        }
        static GetShortArrayElements ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$39.const$2.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle GetShortArrayElements$VH() {
        return constants$73.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * short* (*GetShortArrayElements)(struct JNINativeInterface_**,struct _jobject*,unsigned char*);
     * }
     */
    public static MemorySegment GetShortArrayElements$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$73.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * short* (*GetShortArrayElements)(struct JNINativeInterface_**,struct _jobject*,unsigned char*);
     * }
     */
    public static void GetShortArrayElements$set(MemorySegment seg, MemorySegment x) {
        constants$73.const$1.set(seg, x);
    }
    public static MemorySegment GetShortArrayElements$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$73.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void GetShortArrayElements$set(MemorySegment seg, long index, MemorySegment x) {
        constants$73.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetShortArrayElements GetShortArrayElements(MemorySegment segment, SegmentScope scope) {
        return GetShortArrayElements.ofAddress(GetShortArrayElements$get(segment), scope);
    }
    /**
     * {@snippet :
 * long* (*GetIntArrayElements)(struct JNINativeInterface_**,struct _jobject*,unsigned char*);
     * }
     */
    public interface GetIntArrayElements {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(GetIntArrayElements fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(constants$73.const$2, fi, constants$39.const$0, scope);
        }
        static GetIntArrayElements ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$39.const$2.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle GetIntArrayElements$VH() {
        return constants$73.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * long* (*GetIntArrayElements)(struct JNINativeInterface_**,struct _jobject*,unsigned char*);
     * }
     */
    public static MemorySegment GetIntArrayElements$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$73.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * long* (*GetIntArrayElements)(struct JNINativeInterface_**,struct _jobject*,unsigned char*);
     * }
     */
    public static void GetIntArrayElements$set(MemorySegment seg, MemorySegment x) {
        constants$73.const$3.set(seg, x);
    }
    public static MemorySegment GetIntArrayElements$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$73.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void GetIntArrayElements$set(MemorySegment seg, long index, MemorySegment x) {
        constants$73.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetIntArrayElements GetIntArrayElements(MemorySegment segment, SegmentScope scope) {
        return GetIntArrayElements.ofAddress(GetIntArrayElements$get(segment), scope);
    }
    /**
     * {@snippet :
 * long long* (*GetLongArrayElements)(struct JNINativeInterface_**,struct _jobject*,unsigned char*);
     * }
     */
    public interface GetLongArrayElements {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(GetLongArrayElements fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(constants$73.const$4, fi, constants$39.const$0, scope);
        }
        static GetLongArrayElements ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$39.const$2.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle GetLongArrayElements$VH() {
        return constants$73.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * long long* (*GetLongArrayElements)(struct JNINativeInterface_**,struct _jobject*,unsigned char*);
     * }
     */
    public static MemorySegment GetLongArrayElements$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$73.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * long long* (*GetLongArrayElements)(struct JNINativeInterface_**,struct _jobject*,unsigned char*);
     * }
     */
    public static void GetLongArrayElements$set(MemorySegment seg, MemorySegment x) {
        constants$73.const$5.set(seg, x);
    }
    public static MemorySegment GetLongArrayElements$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$73.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void GetLongArrayElements$set(MemorySegment seg, long index, MemorySegment x) {
        constants$73.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetLongArrayElements GetLongArrayElements(MemorySegment segment, SegmentScope scope) {
        return GetLongArrayElements.ofAddress(GetLongArrayElements$get(segment), scope);
    }
    /**
     * {@snippet :
 * float* (*GetFloatArrayElements)(struct JNINativeInterface_**,struct _jobject*,unsigned char*);
     * }
     */
    public interface GetFloatArrayElements {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(GetFloatArrayElements fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(constants$74.const$0, fi, constants$39.const$0, scope);
        }
        static GetFloatArrayElements ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$39.const$2.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle GetFloatArrayElements$VH() {
        return constants$74.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * float* (*GetFloatArrayElements)(struct JNINativeInterface_**,struct _jobject*,unsigned char*);
     * }
     */
    public static MemorySegment GetFloatArrayElements$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$74.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * float* (*GetFloatArrayElements)(struct JNINativeInterface_**,struct _jobject*,unsigned char*);
     * }
     */
    public static void GetFloatArrayElements$set(MemorySegment seg, MemorySegment x) {
        constants$74.const$1.set(seg, x);
    }
    public static MemorySegment GetFloatArrayElements$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$74.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void GetFloatArrayElements$set(MemorySegment seg, long index, MemorySegment x) {
        constants$74.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetFloatArrayElements GetFloatArrayElements(MemorySegment segment, SegmentScope scope) {
        return GetFloatArrayElements.ofAddress(GetFloatArrayElements$get(segment), scope);
    }
    /**
     * {@snippet :
 * double* (*GetDoubleArrayElements)(struct JNINativeInterface_**,struct _jobject*,unsigned char*);
     * }
     */
    public interface GetDoubleArrayElements {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(GetDoubleArrayElements fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(constants$74.const$2, fi, constants$39.const$0, scope);
        }
        static GetDoubleArrayElements ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$39.const$2.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle GetDoubleArrayElements$VH() {
        return constants$74.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * double* (*GetDoubleArrayElements)(struct JNINativeInterface_**,struct _jobject*,unsigned char*);
     * }
     */
    public static MemorySegment GetDoubleArrayElements$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$74.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * double* (*GetDoubleArrayElements)(struct JNINativeInterface_**,struct _jobject*,unsigned char*);
     * }
     */
    public static void GetDoubleArrayElements$set(MemorySegment seg, MemorySegment x) {
        constants$74.const$3.set(seg, x);
    }
    public static MemorySegment GetDoubleArrayElements$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$74.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void GetDoubleArrayElements$set(MemorySegment seg, long index, MemorySegment x) {
        constants$74.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetDoubleArrayElements GetDoubleArrayElements(MemorySegment segment, SegmentScope scope) {
        return GetDoubleArrayElements.ofAddress(GetDoubleArrayElements$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*ReleaseBooleanArrayElements)(struct JNINativeInterface_**,struct _jobject*,unsigned char*,long);
     * }
     */
    public interface ReleaseBooleanArrayElements {

        void apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, int _x3);
        static MemorySegment allocate(ReleaseBooleanArrayElements fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(constants$74.const$4, fi, constants$46.const$0, scope);
        }
        static ReleaseBooleanArrayElements ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, int __x3) -> {
                try {
                    constants$46.const$2.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle ReleaseBooleanArrayElements$VH() {
        return constants$74.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*ReleaseBooleanArrayElements)(struct JNINativeInterface_**,struct _jobject*,unsigned char*,long);
     * }
     */
    public static MemorySegment ReleaseBooleanArrayElements$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$74.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*ReleaseBooleanArrayElements)(struct JNINativeInterface_**,struct _jobject*,unsigned char*,long);
     * }
     */
    public static void ReleaseBooleanArrayElements$set(MemorySegment seg, MemorySegment x) {
        constants$74.const$5.set(seg, x);
    }
    public static MemorySegment ReleaseBooleanArrayElements$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$74.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void ReleaseBooleanArrayElements$set(MemorySegment seg, long index, MemorySegment x) {
        constants$74.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static ReleaseBooleanArrayElements ReleaseBooleanArrayElements(MemorySegment segment, SegmentScope scope) {
        return ReleaseBooleanArrayElements.ofAddress(ReleaseBooleanArrayElements$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*ReleaseByteArrayElements)(struct JNINativeInterface_**,struct _jobject*,signed char*,long);
     * }
     */
    public interface ReleaseByteArrayElements {

        void apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, int _x3);
        static MemorySegment allocate(ReleaseByteArrayElements fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(constants$75.const$0, fi, constants$46.const$0, scope);
        }
        static ReleaseByteArrayElements ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, int __x3) -> {
                try {
                    constants$46.const$2.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle ReleaseByteArrayElements$VH() {
        return constants$75.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*ReleaseByteArrayElements)(struct JNINativeInterface_**,struct _jobject*,signed char*,long);
     * }
     */
    public static MemorySegment ReleaseByteArrayElements$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$75.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*ReleaseByteArrayElements)(struct JNINativeInterface_**,struct _jobject*,signed char*,long);
     * }
     */
    public static void ReleaseByteArrayElements$set(MemorySegment seg, MemorySegment x) {
        constants$75.const$1.set(seg, x);
    }
    public static MemorySegment ReleaseByteArrayElements$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$75.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void ReleaseByteArrayElements$set(MemorySegment seg, long index, MemorySegment x) {
        constants$75.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static ReleaseByteArrayElements ReleaseByteArrayElements(MemorySegment segment, SegmentScope scope) {
        return ReleaseByteArrayElements.ofAddress(ReleaseByteArrayElements$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*ReleaseCharArrayElements)(struct JNINativeInterface_**,struct _jobject*,unsigned short*,long);
     * }
     */
    public interface ReleaseCharArrayElements {

        void apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, int _x3);
        static MemorySegment allocate(ReleaseCharArrayElements fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(constants$75.const$2, fi, constants$46.const$0, scope);
        }
        static ReleaseCharArrayElements ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, int __x3) -> {
                try {
                    constants$46.const$2.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle ReleaseCharArrayElements$VH() {
        return constants$75.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*ReleaseCharArrayElements)(struct JNINativeInterface_**,struct _jobject*,unsigned short*,long);
     * }
     */
    public static MemorySegment ReleaseCharArrayElements$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$75.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*ReleaseCharArrayElements)(struct JNINativeInterface_**,struct _jobject*,unsigned short*,long);
     * }
     */
    public static void ReleaseCharArrayElements$set(MemorySegment seg, MemorySegment x) {
        constants$75.const$3.set(seg, x);
    }
    public static MemorySegment ReleaseCharArrayElements$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$75.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void ReleaseCharArrayElements$set(MemorySegment seg, long index, MemorySegment x) {
        constants$75.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static ReleaseCharArrayElements ReleaseCharArrayElements(MemorySegment segment, SegmentScope scope) {
        return ReleaseCharArrayElements.ofAddress(ReleaseCharArrayElements$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*ReleaseShortArrayElements)(struct JNINativeInterface_**,struct _jobject*,short*,long);
     * }
     */
    public interface ReleaseShortArrayElements {

        void apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, int _x3);
        static MemorySegment allocate(ReleaseShortArrayElements fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(constants$75.const$4, fi, constants$46.const$0, scope);
        }
        static ReleaseShortArrayElements ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, int __x3) -> {
                try {
                    constants$46.const$2.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle ReleaseShortArrayElements$VH() {
        return constants$75.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*ReleaseShortArrayElements)(struct JNINativeInterface_**,struct _jobject*,short*,long);
     * }
     */
    public static MemorySegment ReleaseShortArrayElements$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$75.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*ReleaseShortArrayElements)(struct JNINativeInterface_**,struct _jobject*,short*,long);
     * }
     */
    public static void ReleaseShortArrayElements$set(MemorySegment seg, MemorySegment x) {
        constants$75.const$5.set(seg, x);
    }
    public static MemorySegment ReleaseShortArrayElements$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$75.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void ReleaseShortArrayElements$set(MemorySegment seg, long index, MemorySegment x) {
        constants$75.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static ReleaseShortArrayElements ReleaseShortArrayElements(MemorySegment segment, SegmentScope scope) {
        return ReleaseShortArrayElements.ofAddress(ReleaseShortArrayElements$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*ReleaseIntArrayElements)(struct JNINativeInterface_**,struct _jobject*,long*,long);
     * }
     */
    public interface ReleaseIntArrayElements {

        void apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, int _x3);
        static MemorySegment allocate(ReleaseIntArrayElements fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(constants$76.const$0, fi, constants$46.const$0, scope);
        }
        static ReleaseIntArrayElements ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, int __x3) -> {
                try {
                    constants$46.const$2.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle ReleaseIntArrayElements$VH() {
        return constants$76.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*ReleaseIntArrayElements)(struct JNINativeInterface_**,struct _jobject*,long*,long);
     * }
     */
    public static MemorySegment ReleaseIntArrayElements$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$76.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*ReleaseIntArrayElements)(struct JNINativeInterface_**,struct _jobject*,long*,long);
     * }
     */
    public static void ReleaseIntArrayElements$set(MemorySegment seg, MemorySegment x) {
        constants$76.const$1.set(seg, x);
    }
    public static MemorySegment ReleaseIntArrayElements$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$76.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void ReleaseIntArrayElements$set(MemorySegment seg, long index, MemorySegment x) {
        constants$76.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static ReleaseIntArrayElements ReleaseIntArrayElements(MemorySegment segment, SegmentScope scope) {
        return ReleaseIntArrayElements.ofAddress(ReleaseIntArrayElements$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*ReleaseLongArrayElements)(struct JNINativeInterface_**,struct _jobject*,long long*,long);
     * }
     */
    public interface ReleaseLongArrayElements {

        void apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, int _x3);
        static MemorySegment allocate(ReleaseLongArrayElements fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(constants$76.const$2, fi, constants$46.const$0, scope);
        }
        static ReleaseLongArrayElements ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, int __x3) -> {
                try {
                    constants$46.const$2.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle ReleaseLongArrayElements$VH() {
        return constants$76.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*ReleaseLongArrayElements)(struct JNINativeInterface_**,struct _jobject*,long long*,long);
     * }
     */
    public static MemorySegment ReleaseLongArrayElements$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$76.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*ReleaseLongArrayElements)(struct JNINativeInterface_**,struct _jobject*,long long*,long);
     * }
     */
    public static void ReleaseLongArrayElements$set(MemorySegment seg, MemorySegment x) {
        constants$76.const$3.set(seg, x);
    }
    public static MemorySegment ReleaseLongArrayElements$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$76.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void ReleaseLongArrayElements$set(MemorySegment seg, long index, MemorySegment x) {
        constants$76.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static ReleaseLongArrayElements ReleaseLongArrayElements(MemorySegment segment, SegmentScope scope) {
        return ReleaseLongArrayElements.ofAddress(ReleaseLongArrayElements$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*ReleaseFloatArrayElements)(struct JNINativeInterface_**,struct _jobject*,float*,long);
     * }
     */
    public interface ReleaseFloatArrayElements {

        void apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, int _x3);
        static MemorySegment allocate(ReleaseFloatArrayElements fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(constants$76.const$4, fi, constants$46.const$0, scope);
        }
        static ReleaseFloatArrayElements ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, int __x3) -> {
                try {
                    constants$46.const$2.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle ReleaseFloatArrayElements$VH() {
        return constants$76.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*ReleaseFloatArrayElements)(struct JNINativeInterface_**,struct _jobject*,float*,long);
     * }
     */
    public static MemorySegment ReleaseFloatArrayElements$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$76.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*ReleaseFloatArrayElements)(struct JNINativeInterface_**,struct _jobject*,float*,long);
     * }
     */
    public static void ReleaseFloatArrayElements$set(MemorySegment seg, MemorySegment x) {
        constants$76.const$5.set(seg, x);
    }
    public static MemorySegment ReleaseFloatArrayElements$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$76.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void ReleaseFloatArrayElements$set(MemorySegment seg, long index, MemorySegment x) {
        constants$76.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static ReleaseFloatArrayElements ReleaseFloatArrayElements(MemorySegment segment, SegmentScope scope) {
        return ReleaseFloatArrayElements.ofAddress(ReleaseFloatArrayElements$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*ReleaseDoubleArrayElements)(struct JNINativeInterface_**,struct _jobject*,double*,long);
     * }
     */
    public interface ReleaseDoubleArrayElements {

        void apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, int _x3);
        static MemorySegment allocate(ReleaseDoubleArrayElements fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(constants$77.const$0, fi, constants$46.const$0, scope);
        }
        static ReleaseDoubleArrayElements ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, int __x3) -> {
                try {
                    constants$46.const$2.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle ReleaseDoubleArrayElements$VH() {
        return constants$77.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*ReleaseDoubleArrayElements)(struct JNINativeInterface_**,struct _jobject*,double*,long);
     * }
     */
    public static MemorySegment ReleaseDoubleArrayElements$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$77.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*ReleaseDoubleArrayElements)(struct JNINativeInterface_**,struct _jobject*,double*,long);
     * }
     */
    public static void ReleaseDoubleArrayElements$set(MemorySegment seg, MemorySegment x) {
        constants$77.const$1.set(seg, x);
    }
    public static MemorySegment ReleaseDoubleArrayElements$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$77.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void ReleaseDoubleArrayElements$set(MemorySegment seg, long index, MemorySegment x) {
        constants$77.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static ReleaseDoubleArrayElements ReleaseDoubleArrayElements(MemorySegment segment, SegmentScope scope) {
        return ReleaseDoubleArrayElements.ofAddress(ReleaseDoubleArrayElements$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*GetBooleanArrayRegion)(struct JNINativeInterface_**,struct _jobject*,long,long,unsigned char*);
     * }
     */
    public interface GetBooleanArrayRegion {

        void apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, int _x2, int _x3, java.lang.foreign.MemorySegment _x4);
        static MemorySegment allocate(GetBooleanArrayRegion fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(constants$77.const$3, fi, constants$77.const$2, scope);
        }
        static GetBooleanArrayRegion ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, int __x2, int __x3, java.lang.foreign.MemorySegment __x4) -> {
                try {
                    constants$77.const$4.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle GetBooleanArrayRegion$VH() {
        return constants$77.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*GetBooleanArrayRegion)(struct JNINativeInterface_**,struct _jobject*,long,long,unsigned char*);
     * }
     */
    public static MemorySegment GetBooleanArrayRegion$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$77.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*GetBooleanArrayRegion)(struct JNINativeInterface_**,struct _jobject*,long,long,unsigned char*);
     * }
     */
    public static void GetBooleanArrayRegion$set(MemorySegment seg, MemorySegment x) {
        constants$77.const$5.set(seg, x);
    }
    public static MemorySegment GetBooleanArrayRegion$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$77.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void GetBooleanArrayRegion$set(MemorySegment seg, long index, MemorySegment x) {
        constants$77.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetBooleanArrayRegion GetBooleanArrayRegion(MemorySegment segment, SegmentScope scope) {
        return GetBooleanArrayRegion.ofAddress(GetBooleanArrayRegion$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*GetByteArrayRegion)(struct JNINativeInterface_**,struct _jobject*,long,long,signed char*);
     * }
     */
    public interface GetByteArrayRegion {

        void apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, int _x2, int _x3, java.lang.foreign.MemorySegment _x4);
        static MemorySegment allocate(GetByteArrayRegion fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(constants$78.const$0, fi, constants$77.const$2, scope);
        }
        static GetByteArrayRegion ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, int __x2, int __x3, java.lang.foreign.MemorySegment __x4) -> {
                try {
                    constants$77.const$4.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle GetByteArrayRegion$VH() {
        return constants$78.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*GetByteArrayRegion)(struct JNINativeInterface_**,struct _jobject*,long,long,signed char*);
     * }
     */
    public static MemorySegment GetByteArrayRegion$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$78.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*GetByteArrayRegion)(struct JNINativeInterface_**,struct _jobject*,long,long,signed char*);
     * }
     */
    public static void GetByteArrayRegion$set(MemorySegment seg, MemorySegment x) {
        constants$78.const$1.set(seg, x);
    }
    public static MemorySegment GetByteArrayRegion$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$78.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void GetByteArrayRegion$set(MemorySegment seg, long index, MemorySegment x) {
        constants$78.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetByteArrayRegion GetByteArrayRegion(MemorySegment segment, SegmentScope scope) {
        return GetByteArrayRegion.ofAddress(GetByteArrayRegion$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*GetCharArrayRegion)(struct JNINativeInterface_**,struct _jobject*,long,long,unsigned short*);
     * }
     */
    public interface GetCharArrayRegion {

        void apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, int _x2, int _x3, java.lang.foreign.MemorySegment _x4);
        static MemorySegment allocate(GetCharArrayRegion fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(constants$78.const$2, fi, constants$77.const$2, scope);
        }
        static GetCharArrayRegion ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, int __x2, int __x3, java.lang.foreign.MemorySegment __x4) -> {
                try {
                    constants$77.const$4.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle GetCharArrayRegion$VH() {
        return constants$78.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*GetCharArrayRegion)(struct JNINativeInterface_**,struct _jobject*,long,long,unsigned short*);
     * }
     */
    public static MemorySegment GetCharArrayRegion$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$78.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*GetCharArrayRegion)(struct JNINativeInterface_**,struct _jobject*,long,long,unsigned short*);
     * }
     */
    public static void GetCharArrayRegion$set(MemorySegment seg, MemorySegment x) {
        constants$78.const$3.set(seg, x);
    }
    public static MemorySegment GetCharArrayRegion$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$78.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void GetCharArrayRegion$set(MemorySegment seg, long index, MemorySegment x) {
        constants$78.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetCharArrayRegion GetCharArrayRegion(MemorySegment segment, SegmentScope scope) {
        return GetCharArrayRegion.ofAddress(GetCharArrayRegion$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*GetShortArrayRegion)(struct JNINativeInterface_**,struct _jobject*,long,long,short*);
     * }
     */
    public interface GetShortArrayRegion {

        void apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, int _x2, int _x3, java.lang.foreign.MemorySegment _x4);
        static MemorySegment allocate(GetShortArrayRegion fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(constants$78.const$4, fi, constants$77.const$2, scope);
        }
        static GetShortArrayRegion ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, int __x2, int __x3, java.lang.foreign.MemorySegment __x4) -> {
                try {
                    constants$77.const$4.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle GetShortArrayRegion$VH() {
        return constants$78.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*GetShortArrayRegion)(struct JNINativeInterface_**,struct _jobject*,long,long,short*);
     * }
     */
    public static MemorySegment GetShortArrayRegion$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$78.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*GetShortArrayRegion)(struct JNINativeInterface_**,struct _jobject*,long,long,short*);
     * }
     */
    public static void GetShortArrayRegion$set(MemorySegment seg, MemorySegment x) {
        constants$78.const$5.set(seg, x);
    }
    public static MemorySegment GetShortArrayRegion$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$78.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void GetShortArrayRegion$set(MemorySegment seg, long index, MemorySegment x) {
        constants$78.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetShortArrayRegion GetShortArrayRegion(MemorySegment segment, SegmentScope scope) {
        return GetShortArrayRegion.ofAddress(GetShortArrayRegion$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*GetIntArrayRegion)(struct JNINativeInterface_**,struct _jobject*,long,long,long*);
     * }
     */
    public interface GetIntArrayRegion {

        void apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, int _x2, int _x3, java.lang.foreign.MemorySegment _x4);
        static MemorySegment allocate(GetIntArrayRegion fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(constants$79.const$0, fi, constants$77.const$2, scope);
        }
        static GetIntArrayRegion ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, int __x2, int __x3, java.lang.foreign.MemorySegment __x4) -> {
                try {
                    constants$77.const$4.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle GetIntArrayRegion$VH() {
        return constants$79.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*GetIntArrayRegion)(struct JNINativeInterface_**,struct _jobject*,long,long,long*);
     * }
     */
    public static MemorySegment GetIntArrayRegion$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$79.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*GetIntArrayRegion)(struct JNINativeInterface_**,struct _jobject*,long,long,long*);
     * }
     */
    public static void GetIntArrayRegion$set(MemorySegment seg, MemorySegment x) {
        constants$79.const$1.set(seg, x);
    }
    public static MemorySegment GetIntArrayRegion$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$79.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void GetIntArrayRegion$set(MemorySegment seg, long index, MemorySegment x) {
        constants$79.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetIntArrayRegion GetIntArrayRegion(MemorySegment segment, SegmentScope scope) {
        return GetIntArrayRegion.ofAddress(GetIntArrayRegion$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*GetLongArrayRegion)(struct JNINativeInterface_**,struct _jobject*,long,long,long long*);
     * }
     */
    public interface GetLongArrayRegion {

        void apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, int _x2, int _x3, java.lang.foreign.MemorySegment _x4);
        static MemorySegment allocate(GetLongArrayRegion fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(constants$79.const$2, fi, constants$77.const$2, scope);
        }
        static GetLongArrayRegion ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, int __x2, int __x3, java.lang.foreign.MemorySegment __x4) -> {
                try {
                    constants$77.const$4.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle GetLongArrayRegion$VH() {
        return constants$79.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*GetLongArrayRegion)(struct JNINativeInterface_**,struct _jobject*,long,long,long long*);
     * }
     */
    public static MemorySegment GetLongArrayRegion$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$79.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*GetLongArrayRegion)(struct JNINativeInterface_**,struct _jobject*,long,long,long long*);
     * }
     */
    public static void GetLongArrayRegion$set(MemorySegment seg, MemorySegment x) {
        constants$79.const$3.set(seg, x);
    }
    public static MemorySegment GetLongArrayRegion$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$79.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void GetLongArrayRegion$set(MemorySegment seg, long index, MemorySegment x) {
        constants$79.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetLongArrayRegion GetLongArrayRegion(MemorySegment segment, SegmentScope scope) {
        return GetLongArrayRegion.ofAddress(GetLongArrayRegion$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*GetFloatArrayRegion)(struct JNINativeInterface_**,struct _jobject*,long,long,float*);
     * }
     */
    public interface GetFloatArrayRegion {

        void apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, int _x2, int _x3, java.lang.foreign.MemorySegment _x4);
        static MemorySegment allocate(GetFloatArrayRegion fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(constants$79.const$4, fi, constants$77.const$2, scope);
        }
        static GetFloatArrayRegion ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, int __x2, int __x3, java.lang.foreign.MemorySegment __x4) -> {
                try {
                    constants$77.const$4.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle GetFloatArrayRegion$VH() {
        return constants$79.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*GetFloatArrayRegion)(struct JNINativeInterface_**,struct _jobject*,long,long,float*);
     * }
     */
    public static MemorySegment GetFloatArrayRegion$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$79.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*GetFloatArrayRegion)(struct JNINativeInterface_**,struct _jobject*,long,long,float*);
     * }
     */
    public static void GetFloatArrayRegion$set(MemorySegment seg, MemorySegment x) {
        constants$79.const$5.set(seg, x);
    }
    public static MemorySegment GetFloatArrayRegion$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$79.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void GetFloatArrayRegion$set(MemorySegment seg, long index, MemorySegment x) {
        constants$79.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetFloatArrayRegion GetFloatArrayRegion(MemorySegment segment, SegmentScope scope) {
        return GetFloatArrayRegion.ofAddress(GetFloatArrayRegion$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*GetDoubleArrayRegion)(struct JNINativeInterface_**,struct _jobject*,long,long,double*);
     * }
     */
    public interface GetDoubleArrayRegion {

        void apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, int _x2, int _x3, java.lang.foreign.MemorySegment _x4);
        static MemorySegment allocate(GetDoubleArrayRegion fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(constants$80.const$0, fi, constants$77.const$2, scope);
        }
        static GetDoubleArrayRegion ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, int __x2, int __x3, java.lang.foreign.MemorySegment __x4) -> {
                try {
                    constants$77.const$4.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle GetDoubleArrayRegion$VH() {
        return constants$80.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*GetDoubleArrayRegion)(struct JNINativeInterface_**,struct _jobject*,long,long,double*);
     * }
     */
    public static MemorySegment GetDoubleArrayRegion$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$80.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*GetDoubleArrayRegion)(struct JNINativeInterface_**,struct _jobject*,long,long,double*);
     * }
     */
    public static void GetDoubleArrayRegion$set(MemorySegment seg, MemorySegment x) {
        constants$80.const$1.set(seg, x);
    }
    public static MemorySegment GetDoubleArrayRegion$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$80.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void GetDoubleArrayRegion$set(MemorySegment seg, long index, MemorySegment x) {
        constants$80.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetDoubleArrayRegion GetDoubleArrayRegion(MemorySegment segment, SegmentScope scope) {
        return GetDoubleArrayRegion.ofAddress(GetDoubleArrayRegion$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*SetBooleanArrayRegion)(struct JNINativeInterface_**,struct _jobject*,long,long,unsigned char*);
     * }
     */
    public interface SetBooleanArrayRegion {

        void apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, int _x2, int _x3, java.lang.foreign.MemorySegment _x4);
        static MemorySegment allocate(SetBooleanArrayRegion fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(constants$80.const$2, fi, constants$77.const$2, scope);
        }
        static SetBooleanArrayRegion ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, int __x2, int __x3, java.lang.foreign.MemorySegment __x4) -> {
                try {
                    constants$77.const$4.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle SetBooleanArrayRegion$VH() {
        return constants$80.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*SetBooleanArrayRegion)(struct JNINativeInterface_**,struct _jobject*,long,long,unsigned char*);
     * }
     */
    public static MemorySegment SetBooleanArrayRegion$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$80.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*SetBooleanArrayRegion)(struct JNINativeInterface_**,struct _jobject*,long,long,unsigned char*);
     * }
     */
    public static void SetBooleanArrayRegion$set(MemorySegment seg, MemorySegment x) {
        constants$80.const$3.set(seg, x);
    }
    public static MemorySegment SetBooleanArrayRegion$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$80.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void SetBooleanArrayRegion$set(MemorySegment seg, long index, MemorySegment x) {
        constants$80.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static SetBooleanArrayRegion SetBooleanArrayRegion(MemorySegment segment, SegmentScope scope) {
        return SetBooleanArrayRegion.ofAddress(SetBooleanArrayRegion$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*SetByteArrayRegion)(struct JNINativeInterface_**,struct _jobject*,long,long,signed char*);
     * }
     */
    public interface SetByteArrayRegion {

        void apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, int _x2, int _x3, java.lang.foreign.MemorySegment _x4);
        static MemorySegment allocate(SetByteArrayRegion fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(constants$80.const$4, fi, constants$77.const$2, scope);
        }
        static SetByteArrayRegion ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, int __x2, int __x3, java.lang.foreign.MemorySegment __x4) -> {
                try {
                    constants$77.const$4.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle SetByteArrayRegion$VH() {
        return constants$80.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*SetByteArrayRegion)(struct JNINativeInterface_**,struct _jobject*,long,long,signed char*);
     * }
     */
    public static MemorySegment SetByteArrayRegion$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$80.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*SetByteArrayRegion)(struct JNINativeInterface_**,struct _jobject*,long,long,signed char*);
     * }
     */
    public static void SetByteArrayRegion$set(MemorySegment seg, MemorySegment x) {
        constants$80.const$5.set(seg, x);
    }
    public static MemorySegment SetByteArrayRegion$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$80.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void SetByteArrayRegion$set(MemorySegment seg, long index, MemorySegment x) {
        constants$80.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static SetByteArrayRegion SetByteArrayRegion(MemorySegment segment, SegmentScope scope) {
        return SetByteArrayRegion.ofAddress(SetByteArrayRegion$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*SetCharArrayRegion)(struct JNINativeInterface_**,struct _jobject*,long,long,unsigned short*);
     * }
     */
    public interface SetCharArrayRegion {

        void apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, int _x2, int _x3, java.lang.foreign.MemorySegment _x4);
        static MemorySegment allocate(SetCharArrayRegion fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(constants$81.const$0, fi, constants$77.const$2, scope);
        }
        static SetCharArrayRegion ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, int __x2, int __x3, java.lang.foreign.MemorySegment __x4) -> {
                try {
                    constants$77.const$4.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle SetCharArrayRegion$VH() {
        return constants$81.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*SetCharArrayRegion)(struct JNINativeInterface_**,struct _jobject*,long,long,unsigned short*);
     * }
     */
    public static MemorySegment SetCharArrayRegion$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$81.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*SetCharArrayRegion)(struct JNINativeInterface_**,struct _jobject*,long,long,unsigned short*);
     * }
     */
    public static void SetCharArrayRegion$set(MemorySegment seg, MemorySegment x) {
        constants$81.const$1.set(seg, x);
    }
    public static MemorySegment SetCharArrayRegion$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$81.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void SetCharArrayRegion$set(MemorySegment seg, long index, MemorySegment x) {
        constants$81.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static SetCharArrayRegion SetCharArrayRegion(MemorySegment segment, SegmentScope scope) {
        return SetCharArrayRegion.ofAddress(SetCharArrayRegion$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*SetShortArrayRegion)(struct JNINativeInterface_**,struct _jobject*,long,long,short*);
     * }
     */
    public interface SetShortArrayRegion {

        void apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, int _x2, int _x3, java.lang.foreign.MemorySegment _x4);
        static MemorySegment allocate(SetShortArrayRegion fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(constants$81.const$2, fi, constants$77.const$2, scope);
        }
        static SetShortArrayRegion ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, int __x2, int __x3, java.lang.foreign.MemorySegment __x4) -> {
                try {
                    constants$77.const$4.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle SetShortArrayRegion$VH() {
        return constants$81.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*SetShortArrayRegion)(struct JNINativeInterface_**,struct _jobject*,long,long,short*);
     * }
     */
    public static MemorySegment SetShortArrayRegion$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$81.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*SetShortArrayRegion)(struct JNINativeInterface_**,struct _jobject*,long,long,short*);
     * }
     */
    public static void SetShortArrayRegion$set(MemorySegment seg, MemorySegment x) {
        constants$81.const$3.set(seg, x);
    }
    public static MemorySegment SetShortArrayRegion$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$81.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void SetShortArrayRegion$set(MemorySegment seg, long index, MemorySegment x) {
        constants$81.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static SetShortArrayRegion SetShortArrayRegion(MemorySegment segment, SegmentScope scope) {
        return SetShortArrayRegion.ofAddress(SetShortArrayRegion$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*SetIntArrayRegion)(struct JNINativeInterface_**,struct _jobject*,long,long,long*);
     * }
     */
    public interface SetIntArrayRegion {

        void apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, int _x2, int _x3, java.lang.foreign.MemorySegment _x4);
        static MemorySegment allocate(SetIntArrayRegion fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(constants$81.const$4, fi, constants$77.const$2, scope);
        }
        static SetIntArrayRegion ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, int __x2, int __x3, java.lang.foreign.MemorySegment __x4) -> {
                try {
                    constants$77.const$4.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle SetIntArrayRegion$VH() {
        return constants$81.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*SetIntArrayRegion)(struct JNINativeInterface_**,struct _jobject*,long,long,long*);
     * }
     */
    public static MemorySegment SetIntArrayRegion$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$81.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*SetIntArrayRegion)(struct JNINativeInterface_**,struct _jobject*,long,long,long*);
     * }
     */
    public static void SetIntArrayRegion$set(MemorySegment seg, MemorySegment x) {
        constants$81.const$5.set(seg, x);
    }
    public static MemorySegment SetIntArrayRegion$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$81.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void SetIntArrayRegion$set(MemorySegment seg, long index, MemorySegment x) {
        constants$81.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static SetIntArrayRegion SetIntArrayRegion(MemorySegment segment, SegmentScope scope) {
        return SetIntArrayRegion.ofAddress(SetIntArrayRegion$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*SetLongArrayRegion)(struct JNINativeInterface_**,struct _jobject*,long,long,long long*);
     * }
     */
    public interface SetLongArrayRegion {

        void apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, int _x2, int _x3, java.lang.foreign.MemorySegment _x4);
        static MemorySegment allocate(SetLongArrayRegion fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(constants$82.const$0, fi, constants$77.const$2, scope);
        }
        static SetLongArrayRegion ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, int __x2, int __x3, java.lang.foreign.MemorySegment __x4) -> {
                try {
                    constants$77.const$4.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle SetLongArrayRegion$VH() {
        return constants$82.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*SetLongArrayRegion)(struct JNINativeInterface_**,struct _jobject*,long,long,long long*);
     * }
     */
    public static MemorySegment SetLongArrayRegion$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$82.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*SetLongArrayRegion)(struct JNINativeInterface_**,struct _jobject*,long,long,long long*);
     * }
     */
    public static void SetLongArrayRegion$set(MemorySegment seg, MemorySegment x) {
        constants$82.const$1.set(seg, x);
    }
    public static MemorySegment SetLongArrayRegion$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$82.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void SetLongArrayRegion$set(MemorySegment seg, long index, MemorySegment x) {
        constants$82.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static SetLongArrayRegion SetLongArrayRegion(MemorySegment segment, SegmentScope scope) {
        return SetLongArrayRegion.ofAddress(SetLongArrayRegion$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*SetFloatArrayRegion)(struct JNINativeInterface_**,struct _jobject*,long,long,float*);
     * }
     */
    public interface SetFloatArrayRegion {

        void apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, int _x2, int _x3, java.lang.foreign.MemorySegment _x4);
        static MemorySegment allocate(SetFloatArrayRegion fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(constants$82.const$2, fi, constants$77.const$2, scope);
        }
        static SetFloatArrayRegion ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, int __x2, int __x3, java.lang.foreign.MemorySegment __x4) -> {
                try {
                    constants$77.const$4.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle SetFloatArrayRegion$VH() {
        return constants$82.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*SetFloatArrayRegion)(struct JNINativeInterface_**,struct _jobject*,long,long,float*);
     * }
     */
    public static MemorySegment SetFloatArrayRegion$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$82.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*SetFloatArrayRegion)(struct JNINativeInterface_**,struct _jobject*,long,long,float*);
     * }
     */
    public static void SetFloatArrayRegion$set(MemorySegment seg, MemorySegment x) {
        constants$82.const$3.set(seg, x);
    }
    public static MemorySegment SetFloatArrayRegion$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$82.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void SetFloatArrayRegion$set(MemorySegment seg, long index, MemorySegment x) {
        constants$82.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static SetFloatArrayRegion SetFloatArrayRegion(MemorySegment segment, SegmentScope scope) {
        return SetFloatArrayRegion.ofAddress(SetFloatArrayRegion$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*SetDoubleArrayRegion)(struct JNINativeInterface_**,struct _jobject*,long,long,double*);
     * }
     */
    public interface SetDoubleArrayRegion {

        void apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, int _x2, int _x3, java.lang.foreign.MemorySegment _x4);
        static MemorySegment allocate(SetDoubleArrayRegion fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(constants$82.const$4, fi, constants$77.const$2, scope);
        }
        static SetDoubleArrayRegion ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, int __x2, int __x3, java.lang.foreign.MemorySegment __x4) -> {
                try {
                    constants$77.const$4.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle SetDoubleArrayRegion$VH() {
        return constants$82.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*SetDoubleArrayRegion)(struct JNINativeInterface_**,struct _jobject*,long,long,double*);
     * }
     */
    public static MemorySegment SetDoubleArrayRegion$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$82.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*SetDoubleArrayRegion)(struct JNINativeInterface_**,struct _jobject*,long,long,double*);
     * }
     */
    public static void SetDoubleArrayRegion$set(MemorySegment seg, MemorySegment x) {
        constants$82.const$5.set(seg, x);
    }
    public static MemorySegment SetDoubleArrayRegion$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$82.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void SetDoubleArrayRegion$set(MemorySegment seg, long index, MemorySegment x) {
        constants$82.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static SetDoubleArrayRegion SetDoubleArrayRegion(MemorySegment segment, SegmentScope scope) {
        return SetDoubleArrayRegion.ofAddress(SetDoubleArrayRegion$get(segment), scope);
    }
    /**
     * {@snippet :
 * long (*RegisterNatives)(struct JNINativeInterface_**,struct _jobject*,struct JNINativeMethod*,long);
     * }
     */
    public interface RegisterNatives {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, int _x3);
        static MemorySegment allocate(RegisterNatives fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(constants$83.const$1, fi, constants$83.const$0, scope);
        }
        static RegisterNatives ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, int __x3) -> {
                try {
                    return (int)constants$83.const$2.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle RegisterNatives$VH() {
        return constants$83.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * long (*RegisterNatives)(struct JNINativeInterface_**,struct _jobject*,struct JNINativeMethod*,long);
     * }
     */
    public static MemorySegment RegisterNatives$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$83.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * long (*RegisterNatives)(struct JNINativeInterface_**,struct _jobject*,struct JNINativeMethod*,long);
     * }
     */
    public static void RegisterNatives$set(MemorySegment seg, MemorySegment x) {
        constants$83.const$3.set(seg, x);
    }
    public static MemorySegment RegisterNatives$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$83.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void RegisterNatives$set(MemorySegment seg, long index, MemorySegment x) {
        constants$83.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static RegisterNatives RegisterNatives(MemorySegment segment, SegmentScope scope) {
        return RegisterNatives.ofAddress(RegisterNatives$get(segment), scope);
    }
    /**
     * {@snippet :
 * long (*UnregisterNatives)(struct JNINativeInterface_**,struct _jobject*);
     * }
     */
    public interface UnregisterNatives {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(UnregisterNatives fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(constants$83.const$4, fi, constants$7.const$5, scope);
        }
        static UnregisterNatives ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$8.const$1.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle UnregisterNatives$VH() {
        return constants$83.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * long (*UnregisterNatives)(struct JNINativeInterface_**,struct _jobject*);
     * }
     */
    public static MemorySegment UnregisterNatives$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$83.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * long (*UnregisterNatives)(struct JNINativeInterface_**,struct _jobject*);
     * }
     */
    public static void UnregisterNatives$set(MemorySegment seg, MemorySegment x) {
        constants$83.const$5.set(seg, x);
    }
    public static MemorySegment UnregisterNatives$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$83.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void UnregisterNatives$set(MemorySegment seg, long index, MemorySegment x) {
        constants$83.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static UnregisterNatives UnregisterNatives(MemorySegment segment, SegmentScope scope) {
        return UnregisterNatives.ofAddress(UnregisterNatives$get(segment), scope);
    }
    /**
     * {@snippet :
 * long (*MonitorEnter)(struct JNINativeInterface_**,struct _jobject*);
     * }
     */
    public interface MonitorEnter {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(MonitorEnter fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(constants$84.const$0, fi, constants$7.const$5, scope);
        }
        static MonitorEnter ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$8.const$1.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle MonitorEnter$VH() {
        return constants$84.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * long (*MonitorEnter)(struct JNINativeInterface_**,struct _jobject*);
     * }
     */
    public static MemorySegment MonitorEnter$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$84.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * long (*MonitorEnter)(struct JNINativeInterface_**,struct _jobject*);
     * }
     */
    public static void MonitorEnter$set(MemorySegment seg, MemorySegment x) {
        constants$84.const$1.set(seg, x);
    }
    public static MemorySegment MonitorEnter$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$84.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void MonitorEnter$set(MemorySegment seg, long index, MemorySegment x) {
        constants$84.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static MonitorEnter MonitorEnter(MemorySegment segment, SegmentScope scope) {
        return MonitorEnter.ofAddress(MonitorEnter$get(segment), scope);
    }
    /**
     * {@snippet :
 * long (*MonitorExit)(struct JNINativeInterface_**,struct _jobject*);
     * }
     */
    public interface MonitorExit {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(MonitorExit fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(constants$84.const$2, fi, constants$7.const$5, scope);
        }
        static MonitorExit ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$8.const$1.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle MonitorExit$VH() {
        return constants$84.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * long (*MonitorExit)(struct JNINativeInterface_**,struct _jobject*);
     * }
     */
    public static MemorySegment MonitorExit$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$84.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * long (*MonitorExit)(struct JNINativeInterface_**,struct _jobject*);
     * }
     */
    public static void MonitorExit$set(MemorySegment seg, MemorySegment x) {
        constants$84.const$3.set(seg, x);
    }
    public static MemorySegment MonitorExit$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$84.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void MonitorExit$set(MemorySegment seg, long index, MemorySegment x) {
        constants$84.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static MonitorExit MonitorExit(MemorySegment segment, SegmentScope scope) {
        return MonitorExit.ofAddress(MonitorExit$get(segment), scope);
    }
    /**
     * {@snippet :
 * long (*GetJavaVM)(struct JNINativeInterface_**,struct JNIInvokeInterface_***);
     * }
     */
    public interface GetJavaVM {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(GetJavaVM fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(constants$84.const$4, fi, constants$7.const$5, scope);
        }
        static GetJavaVM ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$8.const$1.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle GetJavaVM$VH() {
        return constants$84.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * long (*GetJavaVM)(struct JNINativeInterface_**,struct JNIInvokeInterface_***);
     * }
     */
    public static MemorySegment GetJavaVM$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$84.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * long (*GetJavaVM)(struct JNINativeInterface_**,struct JNIInvokeInterface_***);
     * }
     */
    public static void GetJavaVM$set(MemorySegment seg, MemorySegment x) {
        constants$84.const$5.set(seg, x);
    }
    public static MemorySegment GetJavaVM$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$84.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void GetJavaVM$set(MemorySegment seg, long index, MemorySegment x) {
        constants$84.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetJavaVM GetJavaVM(MemorySegment segment, SegmentScope scope) {
        return GetJavaVM.ofAddress(GetJavaVM$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*GetStringRegion)(struct JNINativeInterface_**,struct _jobject*,long,long,unsigned short*);
     * }
     */
    public interface GetStringRegion {

        void apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, int _x2, int _x3, java.lang.foreign.MemorySegment _x4);
        static MemorySegment allocate(GetStringRegion fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(constants$85.const$0, fi, constants$77.const$2, scope);
        }
        static GetStringRegion ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, int __x2, int __x3, java.lang.foreign.MemorySegment __x4) -> {
                try {
                    constants$77.const$4.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle GetStringRegion$VH() {
        return constants$85.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*GetStringRegion)(struct JNINativeInterface_**,struct _jobject*,long,long,unsigned short*);
     * }
     */
    public static MemorySegment GetStringRegion$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$85.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*GetStringRegion)(struct JNINativeInterface_**,struct _jobject*,long,long,unsigned short*);
     * }
     */
    public static void GetStringRegion$set(MemorySegment seg, MemorySegment x) {
        constants$85.const$1.set(seg, x);
    }
    public static MemorySegment GetStringRegion$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$85.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void GetStringRegion$set(MemorySegment seg, long index, MemorySegment x) {
        constants$85.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetStringRegion GetStringRegion(MemorySegment segment, SegmentScope scope) {
        return GetStringRegion.ofAddress(GetStringRegion$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*GetStringUTFRegion)(struct JNINativeInterface_**,struct _jobject*,long,long,char*);
     * }
     */
    public interface GetStringUTFRegion {

        void apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, int _x2, int _x3, java.lang.foreign.MemorySegment _x4);
        static MemorySegment allocate(GetStringUTFRegion fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(constants$85.const$2, fi, constants$77.const$2, scope);
        }
        static GetStringUTFRegion ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, int __x2, int __x3, java.lang.foreign.MemorySegment __x4) -> {
                try {
                    constants$77.const$4.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle GetStringUTFRegion$VH() {
        return constants$85.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*GetStringUTFRegion)(struct JNINativeInterface_**,struct _jobject*,long,long,char*);
     * }
     */
    public static MemorySegment GetStringUTFRegion$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$85.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*GetStringUTFRegion)(struct JNINativeInterface_**,struct _jobject*,long,long,char*);
     * }
     */
    public static void GetStringUTFRegion$set(MemorySegment seg, MemorySegment x) {
        constants$85.const$3.set(seg, x);
    }
    public static MemorySegment GetStringUTFRegion$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$85.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void GetStringUTFRegion$set(MemorySegment seg, long index, MemorySegment x) {
        constants$85.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetStringUTFRegion GetStringUTFRegion(MemorySegment segment, SegmentScope scope) {
        return GetStringUTFRegion.ofAddress(GetStringUTFRegion$get(segment), scope);
    }
    /**
     * {@snippet :
 * void* (*GetPrimitiveArrayCritical)(struct JNINativeInterface_**,struct _jobject*,unsigned char*);
     * }
     */
    public interface GetPrimitiveArrayCritical {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(GetPrimitiveArrayCritical fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(constants$85.const$4, fi, constants$39.const$0, scope);
        }
        static GetPrimitiveArrayCritical ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$39.const$2.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle GetPrimitiveArrayCritical$VH() {
        return constants$85.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void* (*GetPrimitiveArrayCritical)(struct JNINativeInterface_**,struct _jobject*,unsigned char*);
     * }
     */
    public static MemorySegment GetPrimitiveArrayCritical$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$85.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void* (*GetPrimitiveArrayCritical)(struct JNINativeInterface_**,struct _jobject*,unsigned char*);
     * }
     */
    public static void GetPrimitiveArrayCritical$set(MemorySegment seg, MemorySegment x) {
        constants$85.const$5.set(seg, x);
    }
    public static MemorySegment GetPrimitiveArrayCritical$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$85.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void GetPrimitiveArrayCritical$set(MemorySegment seg, long index, MemorySegment x) {
        constants$85.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetPrimitiveArrayCritical GetPrimitiveArrayCritical(MemorySegment segment, SegmentScope scope) {
        return GetPrimitiveArrayCritical.ofAddress(GetPrimitiveArrayCritical$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*ReleasePrimitiveArrayCritical)(struct JNINativeInterface_**,struct _jobject*,void*,long);
     * }
     */
    public interface ReleasePrimitiveArrayCritical {

        void apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, int _x3);
        static MemorySegment allocate(ReleasePrimitiveArrayCritical fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(constants$86.const$0, fi, constants$46.const$0, scope);
        }
        static ReleasePrimitiveArrayCritical ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, int __x3) -> {
                try {
                    constants$46.const$2.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle ReleasePrimitiveArrayCritical$VH() {
        return constants$86.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*ReleasePrimitiveArrayCritical)(struct JNINativeInterface_**,struct _jobject*,void*,long);
     * }
     */
    public static MemorySegment ReleasePrimitiveArrayCritical$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$86.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*ReleasePrimitiveArrayCritical)(struct JNINativeInterface_**,struct _jobject*,void*,long);
     * }
     */
    public static void ReleasePrimitiveArrayCritical$set(MemorySegment seg, MemorySegment x) {
        constants$86.const$1.set(seg, x);
    }
    public static MemorySegment ReleasePrimitiveArrayCritical$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$86.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void ReleasePrimitiveArrayCritical$set(MemorySegment seg, long index, MemorySegment x) {
        constants$86.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static ReleasePrimitiveArrayCritical ReleasePrimitiveArrayCritical(MemorySegment segment, SegmentScope scope) {
        return ReleasePrimitiveArrayCritical.ofAddress(ReleasePrimitiveArrayCritical$get(segment), scope);
    }
    /**
     * {@snippet :
 * unsigned short* (*GetStringCritical)(struct JNINativeInterface_**,struct _jobject*,unsigned char*);
     * }
     */
    public interface GetStringCritical {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(GetStringCritical fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(constants$86.const$2, fi, constants$39.const$0, scope);
        }
        static GetStringCritical ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$39.const$2.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle GetStringCritical$VH() {
        return constants$86.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned short* (*GetStringCritical)(struct JNINativeInterface_**,struct _jobject*,unsigned char*);
     * }
     */
    public static MemorySegment GetStringCritical$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$86.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned short* (*GetStringCritical)(struct JNINativeInterface_**,struct _jobject*,unsigned char*);
     * }
     */
    public static void GetStringCritical$set(MemorySegment seg, MemorySegment x) {
        constants$86.const$3.set(seg, x);
    }
    public static MemorySegment GetStringCritical$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$86.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void GetStringCritical$set(MemorySegment seg, long index, MemorySegment x) {
        constants$86.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetStringCritical GetStringCritical(MemorySegment segment, SegmentScope scope) {
        return GetStringCritical.ofAddress(GetStringCritical$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*ReleaseStringCritical)(struct JNINativeInterface_**,struct _jobject*,unsigned short*);
     * }
     */
    public interface ReleaseStringCritical {

        void apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(ReleaseStringCritical fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(constants$86.const$4, fi, constants$65.const$0, scope);
        }
        static ReleaseStringCritical ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    constants$65.const$2.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle ReleaseStringCritical$VH() {
        return constants$86.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*ReleaseStringCritical)(struct JNINativeInterface_**,struct _jobject*,unsigned short*);
     * }
     */
    public static MemorySegment ReleaseStringCritical$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$86.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*ReleaseStringCritical)(struct JNINativeInterface_**,struct _jobject*,unsigned short*);
     * }
     */
    public static void ReleaseStringCritical$set(MemorySegment seg, MemorySegment x) {
        constants$86.const$5.set(seg, x);
    }
    public static MemorySegment ReleaseStringCritical$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$86.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void ReleaseStringCritical$set(MemorySegment seg, long index, MemorySegment x) {
        constants$86.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static ReleaseStringCritical ReleaseStringCritical(MemorySegment segment, SegmentScope scope) {
        return ReleaseStringCritical.ofAddress(ReleaseStringCritical$get(segment), scope);
    }
    /**
     * {@snippet :
 * struct _jobject* (*NewWeakGlobalRef)(struct JNINativeInterface_**,struct _jobject*);
     * }
     */
    public interface NewWeakGlobalRef {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(NewWeakGlobalRef fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(constants$87.const$0, fi, constants$4.const$3, scope);
        }
        static NewWeakGlobalRef ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$4.const$5.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle NewWeakGlobalRef$VH() {
        return constants$87.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * struct _jobject* (*NewWeakGlobalRef)(struct JNINativeInterface_**,struct _jobject*);
     * }
     */
    public static MemorySegment NewWeakGlobalRef$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$87.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * struct _jobject* (*NewWeakGlobalRef)(struct JNINativeInterface_**,struct _jobject*);
     * }
     */
    public static void NewWeakGlobalRef$set(MemorySegment seg, MemorySegment x) {
        constants$87.const$1.set(seg, x);
    }
    public static MemorySegment NewWeakGlobalRef$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$87.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void NewWeakGlobalRef$set(MemorySegment seg, long index, MemorySegment x) {
        constants$87.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static NewWeakGlobalRef NewWeakGlobalRef(MemorySegment segment, SegmentScope scope) {
        return NewWeakGlobalRef.ofAddress(NewWeakGlobalRef$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*DeleteWeakGlobalRef)(struct JNINativeInterface_**,struct _jobject*);
     * }
     */
    public interface DeleteWeakGlobalRef {

        void apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(DeleteWeakGlobalRef fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(constants$87.const$2, fi, constants$10.const$5, scope);
        }
        static DeleteWeakGlobalRef ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    constants$11.const$1.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle DeleteWeakGlobalRef$VH() {
        return constants$87.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*DeleteWeakGlobalRef)(struct JNINativeInterface_**,struct _jobject*);
     * }
     */
    public static MemorySegment DeleteWeakGlobalRef$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$87.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*DeleteWeakGlobalRef)(struct JNINativeInterface_**,struct _jobject*);
     * }
     */
    public static void DeleteWeakGlobalRef$set(MemorySegment seg, MemorySegment x) {
        constants$87.const$3.set(seg, x);
    }
    public static MemorySegment DeleteWeakGlobalRef$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$87.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void DeleteWeakGlobalRef$set(MemorySegment seg, long index, MemorySegment x) {
        constants$87.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static DeleteWeakGlobalRef DeleteWeakGlobalRef(MemorySegment segment, SegmentScope scope) {
        return DeleteWeakGlobalRef.ofAddress(DeleteWeakGlobalRef$get(segment), scope);
    }
    /**
     * {@snippet :
 * unsigned char (*ExceptionCheck)(struct JNINativeInterface_**);
     * }
     */
    public interface ExceptionCheck {

        byte apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(ExceptionCheck fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(constants$87.const$5, fi, constants$87.const$4, scope);
        }
        static ExceptionCheck ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (byte)constants$88.const$0.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle ExceptionCheck$VH() {
        return constants$88.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned char (*ExceptionCheck)(struct JNINativeInterface_**);
     * }
     */
    public static MemorySegment ExceptionCheck$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$88.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned char (*ExceptionCheck)(struct JNINativeInterface_**);
     * }
     */
    public static void ExceptionCheck$set(MemorySegment seg, MemorySegment x) {
        constants$88.const$1.set(seg, x);
    }
    public static MemorySegment ExceptionCheck$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$88.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void ExceptionCheck$set(MemorySegment seg, long index, MemorySegment x) {
        constants$88.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static ExceptionCheck ExceptionCheck(MemorySegment segment, SegmentScope scope) {
        return ExceptionCheck.ofAddress(ExceptionCheck$get(segment), scope);
    }
    /**
     * {@snippet :
 * struct _jobject* (*NewDirectByteBuffer)(struct JNINativeInterface_**,void*,long long);
     * }
     */
    public interface NewDirectByteBuffer {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, long _x2);
        static MemorySegment allocate(NewDirectByteBuffer fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(constants$88.const$3, fi, constants$88.const$2, scope);
        }
        static NewDirectByteBuffer ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, long __x2) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$88.const$4.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle NewDirectByteBuffer$VH() {
        return constants$88.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * struct _jobject* (*NewDirectByteBuffer)(struct JNINativeInterface_**,void*,long long);
     * }
     */
    public static MemorySegment NewDirectByteBuffer$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$88.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * struct _jobject* (*NewDirectByteBuffer)(struct JNINativeInterface_**,void*,long long);
     * }
     */
    public static void NewDirectByteBuffer$set(MemorySegment seg, MemorySegment x) {
        constants$88.const$5.set(seg, x);
    }
    public static MemorySegment NewDirectByteBuffer$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$88.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void NewDirectByteBuffer$set(MemorySegment seg, long index, MemorySegment x) {
        constants$88.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static NewDirectByteBuffer NewDirectByteBuffer(MemorySegment segment, SegmentScope scope) {
        return NewDirectByteBuffer.ofAddress(NewDirectByteBuffer$get(segment), scope);
    }
    /**
     * {@snippet :
 * void* (*GetDirectBufferAddress)(struct JNINativeInterface_**,struct _jobject*);
     * }
     */
    public interface GetDirectBufferAddress {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(GetDirectBufferAddress fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(constants$89.const$0, fi, constants$4.const$3, scope);
        }
        static GetDirectBufferAddress ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$4.const$5.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle GetDirectBufferAddress$VH() {
        return constants$89.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void* (*GetDirectBufferAddress)(struct JNINativeInterface_**,struct _jobject*);
     * }
     */
    public static MemorySegment GetDirectBufferAddress$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$89.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void* (*GetDirectBufferAddress)(struct JNINativeInterface_**,struct _jobject*);
     * }
     */
    public static void GetDirectBufferAddress$set(MemorySegment seg, MemorySegment x) {
        constants$89.const$1.set(seg, x);
    }
    public static MemorySegment GetDirectBufferAddress$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$89.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void GetDirectBufferAddress$set(MemorySegment seg, long index, MemorySegment x) {
        constants$89.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetDirectBufferAddress GetDirectBufferAddress(MemorySegment segment, SegmentScope scope) {
        return GetDirectBufferAddress.ofAddress(GetDirectBufferAddress$get(segment), scope);
    }
    /**
     * {@snippet :
 * long long (*GetDirectBufferCapacity)(struct JNINativeInterface_**,struct _jobject*);
     * }
     */
    public interface GetDirectBufferCapacity {

        long apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(GetDirectBufferCapacity fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(constants$89.const$3, fi, constants$89.const$2, scope);
        }
        static GetDirectBufferCapacity ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (long)constants$89.const$4.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle GetDirectBufferCapacity$VH() {
        return constants$89.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * long long (*GetDirectBufferCapacity)(struct JNINativeInterface_**,struct _jobject*);
     * }
     */
    public static MemorySegment GetDirectBufferCapacity$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$89.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * long long (*GetDirectBufferCapacity)(struct JNINativeInterface_**,struct _jobject*);
     * }
     */
    public static void GetDirectBufferCapacity$set(MemorySegment seg, MemorySegment x) {
        constants$89.const$5.set(seg, x);
    }
    public static MemorySegment GetDirectBufferCapacity$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$89.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void GetDirectBufferCapacity$set(MemorySegment seg, long index, MemorySegment x) {
        constants$89.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetDirectBufferCapacity GetDirectBufferCapacity(MemorySegment segment, SegmentScope scope) {
        return GetDirectBufferCapacity.ofAddress(GetDirectBufferCapacity$get(segment), scope);
    }
    /**
     * {@snippet :
 * enum _jobjectType (*GetObjectRefType)(struct JNINativeInterface_**,struct _jobject*);
     * }
     */
    public interface GetObjectRefType {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(GetObjectRefType fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(constants$90.const$0, fi, constants$7.const$5, scope);
        }
        static GetObjectRefType ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)constants$8.const$1.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle GetObjectRefType$VH() {
        return constants$90.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * enum _jobjectType (*GetObjectRefType)(struct JNINativeInterface_**,struct _jobject*);
     * }
     */
    public static MemorySegment GetObjectRefType$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$90.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * enum _jobjectType (*GetObjectRefType)(struct JNINativeInterface_**,struct _jobject*);
     * }
     */
    public static void GetObjectRefType$set(MemorySegment seg, MemorySegment x) {
        constants$90.const$1.set(seg, x);
    }
    public static MemorySegment GetObjectRefType$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$90.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void GetObjectRefType$set(MemorySegment seg, long index, MemorySegment x) {
        constants$90.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetObjectRefType GetObjectRefType(MemorySegment segment, SegmentScope scope) {
        return GetObjectRefType.ofAddress(GetObjectRefType$get(segment), scope);
    }
    /**
     * {@snippet :
 * struct _jobject* (*GetModule)(struct JNINativeInterface_**,struct _jobject*);
     * }
     */
    public interface GetModule {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(GetModule fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(constants$90.const$2, fi, constants$4.const$3, scope);
        }
        static GetModule ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$4.const$5.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle GetModule$VH() {
        return constants$90.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * struct _jobject* (*GetModule)(struct JNINativeInterface_**,struct _jobject*);
     * }
     */
    public static MemorySegment GetModule$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$90.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * struct _jobject* (*GetModule)(struct JNINativeInterface_**,struct _jobject*);
     * }
     */
    public static void GetModule$set(MemorySegment seg, MemorySegment x) {
        constants$90.const$3.set(seg, x);
    }
    public static MemorySegment GetModule$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$90.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void GetModule$set(MemorySegment seg, long index, MemorySegment x) {
        constants$90.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetModule GetModule(MemorySegment segment, SegmentScope scope) {
        return GetModule.ofAddress(GetModule$get(segment), scope);
    }
    /**
     * {@snippet :
 * unsigned char (*IsVirtualThread)(struct JNINativeInterface_**,struct _jobject*);
     * }
     */
    public interface IsVirtualThread {

        byte apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(IsVirtualThread fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(constants$90.const$5, fi, constants$90.const$4, scope);
        }
        static IsVirtualThread ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (byte)constants$91.const$0.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle IsVirtualThread$VH() {
        return constants$91.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned char (*IsVirtualThread)(struct JNINativeInterface_**,struct _jobject*);
     * }
     */
    public static MemorySegment IsVirtualThread$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$91.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned char (*IsVirtualThread)(struct JNINativeInterface_**,struct _jobject*);
     * }
     */
    public static void IsVirtualThread$set(MemorySegment seg, MemorySegment x) {
        constants$91.const$1.set(seg, x);
    }
    public static MemorySegment IsVirtualThread$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$91.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void IsVirtualThread$set(MemorySegment seg, long index, MemorySegment x) {
        constants$91.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static IsVirtualThread IsVirtualThread(MemorySegment segment, SegmentScope scope) {
        return IsVirtualThread.ofAddress(IsVirtualThread$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


