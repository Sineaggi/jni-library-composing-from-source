// Generated by jextract

package com.sineaggi.jniutils.internal.jni;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct JNIInvokeInterface_ {
 *     void* reserved0;
 *     void* reserved1;
 *     void* reserved2;
 *     long (*DestroyJavaVM)(struct JNIInvokeInterface_**);
 *     long (*AttachCurrentThread)(struct JNIInvokeInterface_**,void**,void*);
 *     long (*DetachCurrentThread)(struct JNIInvokeInterface_**);
 *     long (*GetEnv)(struct JNIInvokeInterface_**,void**,long);
 *     long (*AttachCurrentThreadAsDaemon)(struct JNIInvokeInterface_**,void**,void*);
 * };
 * }
 */
public class JNIInvokeInterface_ {

    public static MemoryLayout $LAYOUT() {
        return constants$93.const$4;
    }
    public static VarHandle reserved0$VH() {
        return constants$93.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void* reserved0;
     * }
     */
    public static MemorySegment reserved0$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$93.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void* reserved0;
     * }
     */
    public static void reserved0$set(MemorySegment seg, MemorySegment x) {
        constants$93.const$5.set(seg, x);
    }
    public static MemorySegment reserved0$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$93.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void reserved0$set(MemorySegment seg, long index, MemorySegment x) {
        constants$93.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle reserved1$VH() {
        return constants$94.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void* reserved1;
     * }
     */
    public static MemorySegment reserved1$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$94.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void* reserved1;
     * }
     */
    public static void reserved1$set(MemorySegment seg, MemorySegment x) {
        constants$94.const$0.set(seg, x);
    }
    public static MemorySegment reserved1$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$94.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void reserved1$set(MemorySegment seg, long index, MemorySegment x) {
        constants$94.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle reserved2$VH() {
        return constants$94.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void* reserved2;
     * }
     */
    public static MemorySegment reserved2$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$94.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void* reserved2;
     * }
     */
    public static void reserved2$set(MemorySegment seg, MemorySegment x) {
        constants$94.const$1.set(seg, x);
    }
    public static MemorySegment reserved2$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$94.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void reserved2$set(MemorySegment seg, long index, MemorySegment x) {
        constants$94.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    /**
     * {@snippet :
 * long (*DestroyJavaVM)(struct JNIInvokeInterface_**);
     * }
     */
    public interface DestroyJavaVM {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(DestroyJavaVM fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(constants$94.const$2, fi, constants$3.const$1, scope);
        }
        static DestroyJavaVM ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)constants$3.const$3.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle DestroyJavaVM$VH() {
        return constants$94.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * long (*DestroyJavaVM)(struct JNIInvokeInterface_**);
     * }
     */
    public static MemorySegment DestroyJavaVM$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$94.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * long (*DestroyJavaVM)(struct JNIInvokeInterface_**);
     * }
     */
    public static void DestroyJavaVM$set(MemorySegment seg, MemorySegment x) {
        constants$94.const$3.set(seg, x);
    }
    public static MemorySegment DestroyJavaVM$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$94.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void DestroyJavaVM$set(MemorySegment seg, long index, MemorySegment x) {
        constants$94.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static DestroyJavaVM DestroyJavaVM(MemorySegment segment, SegmentScope scope) {
        return DestroyJavaVM.ofAddress(DestroyJavaVM$get(segment), scope);
    }
    /**
     * {@snippet :
 * long (*AttachCurrentThread)(struct JNIInvokeInterface_**,void**,void*);
     * }
     */
    public interface AttachCurrentThread {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(AttachCurrentThread fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(constants$94.const$4, fi, constants$8.const$3, scope);
        }
        static AttachCurrentThread ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)constants$8.const$5.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle AttachCurrentThread$VH() {
        return constants$94.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * long (*AttachCurrentThread)(struct JNIInvokeInterface_**,void**,void*);
     * }
     */
    public static MemorySegment AttachCurrentThread$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$94.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * long (*AttachCurrentThread)(struct JNIInvokeInterface_**,void**,void*);
     * }
     */
    public static void AttachCurrentThread$set(MemorySegment seg, MemorySegment x) {
        constants$94.const$5.set(seg, x);
    }
    public static MemorySegment AttachCurrentThread$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$94.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void AttachCurrentThread$set(MemorySegment seg, long index, MemorySegment x) {
        constants$94.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static AttachCurrentThread AttachCurrentThread(MemorySegment segment, SegmentScope scope) {
        return AttachCurrentThread.ofAddress(AttachCurrentThread$get(segment), scope);
    }
    /**
     * {@snippet :
 * long (*DetachCurrentThread)(struct JNIInvokeInterface_**);
     * }
     */
    public interface DetachCurrentThread {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(DetachCurrentThread fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(constants$95.const$0, fi, constants$3.const$1, scope);
        }
        static DetachCurrentThread ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)constants$3.const$3.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle DetachCurrentThread$VH() {
        return constants$95.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * long (*DetachCurrentThread)(struct JNIInvokeInterface_**);
     * }
     */
    public static MemorySegment DetachCurrentThread$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$95.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * long (*DetachCurrentThread)(struct JNIInvokeInterface_**);
     * }
     */
    public static void DetachCurrentThread$set(MemorySegment seg, MemorySegment x) {
        constants$95.const$1.set(seg, x);
    }
    public static MemorySegment DetachCurrentThread$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$95.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void DetachCurrentThread$set(MemorySegment seg, long index, MemorySegment x) {
        constants$95.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static DetachCurrentThread DetachCurrentThread(MemorySegment segment, SegmentScope scope) {
        return DetachCurrentThread.ofAddress(DetachCurrentThread$get(segment), scope);
    }
    /**
     * {@snippet :
 * long (*GetEnv)(struct JNIInvokeInterface_**,void**,long);
     * }
     */
    public interface GetEnv {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, int _x2);
        static MemorySegment allocate(GetEnv fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(constants$95.const$3, fi, constants$95.const$2, scope);
        }
        static GetEnv ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, int __x2) -> {
                try {
                    return (int)constants$95.const$4.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle GetEnv$VH() {
        return constants$95.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * long (*GetEnv)(struct JNIInvokeInterface_**,void**,long);
     * }
     */
    public static MemorySegment GetEnv$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$95.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * long (*GetEnv)(struct JNIInvokeInterface_**,void**,long);
     * }
     */
    public static void GetEnv$set(MemorySegment seg, MemorySegment x) {
        constants$95.const$5.set(seg, x);
    }
    public static MemorySegment GetEnv$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$95.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void GetEnv$set(MemorySegment seg, long index, MemorySegment x) {
        constants$95.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static GetEnv GetEnv(MemorySegment segment, SegmentScope scope) {
        return GetEnv.ofAddress(GetEnv$get(segment), scope);
    }
    /**
     * {@snippet :
 * long (*AttachCurrentThreadAsDaemon)(struct JNIInvokeInterface_**,void**,void*);
     * }
     */
    public interface AttachCurrentThreadAsDaemon {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(AttachCurrentThreadAsDaemon fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(constants$96.const$0, fi, constants$8.const$3, scope);
        }
        static AttachCurrentThreadAsDaemon ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)constants$8.const$5.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle AttachCurrentThreadAsDaemon$VH() {
        return constants$96.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * long (*AttachCurrentThreadAsDaemon)(struct JNIInvokeInterface_**,void**,void*);
     * }
     */
    public static MemorySegment AttachCurrentThreadAsDaemon$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$96.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * long (*AttachCurrentThreadAsDaemon)(struct JNIInvokeInterface_**,void**,void*);
     * }
     */
    public static void AttachCurrentThreadAsDaemon$set(MemorySegment seg, MemorySegment x) {
        constants$96.const$1.set(seg, x);
    }
    public static MemorySegment AttachCurrentThreadAsDaemon$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$96.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void AttachCurrentThreadAsDaemon$set(MemorySegment seg, long index, MemorySegment x) {
        constants$96.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static AttachCurrentThreadAsDaemon AttachCurrentThreadAsDaemon(MemorySegment segment, SegmentScope scope) {
        return AttachCurrentThreadAsDaemon.ofAddress(AttachCurrentThreadAsDaemon$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


