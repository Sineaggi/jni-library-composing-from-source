// Generated by jextract

package com.sineaggi.jniutils.internal.jni;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct JavaVMInitArgs {
 *     long version;
 *     long nOptions;
 *     struct JavaVMOption* options;
 *     unsigned char ignoreUnrecognized;
 * };
 * }
 */
public class JavaVMInitArgs {

    public static MemoryLayout $LAYOUT() {
        return constants$92.const$1;
    }
    public static VarHandle version$VH() {
        return constants$92.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * long version;
     * }
     */
    public static int version$get(MemorySegment seg) {
        return (int)constants$92.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * long version;
     * }
     */
    public static void version$set(MemorySegment seg, int x) {
        constants$92.const$2.set(seg, x);
    }
    public static int version$get(MemorySegment seg, long index) {
        return (int)constants$92.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void version$set(MemorySegment seg, long index, int x) {
        constants$92.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle nOptions$VH() {
        return constants$92.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * long nOptions;
     * }
     */
    public static int nOptions$get(MemorySegment seg) {
        return (int)constants$92.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * long nOptions;
     * }
     */
    public static void nOptions$set(MemorySegment seg, int x) {
        constants$92.const$3.set(seg, x);
    }
    public static int nOptions$get(MemorySegment seg, long index) {
        return (int)constants$92.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void nOptions$set(MemorySegment seg, long index, int x) {
        constants$92.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle options$VH() {
        return constants$92.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * struct JavaVMOption* options;
     * }
     */
    public static MemorySegment options$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$92.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * struct JavaVMOption* options;
     * }
     */
    public static void options$set(MemorySegment seg, MemorySegment x) {
        constants$92.const$4.set(seg, x);
    }
    public static MemorySegment options$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$92.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void options$set(MemorySegment seg, long index, MemorySegment x) {
        constants$92.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle ignoreUnrecognized$VH() {
        return constants$92.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned char ignoreUnrecognized;
     * }
     */
    public static byte ignoreUnrecognized$get(MemorySegment seg) {
        return (byte)constants$92.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned char ignoreUnrecognized;
     * }
     */
    public static void ignoreUnrecognized$set(MemorySegment seg, byte x) {
        constants$92.const$5.set(seg, x);
    }
    public static byte ignoreUnrecognized$get(MemorySegment seg, long index) {
        return (byte)constants$92.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void ignoreUnrecognized$set(MemorySegment seg, long index, byte x) {
        constants$92.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


